=====================================
Enum:        HidingSpot
Elements:    4
Description: Visibility enum for nav mesh hiding spots
=====================================

=====================================
Enum:        Hitgroup
Elements:    9
Description: Hit groups from traces
=====================================

=====================================
Enum:        IN
Elements:    26
Description: Button mask bindings
=====================================

=====================================
Enum:        MapLoad
Elements:    4
Description: Map load enum for GetLoadType()
=====================================

=====================================
Enum:        RenderMode
Elements:    11
Description: Render modes used by Get/SetRenderMode
=====================================

=====================================
Enum:        WeaponID
Elements:    69
Description: Weapon IDs for all NMRiH weapons.
=====================================

=====================================
Enum:        WeaponSound
Elements:    17
Description: Weapon sounds.
=====================================

Constant:    AE_TYPE_CLIENT
Value:       16 (int)
Description: Animation event flag which indicates an event is supposed to be clientside only.

Constant:    AE_TYPE_FACEPOSER
Value:       32 (int)
Description: Animation event flag with an unknown purpose. Presumably related to Faceposer.

Constant:    AE_TYPE_NEWEVENTSYSTEM
Value:       1024 (int)
Description: Animation event flag which indicates an event is using the new system. This is often used by class-specific events from NPCs.

Constant:    AE_TYPE_SCRIPTED
Value:       2 (int)
Description: Animation event flag with an unknown purpose.

Constant:    AE_TYPE_SERVER
Value:       1 (int)
Description: Animation event flag which indicates an event is supposed to be serverside only.

Constant:    AE_TYPE_SHARED
Value:       4 (int)
Description: Animation event flag which indicates an event is supposed to be shared between the server and client.

Constant:    AE_TYPE_WEAPON
Value:       8 (int)
Description: Animation event flag which indicates an event is part of a weapon.

Constant:    AISS_AWAKE
Value:       0 (int)
Description: NPC is awake. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_INPUT
Value:       3 (int)
Description: NPC is asleep and will only awaken upon receiving the Wake input. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_PVS
Value:       2 (int)
Description: NPC is asleep and will awaken upon entering a player's PVS. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_THREAT
Value:       1 (int)
Description: NPC is asleep and will awaken upon seeing an enemy. (NPC sleep state used in Get/SetSleepState())

Constant:    AI_SLEEP_FLAGS_NONE
Value:       0 (int)
Description: No sleep flags. (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    AI_SLEEP_FLAG_AUTO_PVS
Value:       1 (int)
Description: Indicates a NPC will sleep upon exiting PVS. (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    AI_SLEEP_FLAG_AUTO_PVS_AFTER_PVS
Value:       2 (int)
Description: Indicates a NPC will sleep upon exiting PVS after entering PVS for the first time(?????) (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    ALL_CONTEXTS
Value:       -1048576 (int)
Description: All sound contexts useable in QueryHearSound hooks, etc.

Constant:    ALL_SCENTS
Value:       224 (int)
Description: All "scent" sound types useable in QueryHearSound hooks, etc.

Constant:    ALL_SOUNDS
Value:       1048351 (int)
Description: All sound types useable in QueryHearSound hooks, etc.

Constant:    ALL_VISIBLE_CONTENTS
Value:       255 (int)
Description: Contains all visible spatial content flags.

Constant:    AUTOAIM_10DEGREES
Value:       0.173648 (float)
Description: 10-degree autoaim cone.

Constant:    AUTOAIM_20DEGREES
Value:       0.349066 (float)
Description: 20-degree autoaim cone.

Constant:    AUTOAIM_2DEGREES
Value:       0.034899 (float)
Description: 2-degree autoaim cone.

Constant:    AUTOAIM_5DEGREES
Value:       0.087156 (float)
Description: 5-degree autoaim cone.

Constant:    AUTOAIM_8DEGREES
Value:       0.139173 (float)
Description: 8-degree autoaim cone.

Constant:    AUTOAIM_SCALE_DEFAULT
Value:       1.000000 (float)
Description: Indicates default auto aim scale.

Constant:    AUTOAIM_SCALE_DIRECT_ONLY
Value:       0.000000 (float)
Description: Indicates auto aim should not be used except for direct hits.

Constant:    CHAN_AUTO
Value:       0 (int)
Description: The default generic sound channel.

Constant:    CHAN_BODY
Value:       4 (int)
Description: The sound channel used for clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.

Constant:    CHAN_ITEM
Value:       3 (int)
Description: The sound channel used for generic physics impact sounds, health/suit chargers, +use sounds.

Constant:    CHAN_REPLACE
Value:       -1 (int)
Description: The sound channel used when playing sounds through console commands.

Constant:    CHAN_STATIC
Value:       6 (int)
Description: The sound channel for constant/background sound that doesn't require any reaction.

Constant:    CHAN_STREAM
Value:       5 (int)
Description: The sound channel for sounds that can be delayed by an async load, i.e. aren't responses to particular events.

Constant:    CHAN_VOICE
Value:       2 (int)
Description: The sound channel used for dialogue, voice lines, etc.

Constant:    CHAN_VOICE2
Value:       7 (int)
Description: An additional sound channel for voices. Used in TF2 for the announcer.

Constant:    CHAN_VOICE_BASE
Value:       8 (int)
Description: The sound channel used for network voice data (online voice communications).

Constant:    CHAN_WEAPON
Value:       1 (int)
Description: The sound channel for player and NPC weapons.

Constant:    CLASS_BULLSEYE
Value:       7 (int)
Description: Used by npc_bullseye.

Constant:    CLASS_EARTH_FAUNA
Value:       8 (int)
Description: Used by birds.

Constant:    CLASS_NATIONAL_GUARD
Value:       6 (int)
Description: Reserved for the National Guard.

Constant:    CLASS_NONE
Value:       0 (int)
Description: No class.

Constant:    CLASS_NPC
Value:       5 (int)
Description: Reserved for generic NPCs.

Constant:    CLASS_PLAYER
Value:       1 (int)
Description: Used by players.

Constant:    CLASS_PLAYER_ALLY
Value:       2 (int)
Description: Used by player allies.

Constant:    CLASS_PLAYER_ALLY_VITAL
Value:       3 (int)
Description: Reserved for vital player allies.

Constant:    CLASS_ZOMBIE
Value:       4 (int)
Description: Used by the living dead.

Constant:    CLIENT_DLL
Value:       0 (int)

Constant:    COLLISION_GROUP_BREAKABLE_GLASS
Value:       6 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS
Value:       1 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS_TRIGGER
Value:       2 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DISSOLVING
Value:       25 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DOOR_BLOCKER
Value:       23 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE
Value:       4 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE_DEBRIS
Value:       3 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_IN_VEHICLE
Value:       19 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NONE
Value:       0 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC
Value:       9 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_ACTOR
Value:       27 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_SCRIPTED
Value:       28 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PASSABLE_DOOR
Value:       24 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER
Value:       5 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER_MOVEMENT
Value:       8 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PROJECTILE
Value:       22 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PUSHAWAY
Value:       26 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE
Value:       7 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE_CLIP
Value:       21 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_WEAPON
Value:       20 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    CONTENTS_AREAPORTAL
Value:       32768 (int)
Description: Spatial content flags.

Constant:    CONTENTS_AUX
Value:       4 (int)
Description: Spatial content flags.

Constant:    CONTENTS_BLOCKLOS
Value:       64 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_0
Value:       262144 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_180
Value:       1048576 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_270
Value:       2097152 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_90
Value:       524288 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_DOWN
Value:       8388608 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_UP
Value:       4194304 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DEBRIS
Value:       67108864 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DETAIL
Value:       134217728 (int)
Description: Spatial content flags.

Constant:    CONTENTS_EMPTY
Value:       0 (int)
Description: Spatial content flags.

Constant:    CONTENTS_GRATE
Value:       8 (int)
Description: Spatial content flags.

Constant:    CONTENTS_HITBOX
Value:       1073741824 (int)
Description: Spatial content flags.

Constant:    CONTENTS_IGNORE_NODRAW_OPAQUE
Value:       8192 (int)
Description: Spatial content flags.

Constant:    CONTENTS_LADDER
Value:       536870912 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTER
Value:       33554432 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTERCLIP
Value:       131072 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MOVEABLE
Value:       16384 (int)
Description: Spatial content flags.

Constant:    CONTENTS_OPAQUE
Value:       128 (int)
Description: Spatial content flags.

Constant:    CONTENTS_ORIGIN
Value:       16777216 (int)
Description: Spatial content flags.

Constant:    CONTENTS_PLAYERCLIP
Value:       65536 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SLIME
Value:       16 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SOLID
Value:       1 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM1
Value:       2048 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM2
Value:       4096 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TESTFOGVOLUME
Value:       256 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TRANSLUCENT
Value:       268435456 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WATER
Value:       32 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WINDOW
Value:       2 (int)
Description: Spatial content flags.

Constant:    DAMAGE_AIM
Value:       3 (int)
Description: (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_EVENTS_ONLY
Value:       1 (int)
Description: Call damage functions, but don't modify health (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_NO
Value:       0 (int)
Description: Don't take damage (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_YES
Value:       2 (int)
Description: Allow damage to be taken (Use with GetTakeDamage/SetTakeDamage)

Constant:    DEG2RAD
Value:       0.017453 (float)

Constant:    DMG_ACID
Value:       1048576 (int)
Description: Damage type used in damage information.

Constant:    DMG_AIRBOAT
Value:       33554432 (int)
Description: Damage type used in damage information.

Constant:    DMG_ALWAYSGIB
Value:       8192 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST
Value:       64 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST_SURFACE
Value:       134217728 (int)
Description: Damage type used in damage information.

Constant:    DMG_BUCKSHOT
Value:       536870912 (int)
Description: Damage type used in damage information.

Constant:    DMG_BULLET
Value:       2 (int)
Description: Damage type used in damage information.

Constant:    DMG_BURN
Value:       8 (int)
Description: Damage type used in damage information.

Constant:    DMG_CLUB
Value:       128 (int)
Description: Damage type used in damage information.

Constant:    DMG_CRUSH
Value:       1 (int)
Description: Damage type used in damage information.

Constant:    DMG_DIRECT
Value:       268435456 (int)
Description: Damage type used in damage information.

Constant:    DMG_DISSOLVE
Value:       67108864 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWN
Value:       16384 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWNRECOVER
Value:       524288 (int)
Description: Damage type used in damage information.

Constant:    DMG_ENERGYBEAM
Value:       1024 (int)
Description: Damage type used in damage information.

Constant:    DMG_FALL
Value:       32 (int)
Description: Damage type used in damage information.

Constant:    DMG_GENERIC
Value:       0 (int)
Description: Damage type used in damage information.

Constant:    DMG_NERVEGAS
Value:       65536 (int)
Description: Damage type used in damage information.

Constant:    DMG_NEVERGIB
Value:       4096 (int)
Description: Damage type used in damage information.

Constant:    DMG_PARALYZE
Value:       32768 (int)
Description: Damage type used in damage information.

Constant:    DMG_PHYSGUN
Value:       8388608 (int)
Description: Damage type used in damage information.

Constant:    DMG_PLASMA
Value:       16777216 (int)
Description: Damage type used in damage information.

Constant:    DMG_POISON
Value:       131072 (int)
Description: Damage type used in damage information.

Constant:    DMG_PREVENT_PHYSICS_FORCE
Value:       2048 (int)
Description: Damage type used in damage information.

Constant:    DMG_RADIATION
Value:       262144 (int)
Description: Damage type used in damage information.

Constant:    DMG_REMOVENORAGDOLL
Value:       4194304 (int)
Description: Damage type used in damage information.

Constant:    DMG_SHOCK
Value:       256 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLASH
Value:       4 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLOWBURN
Value:       2097152 (int)
Description: Damage type used in damage information.

Constant:    DMG_SONIC
Value:       512 (int)
Description: Damage type used in damage information.

Constant:    DMG_VEHICLE
Value:       16 (int)
Description: Damage type used in damage information.

Constant:    D_ER
Value:       0 (int)
Description: 'Error' relationship definition. Used by NPCs and players for relationship disposition.

Constant:    D_FR
Value:       2 (int)
Description: Denotes a 'Fear' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_HT
Value:       1 (int)
Description: Denotes a 'Hate' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_LI
Value:       3 (int)
Description: Denotes a 'Like' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_NU
Value:       4 (int)
Description: Denotes a 'Neutral' relationship. Used by NPCs and players for relationship disposition.

Constant:    EFL_BOT_FROZEN
Value:       256 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_CHECK_UNTOUCH
Value:       16777216 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSANGVELOCITY
Value:       8192 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSTRANSFORM
Value:       2048 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSVELOCITY
Value:       4096 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SHADOWUPDATE
Value:       32 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SPATIAL_PARTITION
Value:       32768 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS
Value:       16384 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTBLOCKLOS
Value:       33554432 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTWALKON
Value:       67108864 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DORMANT
Value:       2 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_FORCE_CHECK_TRANSMIT
Value:       128 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_HAS_PLAYER_CHILD
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IN_SKYBOX
Value:       131072 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IS_BEING_LIFTED_BY_BARNACLE
Value:       1048576 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KEEP_ON_RECREATE_ENTITIES
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KILLME
Value:       1 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOCLIP_ACTIVE
Value:       4 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOTIFY
Value:       64 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_AUTO_EDICT_ATTACH
Value:       1024 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DAMAGE_FORCES
Value:       -2147483648 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DISSOLVE
Value:       134217728 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_GAME_PHYSICS_SIMULATION
Value:       8388608 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_MEGAPHYSCANNON_RAGDOLL
Value:       268435456 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_PHYSCANNON_INTERACTION
Value:       1073741824 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_ROTORWASH_PUSH
Value:       2097152 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_THINK_FUNCTION
Value:       4194304 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_WATER_VELOCITY_CHANGE
Value:       536870912 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SERVER_ONLY
Value:       512 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SETTING_UP_BONES
Value:       8 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_TOUCHING_FLUID
Value:       524288 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_USE_PARTITION_WHEN_NOT_SOLID
Value:       262144 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EF_BONEMERGE
Value:       1 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BONEMERGE_FASTCULL
Value:       128 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BRIGHTLIGHT
Value:       2 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_DIMLIGHT
Value:       4 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_ITEM_BLINK
Value:       256 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NODRAW
Value:       32 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOINTERP
Value:       8 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NORECEIVESHADOW
Value:       64 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOSHADOW
Value:       16 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_PARENT_ANIMATES
Value:       512 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    FCVAR_ACCESSIBLE_FROM_THREADS
Value:       33554432 (int)
Description: If this convar flag is set, it will be accessible from the material system thread.

Constant:    FCVAR_ARCHIVE
Value:       128 (int)
Description: If this convar flag is set, its value will be saved when the game is exited.

Constant:    FCVAR_ARCHIVE_XBOX
Value:       16777216 (int)
Description: If this convar flag is set, it will be archived on the Xbox config.

Constant:    FCVAR_CHEAT
Value:       16384 (int)
Description: Only useable in singleplayer / debug / multiplayer & sv_cheats

Constant:    FCVAR_CLIENTCMD_CAN_EXECUTE
Value:       1073741824 (int)
Description: If this convar flag is set, any client will be allowed to execute this command.

Constant:    FCVAR_CLIENTDLL
Value:       8 (int)
Description: This convar flag is defined in client DLL convars.

Constant:    FCVAR_DEMO
Value:       65536 (int)
Description: If this convar flag is set, it will be recorded when starting a demo file.

Constant:    FCVAR_DEVELOPMENTONLY
Value:       2 (int)
Description: If this convar flag is set, it's hidden in "retail" DLLs.

Constant:    FCVAR_DONTRECORD
Value:       131072 (int)
Description: If this convar flag is set, it will NOT be recorded when starting a demo file.

Constant:    FCVAR_GAMEDLL
Value:       4 (int)
Description: This convar flag is defined in server DLL convars.

Constant:    FCVAR_HIDDEN
Value:       16 (int)
Description: If this convar flag is set, it doesn't appear in the console or any searching tools, but it can still be set.

Constant:    FCVAR_MATERIAL_SYSTEM_THREAD
Value:       8388608 (int)
Description: This convar flag indicates it's read from the material system thread.

Constant:    FCVAR_NEVER_AS_STRING
Value:       4096 (int)
Description: If this convar flag is set, it will never be printed as a string.

Constant:    FCVAR_NONE
Value:       0 (int)
Description: Empty convar flag.

Constant:    FCVAR_NOTIFY
Value:       256 (int)
Description: If this convar flag is set, it will notify players when it is changed.

Constant:    FCVAR_NOT_CONNECTED
Value:       4194304 (int)
Description: If this convar flag is set, it cannot be changed by a client connected to the server.

Constant:    FCVAR_PRINTABLEONLY
Value:       1024 (int)
Description: If this convar flag is set, it cannot contain unprintable characters. Used for player name cvars, etc.

Constant:    FCVAR_PROTECTED
Value:       32 (int)
Description: This convar flag prevents convars with secure data (e.g. passwords) from sending full data to clients, only sending 1 if non-zero and 0 otherwise.

Constant:    FCVAR_RELOAD_MATERIALS
Value:       1048576 (int)
Description: If this convar flag is set, it will force a material reload when it changes.

Constant:    FCVAR_RELOAD_TEXTURES
Value:       2097152 (int)
Description: If this convar flag is set, it will force a texture reload when it changes.

Constant:    FCVAR_REPLICATED
Value:       8192 (int)
Description: If this convar flag is set, it will enforce a serverside value on any clientside counterparts. (also known as FCVAR_SERVER)

Constant:    FCVAR_SERVER_CANNOT_QUERY
Value:       536870912 (int)
Description: If this convar flag is set, the server will not be allowed to query its value.

Constant:    FCVAR_SERVER_CAN_EXECUTE
Value:       268435456 (int)
Description: If this convar flag is set, the server will be allowed to execute it as a client command.

Constant:    FCVAR_SPONLY
Value:       64 (int)
Description: If this convar flag is set, it can't be changed by clients connected to a multiplayer server.

Constant:    FCVAR_UNLOGGED
Value:       2048 (int)
Description: If this convar flag is set, it will not log its changes if a log is being created.

Constant:    FCVAR_UNREGISTERED
Value:       1 (int)
Description: If this convar flag is set, it isn't added to linked list, etc.

Constant:    FCVAR_USERINFO
Value:       512 (int)
Description: If this convar flag is set, it will be marked as info which plays a part in how the server identifies a client.

Constant:    FL_AIMTARGET
Value:       131072 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ATCONTROLS
Value:       128 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_BASEVELOCITY
Value:       16777216 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CLIENT
Value:       256 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CONVEYOR
Value:       8192 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DISSOLVING
Value:       536870912 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DONTTOUCH
Value:       8388608 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DUCKING
Value:       2 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FAKECLIENT
Value:       512 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FLY
Value:       2048 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FROZEN
Value:       64 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GODMODE
Value:       32768 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRAPHED
Value:       1048576 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRENADE
Value:       2097152 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INRAIN
Value:       32 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INWATER
Value:       1024 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_KILLME
Value:       134217728 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NOTARGET
Value:       65536 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NPC
Value:       16384 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_OBJECT
Value:       67108864 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONFIRE
Value:       268435456 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONGROUND
Value:       1 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONTRAIN
Value:       16 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_PARTIALGROUND
Value:       262144 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STATICPROP
Value:       524288 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STEPMOVEMENT
Value:       4194304 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_SWIM
Value:       4096 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_TRANSRAGDOLL
Value:       1073741824 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_UNBLOCKABLE_BY_PLAYER
Value:       -2147483648 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WATERJUMP
Value:       8 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WORLDBRUSH
Value:       33554432 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FSOLID_CUSTOMBOXTEST
Value:       2 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_CUSTOMRAYTEST
Value:       1 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_FORCE_WORLD_ALIGNED
Value:       64 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_SOLID
Value:       4 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_STANDABLE
Value:       16 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_ROOT_PARENT_ALIGNED
Value:       256 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER
Value:       8 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER_TOUCH_DEBRIS
Value:       512 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_USE_TRIGGER_BOUNDS
Value:       128 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_VOLUME_CONTENTS
Value:       32 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    GENDER_FEMALE
Value:       2 (int)
Description: A standard value used to represent female gender. Usually used for sounds.

Constant:    GENDER_MALE
Value:       1 (int)
Description: A standard value used to represent male gender. Usually used for sounds.

Constant:    GENDER_NONE
Value:       0 (int)
Description: A standard value used to represent no specific gender. Usually used for sounds.

Constant:    GLOBAL_DEAD
Value:       2 (int)
Description: Global state used by the Globals singleton.

Constant:    GLOBAL_OFF
Value:       0 (int)
Description: Global state used by the Globals singleton.

Constant:    GLOBAL_ON
Value:       1 (int)
Description: Global state used by the Globals singleton.

Constant:    HidingSpot.EXPOSED
Value:       8 (int)

Constant:    HidingSpot.GOOD_SNIPER_SPOT
Value:       2 (int)

Constant:    HidingSpot.IDEAL_SNIPER_SPOT
Value:       4 (int)

Constant:    HidingSpot.IN_COVER
Value:       1 (int)

Constant:    Hitgroup.Chest
Value:       2 (int)

Constant:    Hitgroup.Gear
Value:       10 (int)

Constant:    Hitgroup.Generic
Value:       0 (int)

Constant:    Hitgroup.Head
Value:       1 (int)

Constant:    Hitgroup.LeftArm
Value:       4 (int)

Constant:    Hitgroup.LeftLeg
Value:       6 (int)

Constant:    Hitgroup.RightArm
Value:       5 (int)

Constant:    Hitgroup.RightLeg
Value:       7 (int)

Constant:    Hitgroup.Stomach
Value:       3 (int)

Constant:    IN.ALT1
Value:       16384 (int)
Description: Button for +alt1

Constant:    IN.ALT2
Value:       32768 (int)
Description: Button for +alt2

Constant:    IN.ATTACK
Value:       1 (int)
Description: Button for +attack

Constant:    IN.ATTACK2
Value:       2048 (int)
Description: Button for +attack2

Constant:    IN.ATTACK3
Value:       33554432 (int)
Description: Button for +attack3

Constant:    IN.BACK
Value:       16 (int)
Description: Button for +back

Constant:    IN.BULLRUSH
Value:       4194304 (int)
Description: Unused button

Constant:    IN.CANCEL
Value:       64 (int)
Description: Special button flag for attack cancel

Constant:    IN.DUCK
Value:       4 (int)
Description: Button for +duck

Constant:    IN.FORWARD
Value:       8 (int)
Description: Button for +forward

Constant:    IN.GRENADE1
Value:       8388608 (int)
Description: Button for +grenade1

Constant:    IN.GRENADE2
Value:       16777216 (int)
Description: Button for +grenade2

Constant:    IN.JUMP
Value:       2 (int)
Description: Button for +jump

Constant:    IN.LEFT
Value:       128 (int)
Description: Button for +left

Constant:    IN.MOVELEFT
Value:       512 (int)
Description: Button for +moveleft

Constant:    IN.MOVERIGHT
Value:       1024 (int)
Description: Button for +moveright

Constant:    IN.RELOAD
Value:       8192 (int)
Description: Button for +reload

Constant:    IN.RIGHT
Value:       256 (int)
Description: Button for +right

Constant:    IN.RUN
Value:       4096 (int)
Description: Unused button (see IN.SPEED for sprint)

Constant:    IN.SCORE
Value:       65536 (int)
Description: Button for +score

Constant:    IN.SPEED
Value:       131072 (int)
Description: Button for +speed

Constant:    IN.USE
Value:       32 (int)
Description: Button for +use

Constant:    IN.WALK
Value:       262144 (int)
Description: Button for +walk

Constant:    IN.WEAPON1
Value:       1048576 (int)
Description: Special button used by weapons themselves

Constant:    IN.WEAPON2
Value:       2097152 (int)
Description: Special button used by weapons themselves

Constant:    IN.ZOOM
Value:       524288 (int)
Description: Button for +zoom

Constant:    LAST_VISIBLE_CONTENTS
Value:       128 (int)
Description: Contains last visible spatial content flags.

Constant:    MASK_BLOCKLOS
Value:       16449 (int)
Description: Spatial content mask representing objects which block LOS for AI (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_BLOCKLOS)

Constant:    MASK_BLOCKLOS_AND_NPCS
Value:       33570881 (int)
Description: Spatial content mask equivalent to MASK_BLOCKLOS, but also including NPCs (MASK_BLOCKLOS|CONTENTS_MONSTER)

Constant:    MASK_NPCSOLID
Value:       33701899 (int)
Description: Spatial content mask representing objects solid to NPCs, including NPC clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_NPCSOLID_BRUSHONLY
Value:       147467 (int)
Description: Spatial content mask equivalent to MASK_NPCSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_NPCWORLDSTATIC
Value:       131083 (int)
Description: Spatial content mask representing objects static to NPCs, used for nodegraph rebuilding (CONTENTS_SOLID|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_OPAQUE
Value:       16513 (int)
Description: Spatial content mask representing objects which block lighting (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_OPAQUE)

Constant:    MASK_OPAQUE_AND_NPCS
Value:       33570945 (int)
Description: Spatial content mask equivalent to MASK_OPAQUE, but also including NPCs (MASK_OPAQUE|CONTENTS_MONSTER)

Constant:    MASK_PLAYERSOLID
Value:       33636363 (int)
Description: Spatial content mask representing objects solid to the player, including player clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_PLAYERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_PLAYERSOLID_BRUSHONLY
Value:       81931 (int)
Description: Spatial content mask equivalent to MASK_PLAYERSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_PLAYERCLIP|CONTENTS_GRATE)

Constant:    MASK_SHOT
Value:       1174421507 (int)
Description: Spatial content mask representing objects solid to bullets (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_HITBOX)

Constant:    MASK_SHOT_HULL
Value:       100679691 (int)
Description: Spatial content mask representing objects solid to non-raycasted weapons, including grates (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_GRATE)

Constant:    MASK_SHOT_PORTAL
Value:       33570819 (int)
Description: Spatial content mask equivalent to MASK_SHOT, but excluding debris and not using expensive hitbox calculations (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER)

Constant:    MASK_SOLID
Value:       33570827 (int)
Description: Spatial content mask representing solid objects (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_SOLID_BRUSHONLY
Value:       16395 (int)
Description: Spatial content mask equivalent to MASK_SOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_GRATE)

Constant:    MASK_SPLITAREAPORTAL
Value:       48 (int)
Description: Spatial content mask representing objects which can split areaportals (CONTENTS_WATER|CONTENTS_SLIME)

Constant:    MASK_VISIBLE
Value:       24705 (int)
Description: Spatial content mask representing objects which block LOS for players (MASK_OPAQUE|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_VISIBLE_AND_NPCS
Value:       33579137 (int)
Description: Spatial content mask equivalent to MASK_VISIBLE, but also including NPCs (MASK_OPAQUE_AND_NPCS|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_WATER
Value:       16432 (int)
Description: Spatial content mask representing water and slime solids (CONTENTS_WATER|CONTENTS_MOVEABLE|CONTENTS_SLIME)

Constant:    MAX_COORD_FLOAT
Value:       16384.000000 (float)
Description: Maximum float coordinate.

Constant:    MAX_PLAYERS
Value:       9 (int)
Description: Max number of players in a game.

Constant:    MAX_TRACE_LENGTH
Value:       56755.839844 (float)
Description: Maximum traceable distance (assumes cubic world and trace from one corner to opposite).

Constant:    MOVETYPE_CUSTOM
Value:       11 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLY
Value:       4 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLYGRAVITY
Value:       5 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_ISOMETRIC
Value:       1 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_LADDER
Value:       9 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NOCLIP
Value:       8 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NONE
Value:       0 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_OBSERVER
Value:       10 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_PUSH
Value:       7 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_STEP
Value:       3 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_VPHYSICS
Value:       6 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_WALK
Value:       2 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MapLoad.Background
Value:       3 (int)
Description: Map was loaded as a background map

Constant:    MapLoad.LoadGame
Value:       1 (int)
Description: Map was loaded from a save file

Constant:    MapLoad.NewGame
Value:       0 (int)
Description: Map was loaded from a new game

Constant:    MapLoad.Transition
Value:       2 (int)
Description: Map was loaded from a level transition

Constant:    NAV_MESH_AVOID
Value:       128 (int)
Description: Avoid this area unless alternatives are too dangerous.

Constant:    NAV_MESH_CLIFF
Value:       32768 (int)
Description: This nav area is adjacent to a drop of at least CliffHeight.

Constant:    NAV_MESH_CROUCH
Value:       1 (int)
Description: Must crouch to use this node or area.

Constant:    NAV_MESH_DONT_HIDE
Value:       512 (int)
Description: Area should not be considered for hiding spot generation.

Constant:    NAV_MESH_FUNC_COST
Value:       536870912 (int)
Description: Area has designer specified cost controlled by func_nav_cost entities.

Constant:    NAV_MESH_HAS_ELEVATOR
Value:       1073741824 (int)
Description: Area is in an elevator's path.

Constant:    NAV_MESH_INVALID
Value:       0 (int)

Constant:    NAV_MESH_JUMP
Value:       2 (int)
Description: Must jump to traverse this area (only used during generation).

Constant:    NAV_MESH_NAV_BLOCKER
Value:       -2147483648 (int)
Description: Area is blocked by nav blocker.

Constant:    NAV_MESH_NO_HOSTAGES
Value:       2048 (int)
Description: Hostages shouldn't use this area.

Constant:    NAV_MESH_NO_JUMP
Value:       8 (int)
Description: Inhibit discontinuity jumping.

Constant:    NAV_MESH_NO_MERGE
Value:       8192 (int)
Description: Don't merge this area with adjacent areas.

Constant:    NAV_MESH_NO_ZOMBIE_SPAWN
Value:       65536 (int)
Description: Zombies shouldn't spawn here.

Constant:    NAV_MESH_OBSTACLE_TOP
Value:       16384 (int)
Description: This nav area is the climb point on the tip of an obstacle.

Constant:    NAV_MESH_PRECISE
Value:       4 (int)
Description: Do not adjust for obstacles, just move along area.

Constant:    NAV_MESH_RUN
Value:       32 (int)
Description: Must run to traverse this area.

Constant:    NAV_MESH_STAIRS
Value:       4096 (int)
Description: This area represents stairs, do not attempt to climb or jump them - just walk up.

Constant:    NAV_MESH_STAND
Value:       1024 (int)
Description: Bots hiding in this area should stand.

Constant:    NAV_MESH_STOP
Value:       16 (int)
Description: Must stop when entering this area.

Constant:    NAV_MESH_TRANSIENT
Value:       256 (int)
Description: Area may become blocked, and should be periodically checked.

Constant:    NAV_MESH_WALK
Value:       64 (int)
Description: Must walk to traverse this area.

Constant:    NPC_STATE_ALERT
Value:       2 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_COMBAT
Value:       3 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_DEAD
Value:       7 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_IDLE
Value:       1 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_INVALID
Value:       -1 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_NONE
Value:       0 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_PLAYDEAD
Value:       5 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_PRONE
Value:       6 (int)
Description: When in clutches of barnacle (NPC state type used in GetNPCState(), etc.)

Constant:    NPC_STATE_SCRIPT
Value:       4 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NUM_AI_CLASSES
Value:       9 (int)
Description: Number of AI classes.

Constant:    PATTACH_ABSORIGIN
Value:       0 (int)
Description: Create at absorigin, but don't follow

Constant:    PATTACH_ABSORIGIN_FOLLOW
Value:       1 (int)
Description: Create at absorigin, and update to follow the entity

Constant:    PATTACH_CUSTOMORIGIN
Value:       2 (int)
Description: Create at a custom origin, but don't follow

Constant:    PATTACH_POINT
Value:       3 (int)
Description: Create on attachment point, but don't follow

Constant:    PATTACH_POINT_FOLLOW
Value:       4 (int)
Description: Create on attachment point, and update to follow the entity

Constant:    PATTACH_ROOTBONE_FOLLOW
Value:       6 (int)
Description: Create at the root bone of the entity, and update to follow

Constant:    PATTACH_WORLDORIGIN
Value:       5 (int)
Description: Used for control points that don't attach to an entity

Constant:    PITCH_HIGH
Value:       120 (int)
Description: The standard high pitch value.

Constant:    PITCH_LOW
Value:       95 (int)
Description: The standard low pitch value.

Constant:    PITCH_NORM
Value:       100 (int)
Description: The standard pitch value.

Constant:    RAD2DEG
Value:       57.295780 (float)

Constant:    ROPE_BARBED
Value:       2 (int)
Description: Hack option to draw like a barbed wire. (for use in rope flags)

Constant:    ROPE_BREAKABLE
Value:       16 (int)
Description: Can the endpoints detach? (for use in rope flags)

Constant:    ROPE_COLLIDE
Value:       4 (int)
Description: Collide with the world. (for use in rope flags)

Constant:    ROPE_GRAVITY
Value:       Vector( 0.000000, 0.000000, 0.000000 ) (Vector)
Description: Default rope gravity vector.

Constant:    ROPE_INITIAL_HANG
Value:       64 (int)
Description: By default, ropes will simulate for a bit internally when they are created so they sag, but dynamically created ropes for things like harpoons don't want this. (for use in rope flags)

Constant:    ROPE_NO_GRAVITY
Value:       256 (int)
Description: Disable gravity on this rope. (for use in rope flags)

Constant:    ROPE_NUMFLAGS
Value:       9 (int)
Description: The number of rope flags recognized by the game.

Constant:    ROPE_PLAYER_WPN_ATTACH
Value:       128 (int)
Description: If this flag is set, then the second attachment must be a player. The rope will attach to "buff_attach" on the player's active weapon. This is a flag because it requires special code on the client to find the weapon. (for use in rope flags)

Constant:    ROPE_RESIZE
Value:       1 (int)
Description: Try to keep the rope dangling the same amount even as the rope length changes. (for use in rope flags)

Constant:    ROPE_SIMULATE
Value:       8 (int)
Description: Is the rope valid? (for use in rope flags)

Constant:    RenderMode.Additive
Value:       5 (int)

Constant:    RenderMode.AdditiveFractionalFrame
Value:       7 (int)

Constant:    RenderMode.AlphaAdd
Value:       8 (int)

Constant:    RenderMode.Color
Value:       1 (int)

Constant:    RenderMode.Environmental
Value:       6 (int)

Constant:    RenderMode.Glow
Value:       3 (int)

Constant:    RenderMode.None
Value:       10 (int)

Constant:    RenderMode.Normal
Value:       0 (int)

Constant:    RenderMode.Solid
Value:       4 (int)

Constant:    RenderMode.Texture
Value:       2 (int)

Constant:    RenderMode.WorldSpaceGlow
Value:       9 (int)

Constant:    SCRIPT_CLEANUP
Value:       3 (int)
Description: Cancelling the script / cleaning up.

Constant:    SCRIPT_PLAYING
Value:       0 (int)
Description: Moving to the scripted sequence position while playing a custom movement animation.

Constant:    SCRIPT_POST_IDLE
Value:       2 (int)
Description: Playing the post idle animation after playing the action animation.

Constant:    SCRIPT_RUN_TO_MARK
Value:       5 (int)
Description: Running to the scripted sequence position.

Constant:    SCRIPT_WAIT
Value:       1 (int)
Description: Waiting on everyone in the script to be ready. Plays the pre idle animation if there is one.

Constant:    SCRIPT_WALK_TO_MARK
Value:       4 (int)
Description: Walking to the scripted sequence position.

Constant:    SERVER_DLL
Value:       1 (int)

Constant:    SNDLVL_100dB
Value:       100 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_105dB
Value:       105 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_110dB
Value:       110 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_120dB
Value:       120 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_130dB
Value:       130 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_140dB
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_150dB
Value:       150 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_180dB
Value:       180 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_20dB
Value:       20 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_25dB
Value:       25 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_30dB
Value:       30 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_35dB
Value:       35 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_40dB
Value:       40 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_45dB
Value:       45 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_50dB
Value:       50 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_55dB
Value:       55 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_60dB
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_65dB
Value:       65 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_70dB
Value:       70 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_75dB
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_80dB
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_85dB
Value:       85 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_90dB
Value:       90 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_95dB
Value:       95 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_GUNFIRE
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_IDLE
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NONE
Value:       0 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NORM
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_STATIC
Value:       66 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_TALKING
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SND_CHANGE_PITCH
Value:       2 (int)
Description: Indicates a sound is a pitch change to an already-playing sound.

Constant:    SND_CHANGE_VOL
Value:       1 (int)
Description: Indicates a sound is a volume change to an already-playing sound.

Constant:    SND_DELAY
Value:       16 (int)
Description: Indicates a sound has an initial delay.

Constant:    SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL
Value:       1024 (int)
Description: Prevents a sound from interrupting other sounds on a channel (if the channel supports interruption).

Constant:    SND_IGNORE_NAME
Value:       512 (int)
Description: Used to change all sounds emitted by an entity, regardless of name.

Constant:    SND_IGNORE_PHONEMES
Value:       256 (int)
Description: Prevents the entity emitting this sound from using its phonemes (no lip-syncing).

Constant:    SND_SHOULDPAUSE
Value:       128 (int)
Description: Forces a sound to pause if the game is paused.

Constant:    SND_SPAWNING
Value:       8 (int)
Description: Indicates a sound is spawning, used in some cases for ambients. Not networked.

Constant:    SND_SPEAKER
Value:       64 (int)
Description: Indicates a sound is being played again by a microphone through a speaker.

Constant:    SND_STOP
Value:       4 (int)
Description: Indicates a sound is stopping an already-playing sound.

Constant:    SND_STOP_LOOPING
Value:       32 (int)
Description: Stops all looping sounds on an entity.

Constant:    SOLID_BBOX
Value:       2 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_BSP
Value:       1 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_CUSTOM
Value:       5 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_NONE
Value:       0 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_OBB
Value:       3 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_OBB_YAW
Value:       4 (int)
Description: Solid type used by VPhysics

Constant:    SOLID_VPHYSICS
Value:       6 (int)
Description: Solid type used by VPhysics

Constant:    SOUNDENT_CHANNEL_BULLET_IMPACT
Value:       6 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_INJURY
Value:       5 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_NPC_FOOTSTEP
Value:       7 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATED_DANGER
Value:       2 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATED_PHYSICS_DANGER
Value:       3 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATING
Value:       1 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_SPOOKY_NOISE
Value:       8 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_UNSPECIFIED
Value:       0 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_WEAPON
Value:       4 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_ZOMBINE_GRENADE
Value:       9 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_VOLUME_MACHINEGUN
Value:       1500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUNDENT_VOLUME_PISTOL
Value:       500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUNDENT_VOLUME_SHOTGUN
Value:       1500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUND_BUGBAIT
Value:       512 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_BULLET_IMPACT
Value:       16 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_CARCASS
Value:       32 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_COMBAT
Value:       1 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_ALLIES_ONLY
Value:       268435456 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_COMBINE_ONLY
Value:       8388608 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_DANGER_APPROACH
Value:       134217728 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_EXCLUDE_COMBINE
Value:       67108864 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_EXPLOSION
Value:       33554432 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_FROM_SNIPER
Value:       1048576 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_GUNFIRE
Value:       2097152 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_MORTAR
Value:       4194304 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_PLAYER_VEHICLE
Value:       536870912 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_REACT_TO_SOURCE
Value:       16777216 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_DANGER
Value:       8 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_DANGER_SNIPERONLY
Value:       2048 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_GARBAGE
Value:       128 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_MEAT
Value:       64 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_MOVE_AWAY
Value:       4096 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_NONE
Value:       0 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PHYSICS_DANGER
Value:       1024 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PLAYER
Value:       4 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PLAYER_VEHICLE
Value:       8192 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_HIGH
Value:       65536 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_LOW
Value:       16384 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_MEDIUM
Value:       32768 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_THUMPER
Value:       256 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_WORLD
Value:       2 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    TEAM_ANY
Value:       -2 (int)
Description: Index for any team.

Constant:    TEAM_INVALID
Value:       -1 (int)
Description: Index for an invalid team.

Constant:    TEAM_SPECTATOR
Value:       1 (int)
Description: Index for spectator team.

Constant:    TEAM_UNASSIGNED
Value:       0 (int)
Description: Index for an unassigned team.

Constant:    VECTOR_CONE_10DEGREES
Value:       Vector( 0.087160, 0.087160, 0.087160 ) (Vector)
Description: 10-degree weapon vector cone.

Constant:    VECTOR_CONE_15DEGREES
Value:       Vector( 0.130530, 0.130530, 0.130530 ) (Vector)
Description: 15-degree weapon vector cone.

Constant:    VECTOR_CONE_1DEGREES
Value:       Vector( 0.008730, 0.008730, 0.008730 ) (Vector)
Description: 1-degree weapon vector cone.

Constant:    VECTOR_CONE_20DEGREES
Value:       Vector( 0.173650, 0.173650, 0.173650 ) (Vector)
Description: 20-degree weapon vector cone.

Constant:    VECTOR_CONE_2DEGREES
Value:       Vector( 0.017450, 0.017450, 0.017450 ) (Vector)
Description: 2-degree weapon vector cone.

Constant:    VECTOR_CONE_3DEGREES
Value:       Vector( 0.026180, 0.026180, 0.026180 ) (Vector)
Description: 3-degree weapon vector cone.

Constant:    VECTOR_CONE_4DEGREES
Value:       Vector( 0.034900, 0.034900, 0.034900 ) (Vector)
Description: 4-degree weapon vector cone.

Constant:    VECTOR_CONE_5DEGREES
Value:       Vector( 0.043620, 0.043620, 0.043620 ) (Vector)
Description: 5-degree weapon vector cone.

Constant:    VECTOR_CONE_6DEGREES
Value:       Vector( 0.052340, 0.052340, 0.052340 ) (Vector)
Description: 6-degree weapon vector cone.

Constant:    VECTOR_CONE_7DEGREES
Value:       Vector( 0.061050, 0.061050, 0.061050 ) (Vector)
Description: 7-degree weapon vector cone.

Constant:    VECTOR_CONE_8DEGREES
Value:       Vector( 0.069760, 0.069760, 0.069760 ) (Vector)
Description: 8-degree weapon vector cone.

Constant:    VECTOR_CONE_9DEGREES
Value:       Vector( 0.078460, 0.078460, 0.078460 ) (Vector)
Description: 9-degree weapon vector cone.

Constant:    VECTOR_CONE_PRECALCULATED
Value:       Vector( 0.000000, 0.000000, 0.000000 ) (Vector)
Description: This is just a zero vector, but it adds some context indicating that the person writing the code is not allowing FireBullets() to modify the direction of the shot because the shot direction being passed into the function has already been modified by another piece of code and should be fired as specified.

Constant:    VOL_NORM
Value:       1.000000 (float)
Description: The standard volume value.

Constant:    WEAPON_PROFICIENCY_AVERAGE
Value:       1 (int)
Description: Average weapon proficiency. Causes average accuracy.

Constant:    WEAPON_PROFICIENCY_GOOD
Value:       2 (int)
Description: Good weapon proficiency. Causes good accuracy.

Constant:    WEAPON_PROFICIENCY_PERFECT
Value:       4 (int)
Description: Perfect weapon proficiency. Causes perfect accuracy.

Constant:    WEAPON_PROFICIENCY_POOR
Value:       0 (int)
Description: Poor weapon proficiency. Causes low accuracy.

Constant:    WEAPON_PROFICIENCY_VERY_GOOD
Value:       3 (int)
Description: Very good weapon proficiency. Causes very good accuracy.

Constant:    WeaponID.AMMOBOX_12GAUGE
Value:       55 (int)

Constant:    WeaponID.AMMOBOX_22LR
Value:       56 (int)

Constant:    WeaponID.AMMOBOX_308
Value:       57 (int)

Constant:    WeaponID.AMMOBOX_357
Value:       54 (int)

Constant:    WeaponID.AMMOBOX_45ACP
Value:       53 (int)

Constant:    WeaponID.AMMOBOX_556
Value:       58 (int)

Constant:    WeaponID.AMMOBOX_762MM
Value:       59 (int)

Constant:    WeaponID.AMMOBOX_9MM
Value:       52 (int)

Constant:    WeaponID.AMMOBOX_ARROW
Value:       60 (int)

Constant:    WeaponID.AMMOBOX_BOARD
Value:       61 (int)

Constant:    WeaponID.AMMOBOX_FLARE
Value:       63 (int)

Constant:    WeaponID.AMMOBOX_FUEL
Value:       62 (int)

Constant:    WeaponID.BOW_DEERHUNTER
Value:       22 (int)

Constant:    WeaponID.EXP_GRENADE
Value:       49 (int)

Constant:    WeaponID.EXP_MOLOTOV
Value:       50 (int)

Constant:    WeaponID.EXP_TNT
Value:       51 (int)

Constant:    WeaponID.FA_1022
Value:       11 (int)

Constant:    WeaponID.FA_1022_25MAG
Value:       12 (int)

Constant:    WeaponID.FA_1911
Value:       4 (int)

Constant:    WeaponID.FA_500A
Value:       9 (int)

Constant:    WeaponID.FA_870
Value:       6 (int)

Constant:    WeaponID.FA_CZ858
Value:       15 (int)

Constant:    WeaponID.FA_FNFAL
Value:       17 (int)

Constant:    WeaponID.FA_GLOCK17
Value:       1 (int)

Constant:    WeaponID.FA_JAE700
Value:       16 (int)

Constant:    WeaponID.FA_M16A4
Value:       20 (int)

Constant:    WeaponID.FA_M16A4_CARRYHANDLE
Value:       21 (int)

Constant:    WeaponID.FA_M92FS
Value:       2 (int)

Constant:    WeaponID.FA_MAC10
Value:       18 (int)

Constant:    WeaponID.FA_MKIII
Value:       3 (int)

Constant:    WeaponID.FA_MP5A3
Value:       19 (int)

Constant:    WeaponID.FA_SAKO85
Value:       14 (int)

Constant:    WeaponID.FA_SAKO85_IRONSIGHTS
Value:       67 (int)

Constant:    WeaponID.FA_SKS
Value:       13 (int)

Constant:    WeaponID.FA_SKS_NOBAYO
Value:       66 (int)

Constant:    WeaponID.FA_SUPERX3
Value:       7 (int)

Constant:    WeaponID.FA_SV10
Value:       8 (int)

Constant:    WeaponID.FA_SW686
Value:       5 (int)

Constant:    WeaponID.FA_WINCHESTER1892
Value:       10 (int)

Constant:    WeaponID.ITEM_BANDAGES
Value:       47 (int)

Constant:    WeaponID.ITEM_FIRST_AID
Value:       45 (int)

Constant:    WeaponID.ITEM_GENE_THERAPY
Value:       46 (int)

Constant:    WeaponID.ITEM_MAGLITE
Value:       42 (int)

Constant:    WeaponID.ITEM_PILLS
Value:       44 (int)

Constant:    WeaponID.ITEM_WALKIETALKIE
Value:       43 (int)

Constant:    WeaponID.ITEM_ZIPPO
Value:       48 (int)

Constant:    WeaponID.ME_ABRASIVESAW
Value:       31 (int)

Constant:    WeaponID.ME_AXE_FIRE
Value:       27 (int)

Constant:    WeaponID.ME_BAT_METAL
Value:       28 (int)

Constant:    WeaponID.ME_CHAINSAW
Value:       30 (int)

Constant:    WeaponID.ME_CLEAVER
Value:       65 (int)

Constant:    WeaponID.ME_CROWBAR
Value:       29 (int)

Constant:    WeaponID.ME_ETOOL
Value:       32 (int)

Constant:    WeaponID.ME_FISTS
Value:       33 (int)

Constant:    WeaponID.ME_FUBAR
Value:       34 (int)

Constant:    WeaponID.ME_HATCHET
Value:       35 (int)

Constant:    WeaponID.ME_KITKNIFE
Value:       36 (int)

Constant:    WeaponID.ME_MACHETE
Value:       37 (int)

Constant:    WeaponID.ME_PICKAXE
Value:       64 (int)

Constant:    WeaponID.ME_PIPE_LEAD
Value:       38 (int)

Constant:    WeaponID.ME_SHOVEL
Value:       39 (int)

Constant:    WeaponID.ME_SLEDGE
Value:       40 (int)

Constant:    WeaponID.ME_WRENCH
Value:       41 (int)

Constant:    WeaponID.TOOL_BARRICADE
Value:       23 (int)

Constant:    WeaponID.TOOL_EXTINGUISHER
Value:       24 (int)

Constant:    WeaponID.TOOL_FLARE_GUN
Value:       25 (int)

Constant:    WeaponID.TOOL_WELDER
Value:       26 (int)

Constant:    WeaponID.WEAPON_MAX
Value:       68 (int)

Constant:    WeaponID.WEAPON_NONE
Value:       0 (int)

Constant:    WeaponSound.BURST
Value:       5 (int)

Constant:    WeaponSound.DEPLOY
Value:       15 (int)

Constant:    WeaponSound.DOUBLE_NPC
Value:       4 (int)

Constant:    WeaponSound.EMPTY
Value:       0 (int)

Constant:    WeaponSound.MELEE_HIT
Value:       9 (int)

Constant:    WeaponSound.MELEE_HIT_WORLD
Value:       10 (int)

Constant:    WeaponSound.MELEE_MISS
Value:       8 (int)

Constant:    WeaponSound.NUM_SHOOT_SOUND_TYPES
Value:       16 (int)

Constant:    WeaponSound.RELOAD
Value:       6 (int)

Constant:    WeaponSound.RELOAD_NPC
Value:       7 (int)

Constant:    WeaponSound.SINGLE
Value:       1 (int)

Constant:    WeaponSound.SINGLE_NPC
Value:       2 (int)

Constant:    WeaponSound.SPECIAL1
Value:       11 (int)

Constant:    WeaponSound.SPECIAL2
Value:       12 (int)

Constant:    WeaponSound.SPECIAL3
Value:       13 (int)

Constant:    WeaponSound.TAUNT
Value:       14 (int)

Constant:    WeaponSound.WPN_DOUBLE
Value:       3 (int)

Constant:    bits_CAP_AIM_GUN
Value:       536870912 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_ANIMATEDFACE
Value:       8388608 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_AUTO_DOORS
Value:       1024 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_DOORS_GROUP
Value:       3072 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_DUCK
Value:       134217728 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_FRIENDLY_DMG_IMMUNE
Value:       33554432 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_MELEE_ATTACK1
Value:       524288 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_MELEE_ATTACK2
Value:       1048576 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_RANGE_ATTACK1
Value:       131072 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_RANGE_ATTACK2
Value:       262144 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MELEE_ATTACK_GROUP
Value:       98304 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_CLIMB
Value:       8 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_CRAWL
Value:       32 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_FLY
Value:       4 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_GROUND
Value:       1 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_JUMP
Value:       2 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_SHOOT
Value:       64 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_SWIM
Value:       16 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_NO_HIT_PLAYER
Value:       268435456 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_NO_HIT_SQUADMATES
Value:       1073741824 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_OPEN_DOORS
Value:       2048 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_RANGE_ATTACK_GROUP
Value:       24576 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SIMPLE_RADIUS_DAMAGE
Value:       -2147483648 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SKIP_NAV_GROUND_CHECK
Value:       128 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SQUAD
Value:       67108864 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_TURN_HEAD
Value:       4096 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE
Value:       256 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE_SHOT_REGULATOR
Value:       16777216 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE_WEAPONS
Value:       2097152 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_MELEE_ATTACK1
Value:       32768 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_MELEE_ATTACK2
Value:       65536 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_RANGE_ATTACK1
Value:       8192 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_RANGE_ATTACK2
Value:       16384 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

=====================================
Class:       AI_EnemyInfo_t
Base:        
Description: Accessor for information about an enemy.
=====================================

=====================================
Class:       CAI_BaseActor
Base:        CAI_BaseNPC
Description: The base class for NPCs which act in complex choreo scenes.
=====================================

=====================================
Class:       CAI_BaseNPC
Base:        CBaseCombatCharacter
Description: The base class all NPCs derive from.
=====================================

=====================================
Class:       CAI_Expresser
Base:        
Description: Expresser class for complex speech.
=====================================

=====================================
Class:       CAI_GoalEntity
Base:        CBaseEntity
Description: The base class for goal entities used to control NPC behavior.
=====================================

=====================================
Class:       CAI_Hint
Base:        CBaseEntity
Description: An entity which gives contextual pointers for NPCs.
=====================================

=====================================
Class:       CAI_Squad
Base:        
Description: NPC squads used for schedule coordination, sharing information about enemies, etc.
=====================================

=====================================
Class:       CAI_SquadManager
Base:        
Description: Manager for NPC squads.
=====================================

=====================================
Class:       CAmbientFMOD
Base:        CBaseEntity
Description: Entity similar to ambient_generic, using FMOD sound system for playback.
=====================================

=====================================
Class:       CAmmoDef
Base:        
Description: The ammo type definition manager.
=====================================

=====================================
Class:       CBaseAnimating
Base:        CBaseEntity
Description: Animating models
=====================================

=====================================
Class:       CBaseCombatCharacter
Base:        CBaseFlex
Description: The base class shared by players and NPCs.
=====================================

=====================================
Class:       CBaseCombatWeapon
Base:        CBaseAnimating
Description: The base class for all equippable weapons.
=====================================

=====================================
Class:       CBaseEntity
Base:        
Description: Root class of all server-side entities
=====================================

=====================================
Class:       CBaseFilter
Base:        CBaseEntity
Description: All entities which could be used as filters.
=====================================

=====================================
Class:       CBaseFlex
Base:        CBaseAnimating
Description: Animated characters who have vertex flex capability.
=====================================

=====================================
Class:       CBasePlayer
Base:        CInfectableCharacter
Description: The player entity.
=====================================

=====================================
Class:       CConvars
Base:        
Description: Provides an interface to convars.
=====================================

=====================================
Class:       CDebugOverlayScriptHelper
Base:        
Description: CDebugOverlayScriptHelper
=====================================

=====================================
Class:       CEntities
Base:        
Description: The global list of entities
=====================================

=====================================
Class:       CEnvEntityMaker
Base:        CBaseEntity
Description: env_entity_maker
=====================================

=====================================
Class:       CEnvScreenOverlayMultiplayer
Base:        CBaseEntity
Description: An entity that can display and control a set of screen overlays, to be displayed over the player's view.
=====================================

=====================================
Class:       CEnvTimer
Base:        CBaseEntity
Description: An entity that displays a simple HUD timer, with controls similar to a stopwatch.
=====================================

=====================================
Class:       CFilterScript
Base:        CBaseFilter
Description: The filter_script entity which allows VScript functions to hook onto filter methods.
=====================================

=====================================
Class:       CFuncZombieSpawn
Base:        CBaseEntity
Description: Zombie spawn volume.
=====================================

=====================================
Class:       CFunc_SafeZone
Base:        CBaseEntity
Description: Safe zone for survival mode.
=====================================

=====================================
Class:       CGameRules
Base:        
Description: The container of the game's rules, handling behavior which could be different on a game-by-game basis.
=====================================

=====================================
Class:       CGameState
Base:        
Description: Helper interface for various game state functions.
=====================================

=====================================
Class:       CGameTrace
Base:        
Description: trace_t
=====================================

=====================================
Class:       CInfectableCharacter
Base:        CBaseCombatCharacter
Description: Base class for all characters that can be infected.
=====================================

=====================================
Class:       CItem_AmmoBox
Base:        CBaseAnimating
Description: Ammo box.
=====================================

=====================================
Class:       CItem_InventoryBox
Base:        CBaseAnimating
Description: Inventory box, an entity used for supply crates.
=====================================

=====================================
Class:       CLogicProgress
Base:        CBaseEntity
Description: An entity that displays a HUD progress bar on clients, stores progress, and fires an output on completion.
=====================================

=====================================
Class:       CLogicScriptProxy
Base:        CBaseEntity
Description: Script proxy, an entity bridge between VScript and server plugins.
=====================================

=====================================
Class:       CNMRiH_BarricadePoint
Base:        CBaseAnimating
Description: A place that a player can barricade.
=====================================

=====================================
Class:       CNMRiH_BaseZombie
Base:        CAI_BaseNPC
Description: The zombie entity.
=====================================

=====================================
Class:       CNMRiH_GameRules
Base:        CGameRules
=====================================

=====================================
Class:       CNMRiH_HealthStationLocation
Base:        CBaseAnimating
Description: Health station.
=====================================

=====================================
Class:       CNMRiH_ItemCustom
Base:        CBaseAnimating
Description: A carryable item with custom properties.
=====================================

=====================================
Class:       CNMRiH_Music_Manager
Base:        CBaseEntity
Description: Dynamic music manager.
=====================================

=====================================
Class:       CNMRiH_Player
Base:        CBasePlayer
Description: The player entity for NMRiH.
=====================================

=====================================
Class:       CNMRiH_WeaponBase
Base:        CBaseCombatWeapon
Description: The weapon entity for NMRiH.
=====================================

=====================================
Class:       CNavMesh
Base:        
Description: An interface for nav areas.
=====================================

=====================================
Class:       CNetPropManager
Base:        
Description: Allows reading and updating the network properties and data fields of an entity.
=====================================

=====================================
Class:       CObjective
Base:        
Description: A map objective, used in conjunction with CObjectiveManager.
=====================================

=====================================
Class:       CObjectiveManager
Base:        
Description: Interface for objective manager.
=====================================

=====================================
Class:       COverlord_Wave_Controller
Base:        CBaseEntity
Description: The wave controller.
=====================================

=====================================
Class:       COverlord_Zombie_Helper
Base:        CBaseEntity
Description: The zombie helper.
=====================================

=====================================
Class:       CPointMessageMultiplayer
Base:        CBaseEntity
Description: An entity that displays a text message in the world, at its origin. Has multiplayer support.
=====================================

=====================================
Class:       CPointViewControlMultiplayer
Base:        CBaseEntity
Description: A camera entity that controls the player's view. While it's active, the player will see out of the camera. Has multiplayer support.
=====================================

=====================================
Class:       CPointWorldText
Base:        CBaseEntity
Description: An entity that displays a text message oriented in the world, at its origin.
=====================================

=====================================
Class:       CRagdollProp
Base:        CBaseAnimating
Description: Ragdoll physics prop.
=====================================

=====================================
Class:       CRandomSpawnController
Base:        CBaseEntity
Description: Entity to limit items created by random_spawner entities.
=====================================

=====================================
Class:       CRandom_Spawner
Base:        CBaseEntity
Description: An entity that spawns random items.
=====================================

=====================================
Class:       CRulesetManager
Base:        
Description: Interface for ruleset manager.
=====================================

=====================================
Class:       CSceneEntity
Base:        CBaseEntity
Description: Choreographed scene which controls animation and/or dialog on one or more actors.
=====================================

=====================================
Class:       CSceneListManager
Base:        CBaseEntity
Description: Stores choreo scenes and cleans them up when a later scene in the list begins playing.
=====================================

=====================================
Class:       CScriptKeyValues
Base:        
Description: Wrapper class over KeyValues instance
=====================================

=====================================
Class:       CScriptNavArea
Base:        
Description: Rectangular region defining a walkable area in the environment.
=====================================

=====================================
Class:       CSound
Base:        
Description: A sound NPCs can hear.
=====================================

=====================================
Class:       CTakeDamageInfo
Base:        
Description: Damage information handler.
=====================================

=====================================
Class:       CUserCmd
Base:        
=====================================

=====================================
Class:       CVersion
Base:        
Description: Utilities for NMRiH versioning, such as patch labels.
=====================================

=====================================
Class:       Color
Base:        
=====================================

=====================================
Class:       EmitSound_t
Base:        
=====================================

=====================================
Class:       FireBulletsInfo_t
Base:        
=====================================

=====================================
Class:       IPhysicsObject
Base:        
Description: VPhysics object class.
=====================================

=====================================
Class:       Quaternion
Base:        
Description: A quaternion.
=====================================

=====================================
Class:       Vector
Base:        
Description: Basic 3-float Vector class.
=====================================

=====================================
Class:       cplane_t
Base:        
=====================================

=====================================
Class:       csurface_t
Base:        
=====================================

=====================================
Class:       matrix3x4_t
Base:        
Description: A 3x4 matrix transform.
=====================================

=====================================
Class:       scriptanimevent_t
Base:        
=====================================

=====================================
Class:       surfacedata_t
Base:        
=====================================

Function:    AI_EnemyInfo_t::DangerMemory
Signature:   bool AI_EnemyInfo_t::DangerMemory()
Description: Get the memory of danger position w/o enemy pointer.

Function:    AI_EnemyInfo_t::EludedMe
Signature:   bool AI_EnemyInfo_t::EludedMe()
Description: Get whether the enemy is not at the last known location.

Function:    AI_EnemyInfo_t::Enemy
Signature:   handle AI_EnemyInfo_t::Enemy()
Description: Get the enemy.

Function:    AI_EnemyInfo_t::LastKnownLocation
Signature:   Vector AI_EnemyInfo_t::LastKnownLocation()
Description: Get the enemy's last known location.

Function:    AI_EnemyInfo_t::LastSeenLocation
Signature:   Vector AI_EnemyInfo_t::LastSeenLocation()
Description: Get the enemy's last seen location.

Function:    AI_EnemyInfo_t::MobbedMe
Signature:   bool AI_EnemyInfo_t::MobbedMe()
Description: Get whether the enemy was part of a mob at some point.

Function:    AI_EnemyInfo_t::SetDangerMemory
Signature:   void AI_EnemyInfo_t::SetDangerMemory(bool)
Description: Set the memory of danger position w/o enemy pointer.

Function:    AI_EnemyInfo_t::SetEludedMe
Signature:   void AI_EnemyInfo_t::SetEludedMe(bool)
Description: Set whether the enemy is not at the last known location.

Function:    AI_EnemyInfo_t::SetEnemy
Signature:   void AI_EnemyInfo_t::SetEnemy(handle)
Description: Set the enemy.

Function:    AI_EnemyInfo_t::SetLastKnownLocation
Signature:   void AI_EnemyInfo_t::SetLastKnownLocation(Vector)
Description: Set the enemy's last known location.

Function:    AI_EnemyInfo_t::SetLastSeenLocation
Signature:   void AI_EnemyInfo_t::SetLastSeenLocation(Vector)
Description: Set the enemy's last seen location.

Function:    AI_EnemyInfo_t::SetMobbedMe
Signature:   void AI_EnemyInfo_t::SetMobbedMe(bool)
Description: Set whether the enemy was part of a mob at some point.

Function:    AI_EnemyInfo_t::SetTimeAtFirstHand
Signature:   void AI_EnemyInfo_t::SetTimeAtFirstHand(float)
Description: Set the time at which the enemy was seen firsthand.

Function:    AI_EnemyInfo_t::SetTimeFirstSeen
Signature:   void AI_EnemyInfo_t::SetTimeFirstSeen(float)
Description: Set the first time the enemy was seen.

Function:    AI_EnemyInfo_t::SetTimeLastReacquired
Signature:   void AI_EnemyInfo_t::SetTimeLastReacquired(float)
Description: Set the last time the enemy was reaquired.

Function:    AI_EnemyInfo_t::SetTimeLastReceivedDamageFrom
Signature:   void AI_EnemyInfo_t::SetTimeLastReceivedDamageFrom(float)
Description: Set the last time damage was received from this enemy.

Function:    AI_EnemyInfo_t::SetTimeLastSeen
Signature:   void AI_EnemyInfo_t::SetTimeLastSeen(float)
Description: Set the last time the enemy was seen.

Function:    AI_EnemyInfo_t::SetTimeValidEnemy
Signature:   void AI_EnemyInfo_t::SetTimeValidEnemy(float)
Description: Set the time at which the enemy can be selected (reaction delay).

Function:    AI_EnemyInfo_t::SetUnforgettable
Signature:   void AI_EnemyInfo_t::SetUnforgettable(bool)
Description: Set whether the enemy is unforgettable.

Function:    AI_EnemyInfo_t::TimeAtFirstHand
Signature:   float AI_EnemyInfo_t::TimeAtFirstHand()
Description: Get the time at which the enemy was seen firsthand.

Function:    AI_EnemyInfo_t::TimeFirstSeen
Signature:   float AI_EnemyInfo_t::TimeFirstSeen()
Description: Get the first time the enemy was seen.

Function:    AI_EnemyInfo_t::TimeLastReacquired
Signature:   float AI_EnemyInfo_t::TimeLastReacquired()
Description: Get the last time the enemy was reaquired.

Function:    AI_EnemyInfo_t::TimeLastReceivedDamageFrom
Signature:   float AI_EnemyInfo_t::TimeLastReceivedDamageFrom()
Description: Get the last time damage was received from this enemy.

Function:    AI_EnemyInfo_t::TimeLastSeen
Signature:   float AI_EnemyInfo_t::TimeLastSeen()
Description: Get the last time the enemy was seen.

Function:    AI_EnemyInfo_t::TimeValidEnemy
Signature:   float AI_EnemyInfo_t::TimeValidEnemy()
Description: Get the time at which the enemy can be selected (reaction delay).

Function:    AI_EnemyInfo_t::Unforgettable
Signature:   bool AI_EnemyInfo_t::Unforgettable()
Description: Get whether the enemy is unforgettable.

Function:    AddPhysVelocity
Signature:   void AddPhysVelocity(handle, Vector, Vector)
Description: Adds physics velocity for the given VPhysics object

Function:    AddThinkToEnt
Signature:   void AddThinkToEnt(handle, string)
Description: This will put a think function onto an entity, or pass null to remove it. This is NOT chained, so be careful.

Function:    AngleDiff
Signature:   float AngleDiff(float, float)
Description: Returns the degrees difference between two yaw angles.

Function:    AngleDistance
Signature:   float AngleDistance(float, float)

Function:    AngleIMatrix
Signature:   void AngleIMatrix(Vector, Vector, handle)
Description: Sets the inverted angles and position of a matrix.

Function:    AngleMatrix
Signature:   void AngleMatrix(Vector, Vector, handle)
Description: Sets the angles and position of a matrix.

Function:    AngleNormalize
Signature:   float AngleNormalize(float)
Description: Clamps an angle to be in between -360 and 360.

Function:    AngleNormalizePositive
Signature:   float AngleNormalizePositive(float)
Description: Clamps an angle to be in between 0 and 360.

Function:    AngleVectors
Signature:   Vector AngleVectors(Vector)
Description: Turns an angle into a direction vector.

Function:    AnglesAreEqual
Signature:   bool AnglesAreEqual(float, float, float)
Description: Checks if two angles are equal based on a given tolerance value.

Function:    Approach
Signature:   float Approach(float, float, float)

Function:    ApproachAngle
Signature:   float ApproachAngle(float, float, float)
Description: Returns an angle which approaches the target angle from the input angle with the specified speed.

Function:    Bias
Signature:   float Bias(float, float)
Description: The curve is biased towards 0 or 1 based on biasAmt, which is between 0 and 1.

Function:    CAI_BaseActor::AddLookTarget
Signature:   void CAI_BaseActor::AddLookTarget(handle, float, float, float)
Description: Add a potential look target for this actor.

Function:    CAI_BaseActor::AddLookTargetPos
Signature:   void CAI_BaseActor::AddLookTargetPos(Vector, float, float, float)
Description: Add a potential look target position for this actor.

Function:    CAI_BaseNPC::AddSleepFlags
Signature:   void CAI_BaseNPC::AddSleepFlags(int)
Description: Add to the NPC's sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::CapabilitiesAdd
Signature:   int CAI_BaseNPC::CapabilitiesAdd(int)
Description: Add capabilities to the NPC.

Function:    CAI_BaseNPC::CapabilitiesClear
Signature:   void CAI_BaseNPC::CapabilitiesClear()
Description: Clear capabilities for the NPC.

Function:    CAI_BaseNPC::CapabilitiesGet
Signature:   int CAI_BaseNPC::CapabilitiesGet()
Description: Get the capabilities the NPC currently possesses.

Function:    CAI_BaseNPC::CapabilitiesRemove
Signature:   int CAI_BaseNPC::CapabilitiesRemove(int)
Description: Remove capabilities from the NPC.

Function:    CAI_BaseNPC::ClearCondition
Signature:   void CAI_BaseNPC::ClearCondition(string)
Description: Clear a condition on the NPC.

Function:    CAI_BaseNPC::ClearConditionID
Signature:   void CAI_BaseNPC::ClearConditionID(int)
Description: Clear a condition on the NPC by ID.

Function:    CAI_BaseNPC::ClearSchedule
Signature:   void CAI_BaseNPC::ClearSchedule(string)
Description: Clear the NPC's current schedule for the specified reason.

Function:    CAI_BaseNPC::FindEnemyMemory
Signature:   handle CAI_BaseNPC::FindEnemyMemory(handle)
Description: Get information about the NPC's current enemy.

Function:    CAI_BaseNPC::Freeze
Signature:   void CAI_BaseNPC::Freeze()
Description: Freezes NPC in place and pauses their sequence.

Function:    CAI_BaseNPC::GetActivity
Signature:   string CAI_BaseNPC::GetActivity()
Description: Get the NPC's current activity.

Function:    CAI_BaseNPC::GetActivityID
Signature:   int CAI_BaseNPC::GetActivityID()
Description: Get the NPC's current activity ID.

Function:    CAI_BaseNPC::GetCine
Signature:   handle CAI_BaseNPC::GetCine()
Description: Get the NPC's currently running scripted sequence if it has one.

Function:    CAI_BaseNPC::GetEnemy
Signature:   handle CAI_BaseNPC::GetEnemy()
Description: Get the NPC's current enemy.

Function:    CAI_BaseNPC::GetEnemyLKP
Signature:   Vector CAI_BaseNPC::GetEnemyLKP()
Description: Get the last known position of the NPC's current enemy.

Function:    CAI_BaseNPC::GetExpresser
Signature:   handle CAI_BaseNPC::GetExpresser()
Description: Get a handle for this NPC's expresser.

Function:    CAI_BaseNPC::GetHintGroup
Signature:   string CAI_BaseNPC::GetHintGroup()
Description: Get the name of the NPC's hint group.

Function:    CAI_BaseNPC::GetHintNode
Signature:   handle CAI_BaseNPC::GetHintNode()
Description: Get the NPC's current AI hint.

Function:    CAI_BaseNPC::GetLastAttackTime
Signature:   float CAI_BaseNPC::GetLastAttackTime()
Description: Get the last time the NPC has used an attack (e.g. fired a bullet from a gun).

Function:    CAI_BaseNPC::GetLastDamageTime
Signature:   float CAI_BaseNPC::GetLastDamageTime()
Description: Get the last time the NPC has been damaged.

Function:    CAI_BaseNPC::GetLastEnemyTime
Signature:   float CAI_BaseNPC::GetLastEnemyTime()
Description: Get the last time the NPC has seen an enemy.

Function:    CAI_BaseNPC::GetLastPlayerDamageTime
Signature:   float CAI_BaseNPC::GetLastPlayerDamageTime()
Description: Get the last time the NPC has been damaged by a player.

Function:    CAI_BaseNPC::GetNPCState
Signature:   int CAI_BaseNPC::GetNPCState()
Description: Get the NPC's current state.

Function:    CAI_BaseNPC::GetSchedule
Signature:   string CAI_BaseNPC::GetSchedule()
Description: Get the NPC's current schedule.

Function:    CAI_BaseNPC::GetScheduleID
Signature:   int CAI_BaseNPC::GetScheduleID()
Description: Get the NPC's current schedule ID.

Function:    CAI_BaseNPC::GetScriptState
Signature:   int CAI_BaseNPC::GetScriptState()
Description: Get the NPC's current scripted sequence state.

Function:    CAI_BaseNPC::GetSleepState
Signature:   int CAI_BaseNPC::GetSleepState()
Description: Get the NPC's sleep state. (see AISS_ set of constants)

Function:    CAI_BaseNPC::GetSquad
Signature:   handle CAI_BaseNPC::GetSquad()
Description: Get the NPC's squad if it has one.

Function:    CAI_BaseNPC::GetTask
Signature:   string CAI_BaseNPC::GetTask()
Description: Get the NPC's current task.

Function:    CAI_BaseNPC::GetTaskID
Signature:   int CAI_BaseNPC::GetTaskID()
Description: Get the NPC's current task ID.

Function:    CAI_BaseNPC::HasCondition
Signature:   bool CAI_BaseNPC::HasCondition(string)
Description: Get whether the NPC has a condition.

Function:    CAI_BaseNPC::HasConditionID
Signature:   bool CAI_BaseNPC::HasConditionID(int)
Description: Get whether the NPC has a condition ID.

Function:    CAI_BaseNPC::HasSleepFlags
Signature:   bool CAI_BaseNPC::HasSleepFlags(int)
Description: Return true if the NPC has the specified sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::IsCommandable
Signature:   bool CAI_BaseNPC::IsCommandable()
Description: Check if the NPC is commandable.

Function:    CAI_BaseNPC::IsFrozen
Signature:   bool CAI_BaseNPC::IsFrozen()
Description: Returns true if NPC is frozen.

Function:    CAI_BaseNPC::IsInPlayerSquad
Signature:   bool CAI_BaseNPC::IsInPlayerSquad()
Description: Check if the NPC is in the player's squad.

Function:    CAI_BaseNPC::IsInSquad
Signature:   bool CAI_BaseNPC::IsInSquad()
Description: Returns true if the NPC is in a squad.

Function:    CAI_BaseNPC::IsMoving
Signature:   bool CAI_BaseNPC::IsMoving()
Description: Check if the NPC is moving.

Function:    CAI_BaseNPC::NumWeaponsInSquad
Signature:   int CAI_BaseNPC::NumWeaponsInSquad(string)
Description: Get the number of weapons in a squad.

Function:    CAI_BaseNPC::RemoveSleepFlags
Signature:   void CAI_BaseNPC::RemoveSleepFlags(int)
Description: Remove from NPC's sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::ResetActivity
Signature:   void CAI_BaseNPC::ResetActivity()
Description: Reset the NPC's current activity.

Function:    CAI_BaseNPC::SetActivity
Signature:   void CAI_BaseNPC::SetActivity(string)
Description: Set the NPC's current activity.

Function:    CAI_BaseNPC::SetActivityID
Signature:   void CAI_BaseNPC::SetActivityID(int)
Description: Set the NPC's current activity ID.

Function:    CAI_BaseNPC::SetCondition
Signature:   void CAI_BaseNPC::SetCondition(string)
Description: Set a condition on the NPC.

Function:    CAI_BaseNPC::SetConditionID
Signature:   void CAI_BaseNPC::SetConditionID(int)
Description: Set a condition on the NPC by ID.

Function:    CAI_BaseNPC::SetEnemy
Signature:   void CAI_BaseNPC::SetEnemy(handle)
Description: Set the NPC's current enemy.

Function:    CAI_BaseNPC::SetSchedule
Signature:   void CAI_BaseNPC::SetSchedule(string)
Description: Set the NPC's current schedule.

Function:    CAI_BaseNPC::SetScheduleID
Signature:   void CAI_BaseNPC::SetScheduleID(int)
Description: Set the NPC's current schedule ID.

Function:    CAI_BaseNPC::SetSleepState
Signature:   void CAI_BaseNPC::SetSleepState(int)
Description: Set the NPC's sleep state. (see AISS_ set of constants)

Function:    CAI_BaseNPC::Sleep
Signature:   void CAI_BaseNPC::Sleep()
Description: Puts the NPC into a sleeping state.

Function:    CAI_BaseNPC::Unfreeze
Signature:   void CAI_BaseNPC::Unfreeze()
Description: Unfreezes NPC if they're frozen.

Function:    CAI_BaseNPC::Wake
Signature:   void CAI_BaseNPC::Wake(handle)
Description: Awakens the NPC if it is currently asleep.

Function:    CAI_Expresser::BlockSpeechUntil
Signature:   void CAI_Expresser::BlockSpeechUntil(float)
Description: Block speech for a certain amount of time. This is stored in curtime.

Function:    CAI_Expresser::CanSpeak
Signature:   bool CAI_Expresser::CanSpeak()
Description: Check if the actor can speak.

Function:    CAI_Expresser::ForceNotSpeaking
Signature:   void CAI_Expresser::ForceNotSpeaking()
Description: If the actor is speaking, force the system to recognize them as not speaking.

Function:    CAI_Expresser::GetVoicePitch
Signature:   int CAI_Expresser::GetVoicePitch()
Description: Get the actor's voice pitch. Used in sentences.

Function:    CAI_Expresser::IsSpeaking
Signature:   bool CAI_Expresser::IsSpeaking()
Description: Check if the actor is speaking.

Function:    CAI_Expresser::SetVoicePitch
Signature:   void CAI_Expresser::SetVoicePitch(int)
Description: Set the actor's voice pitch. Used in sentences.

Function:    CAI_Expresser::Speak
Signature:   bool CAI_Expresser::Speak(string, string)
Description: Speak a response concept with the specified modifiers.

Function:    CAI_Expresser::SpeakAutoGeneratedScene
Signature:   bool CAI_Expresser::SpeakAutoGeneratedScene(string, float)
Description: Speak an automatically generated, instanced VCD scene for this sound as though it were played through the Response System. Return whether the scene successfully plays.

Function:    CAI_Expresser::SpeakRawScene
Signature:   bool CAI_Expresser::SpeakRawScene(string, float)
Description: Speak a raw, instanced VCD scene as though it were played through the Response System. Return whether the scene successfully plays.

Function:    CAI_Expresser::SpeakRawSentence
Signature:   int CAI_Expresser::SpeakRawSentence(string, float)
Description: Speak a raw sentence as though it were played through the Response System. Return the sentence's index; -1 if not successfully played.

Function:    CAI_GoalEntity::IsActive
Signature:   bool CAI_GoalEntity::IsActive()
Description: Check if the goal entity is active.

Function:    CAI_GoalEntity::NumActors
Signature:   int CAI_GoalEntity::NumActors()
Description: Get the number of actors using this goal entity.

Function:    CAI_Hint::GetDirection
Signature:   Vector CAI_Hint::GetDirection()
Description: Get the hint's direction.

Function:    CAI_Hint::GetHintActivity
Signature:   string CAI_Hint::GetHintActivity()
Description: Get the name of the hint activity.

Function:    CAI_Hint::GetHintGroup
Signature:   string CAI_Hint::GetHintGroup()
Description: Get the name of the hint's group.

Function:    CAI_Hint::GetHintType
Signature:   int CAI_Hint::GetHintType()
Description: Get the hint's type ID.

Function:    CAI_Hint::GetNodeId
Signature:   int CAI_Hint::GetNodeId()
Description: Get the hint's node ID.

Function:    CAI_Hint::GetUser
Signature:   handle CAI_Hint::GetUser()
Description: Get the hint's current user.

Function:    CAI_Hint::IsDisabled
Signature:   bool CAI_Hint::IsDisabled()
Description: Check if the hint is disabled.

Function:    CAI_Hint::IsLocked
Signature:   bool CAI_Hint::IsLocked()
Description: Check if the hint is locked.

Function:    CAI_Hint::Yaw
Signature:   float CAI_Hint::Yaw()
Description: Get the hint's yaw.

Function:    CAI_Squad::AddToSquad
Signature:   void CAI_Squad::AddToSquad(handle)
Description: Adds a NPC to the squad.

Function:    CAI_Squad::GetAnyMember
Signature:   handle CAI_Squad::GetAnyMember()
Description: Randomly get any one of the squad's members.

Function:    CAI_Squad::GetFirstMember
Signature:   handle CAI_Squad::GetFirstMember(bool)
Description: Get the squad's first member. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info).

Function:    CAI_Squad::GetLeader
Signature:   handle CAI_Squad::GetLeader()
Description: Get the squad's leader.

Function:    CAI_Squad::GetMember
Signature:   handle CAI_Squad::GetMember(int)
Description: Get one of the squad's members by their index.

Function:    CAI_Squad::GetName
Signature:   string CAI_Squad::GetName()
Description: Get the squad's name.

Function:    CAI_Squad::GetSquadData
Signature:   string CAI_Squad::GetSquadData(int)
Description: Get the squad data in the specified slot.

Function:    CAI_Squad::GetSquadIndex
Signature:   int CAI_Squad::GetSquadIndex(handle)
Description: Get the index of the specified NPC in the squad.

Function:    CAI_Squad::GetSquadMemberNearestTo
Signature:   handle CAI_Squad::GetSquadMemberNearestTo(Vector)
Description: Get the squad member nearest to a point.

Function:    CAI_Squad::GetVisibleSquadMembers
Signature:   int CAI_Squad::GetVisibleSquadMembers(handle)
Description: Get the number of squad members visible to the specified member.

Function:    CAI_Squad::IsLeader
Signature:   bool CAI_Squad::IsLeader(handle)
Description: Returns true if the specified NPC is the squad's leader.

Function:    CAI_Squad::IsMember
Signature:   bool CAI_Squad::IsMember(handle)
Description: Returns true if the specified NPC is a member of the squad.

Function:    CAI_Squad::IsSilentMember
Signature:   bool CAI_Squad::IsSilentMember(handle)
Description: Returns true if the specified NPC is a "silent squad member", which means it's only in squads for enemy information purposes and does not actually participate in any tactics. For example, this is used for npc_enemyfinder and vital allies (e.g. Alyx) in the player's squad. Please note that this does not check if the NPC is in the squad first.

Function:    CAI_Squad::NearestSquadMember
Signature:   handle CAI_Squad::NearestSquadMember(handle)
Description: Get the squad member nearest to the specified member.

Function:    CAI_Squad::NumMembers
Signature:   int CAI_Squad::NumMembers(bool)
Description: Get the squad's number of members. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info).

Function:    CAI_Squad::RemoveFromSquad
Signature:   void CAI_Squad::RemoveFromSquad(handle)
Description: Removes a NPC from the squad.

Function:    CAI_Squad::SetSquadData
Signature:   void CAI_Squad::SetSquadData(int, string)
Description: Set the squad data in the specified slot.

Function:    CAI_Squad::SquadMemberInRange
Signature:   handle CAI_Squad::SquadMemberInRange(Vector, float)
Description: Get the first squad member found around the specified position in the specified range.

Function:    CAI_Squad::UpdateEnemyMemory
Signature:   void CAI_Squad::UpdateEnemyMemory(handle, handle, Vector)
Description: Updates the squad's memory of an enemy. The first parameter is the updater, the second parameter is the enemy, and the third parameter is the position.

Function:    CAI_SquadManager::FindCreateSquad
Signature:   handle CAI_SquadManager::FindCreateSquad(string)
Description: Find the specified squad in the squad list or create it if it doesn't exist.

Function:    CAI_SquadManager::FindSquad
Signature:   handle CAI_SquadManager::FindSquad(string)
Description: Find the specified squad in the squad list. Returns null if none found.

Function:    CAI_SquadManager::GetFirstSquad
Signature:   handle CAI_SquadManager::GetFirstSquad()
Description: Get the first squad in the squad list.

Function:    CAI_SquadManager::GetNextSquad
Signature:   handle CAI_SquadManager::GetNextSquad(handle)
Description: Get the next squad in the squad list starting from the specified squad.

Function:    CAI_SquadManager::NumSquads
Signature:   int CAI_SquadManager::NumSquads()
Description: Get the number of squads in the list.

Function:    CAmbientFMOD::DecreaseVolume
Signature:   void CAmbientFMOD::DecreaseVolume(float)
Description: Decreases volume by the specified amount. If this result is less than the min. volume, it will be set to silent.

Function:    CAmbientFMOD::IncreaseVolume
Signature:   void CAmbientFMOD::IncreaseVolume(float)
Description: Increases volume by the specified amount. If this result is greater than the max. volume, it will be set to loudest.

Function:    CAmbientFMOD::PlaySound
Signature:   void CAmbientFMOD::PlaySound()

Function:    CAmbientFMOD::SetSound
Signature:   void CAmbientFMOD::SetSound(string)
Description: Sets a sound for playback, parameter can be a GameSound entry, or a direct filename. Supported formats: AIFF, ASF, ASX, DLS, FLAC, FSB, IT, M3U, MIDI, MOD, MP2, MP3, OGG, PLS, S3M, WAV, WAX, WMA, XM

Function:    CAmbientFMOD::SetSoundSource
Signature:   void CAmbientFMOD::SetSoundSource(handle)
Description: Sets sound source, with a parameter of an entity handle.

Function:    CAmbientFMOD::SetVolume
Signature:   void CAmbientFMOD::SetVolume(float)
Description: Sets sound volume, expressed as a range from 0.0 to 10.0, where 10.0 is the loudest.

Function:    CAmbientFMOD::StopSound
Signature:   void CAmbientFMOD::StopSound()

Function:    CAmbientFMOD::ToggleSound
Signature:   void CAmbientFMOD::ToggleSound()

Function:    CAmmoDef::DamageForce
Signature:   float CAmmoDef::DamageForce(int)
Description: Gets the amount of force this ammo type deals.

Function:    CAmmoDef::DamageType
Signature:   int CAmmoDef::DamageType(int)
Description: Gets the type of damage this ammo type deals.

Function:    CAmmoDef::Flags
Signature:   int CAmmoDef::Flags(int)
Description: Gets the flags this ammo type uses.

Function:    CAmmoDef::GetNumAmmoTypes
Signature:   int CAmmoDef::GetNumAmmoTypes()
Description: Gets the number of ammo types which currently exist.

Function:    CAmmoDef::Index
Signature:   int CAmmoDef::Index(string)
Description: Gets the index of the specified ammo type name.

Function:    CAmmoDef::MaxCarry
Signature:   int CAmmoDef::MaxCarry(int)
Description: Gets the maximum amount of this ammo type which players should be able to carry.

Function:    CAmmoDef::MaxSplashSize
Signature:   int CAmmoDef::MaxSplashSize(int)
Description: Gets the maximum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::MinSplashSize
Signature:   int CAmmoDef::MinSplashSize(int)
Description: Gets the minimum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::NPCDamage
Signature:   int CAmmoDef::NPCDamage(int)
Description: Gets the damage NPCs deal for the specified ammo type.

Function:    CAmmoDef::PlrDamage
Signature:   int CAmmoDef::PlrDamage(int)
Description: Gets the damage players deal for the specified ammo type.

Function:    CAmmoDef::TracerType
Signature:   int CAmmoDef::TracerType(int)
Description: Gets the type of tracer this ammo type uses.

Function:    CBaseAnimating::BecomeRagdollOnClient
Signature:   bool CBaseAnimating::BecomeRagdollOnClient(Vector)

Function:    CBaseAnimating::CanBecomeRagdoll
Signature:   bool CBaseAnimating::CanBecomeRagdoll()

Function:    CBaseAnimating::DisableGlow
Signature:   void CBaseAnimating::DisableGlow()
Description: Disables outline glow, requires entity to be 'glowable'.

Function:    CBaseAnimating::Dissolve
Signature:   bool CBaseAnimating::Dissolve(string, float, bool, int, Vector, int)
Description: Use 'sprites/blueglow1.vmt' for the default material, Time() for the default start time, false for npcOnly if you don't want it to check if the entity is a NPC first, 0 for the default dissolve type, Vector(0,0,0) for the default dissolver origin, and 0 for the default magnitude.

Function:    CBaseAnimating::EnableGlow
Signature:   void CBaseAnimating::EnableGlow()
Description: Enables outline glow, requires entity to be 'glowable'.

Function:    CBaseAnimating::FindBodygroupByName
Signature:   int CBaseAnimating::FindBodygroupByName(string)
Description: Finds a bodygroup by name

Function:    CBaseAnimating::GetAttachmentAngles
Signature:   Vector CBaseAnimating::GetAttachmentAngles(int)
Description: Get the attachement id's angles as a p,y,r vector

Function:    CBaseAnimating::GetAttachmentMatrix
Signature:   handle CBaseAnimating::GetAttachmentMatrix(int)
Description: Get the attachement id's matrix transform

Function:    CBaseAnimating::GetAttachmentOrigin
Signature:   Vector CBaseAnimating::GetAttachmentOrigin(int)
Description: Get the attachement id's origin vector

Function:    CBaseAnimating::GetBodygroup
Signature:   int CBaseAnimating::GetBodygroup(int)
Description: Gets a bodygroup

Function:    CBaseAnimating::GetBodygroupCount
Signature:   int CBaseAnimating::GetBodygroupCount(int)
Description: Gets the number of models in a bodygroup

Function:    CBaseAnimating::GetBodygroupName
Signature:   string CBaseAnimating::GetBodygroupName(int)
Description: Gets a bodygroup name

Function:    CBaseAnimating::GetBoneTransform
Signature:   void CBaseAnimating::GetBoneTransform(int, handle)
Description: Get the transform for the specified bone

Function:    CBaseAnimating::GetCycle
Signature:   float CBaseAnimating::GetCycle()

Function:    CBaseAnimating::GetModelScale
Signature:   float CBaseAnimating::GetModelScale()
Description: Returns current model scale.

Function:    CBaseAnimating::GetNumBodyGroups
Signature:   int CBaseAnimating::GetNumBodyGroups()
Description: Gets the number of bodygroups

Function:    CBaseAnimating::GetNumBones
Signature:   int CBaseAnimating::GetNumBones()
Description: Get the number of bones

Function:    CBaseAnimating::GetPhysicsBone
Signature:   int CBaseAnimating::GetPhysicsBone(int)
Description: Get physics bone from bone index

Function:    CBaseAnimating::GetPlaybackRate
Signature:   float CBaseAnimating::GetPlaybackRate()

Function:    CBaseAnimating::GetPoseParameter
Signature:   float CBaseAnimating::GetPoseParameter(string)
Description: Get the specified pose parameter's value

Function:    CBaseAnimating::GetSequence
Signature:   int CBaseAnimating::GetSequence()
Description: Gets the current sequence

Function:    CBaseAnimating::GetSequenceActivity
Signature:   int CBaseAnimating::GetSequenceActivity(int)
Description: Gets the activity ID of the specified sequence index

Function:    CBaseAnimating::GetSequenceActivityName
Signature:   string CBaseAnimating::GetSequenceActivityName(int)
Description: Gets the activity name of the specified sequence index

Function:    CBaseAnimating::GetSequenceKeyValues
Signature:   handle CBaseAnimating::GetSequenceKeyValues(int)
Description: Get a KeyValue class instance on the specified sequence. WARNING: This uses the same KeyValue pointer as GetModelKeyValues!

Function:    CBaseAnimating::GetSequenceMoveDist
Signature:   float CBaseAnimating::GetSequenceMoveDist(int)
Description: Gets the move distance of the specified sequence

Function:    CBaseAnimating::GetSequenceMoveYaw
Signature:   float CBaseAnimating::GetSequenceMoveYaw(int)
Description: Gets the move yaw of the specified sequence

Function:    CBaseAnimating::GetSequenceName
Signature:   string CBaseAnimating::GetSequenceName(int)
Description: Gets the name of the specified sequence index

Function:    CBaseAnimating::GetSkin
Signature:   int CBaseAnimating::GetSkin()
Description: Gets the model's skin

Function:    CBaseAnimating::Ignite
Signature:   void CBaseAnimating::Ignite(float, bool, float, bool)
Description: 'NPCOnly' only lets this fall through if the entity is a NPC and 'CalledByLevelDesigner' determines whether to treat this like the Ignite input or just an internal ignition call.

Function:    CBaseAnimating::IsGlowable
Signature:   bool CBaseAnimating::IsGlowable()
Description: Returns true if this entity can have an outline glow.

Function:    CBaseAnimating::IsRagdoll
Signature:   bool CBaseAnimating::IsRagdoll()

Function:    CBaseAnimating::IsSequenceFinished
Signature:   bool CBaseAnimating::IsSequenceFinished()
Description: Ask whether the main sequence is done playing

Function:    CBaseAnimating::LookupActivity
Signature:   int CBaseAnimating::LookupActivity(string)
Description: Gets the ID of the specified activity name

Function:    CBaseAnimating::LookupAttachment
Signature:   int CBaseAnimating::LookupAttachment(string)
Description: Get the named attachement id

Function:    CBaseAnimating::LookupBone
Signature:   int CBaseAnimating::LookupBone(string)
Description: Get the named bone id

Function:    CBaseAnimating::LookupSequence
Signature:   int CBaseAnimating::LookupSequence(string)
Description: Gets the index of the specified sequence name

Function:    CBaseAnimating::ResetSequenceInfo
Signature:   void CBaseAnimating::ResetSequenceInfo()

Function:    CBaseAnimating::Scorch
Signature:   void CBaseAnimating::Scorch(int, int)
Description: Makes the entity darker from scorching

Function:    CBaseAnimating::SelectHeaviestSequence
Signature:   int CBaseAnimating::SelectHeaviestSequence(int)
Description: Selects the sequence with the heaviest weight for the specified activity ID

Function:    CBaseAnimating::SelectWeightedSequence
Signature:   int CBaseAnimating::SelectWeightedSequence(int, int)
Description: Selects a sequence for the specified activity ID

Function:    CBaseAnimating::SequenceDuration
Signature:   float CBaseAnimating::SequenceDuration(int)
Description: Get the specified sequence duration

Function:    CBaseAnimating::SequenceHasMovement
Signature:   bool CBaseAnimating::SequenceHasMovement(int)
Description: Checks if the specified sequence has movement

Function:    CBaseAnimating::SequenceLoops
Signature:   bool CBaseAnimating::SequenceLoops()
Description: Does the current sequence loop?

Function:    CBaseAnimating::SetBodygroup
Signature:   void CBaseAnimating::SetBodygroup(int, int)
Description: Sets a bodygroup

Function:    CBaseAnimating::SetCycle
Signature:   void CBaseAnimating::SetCycle(float)

Function:    CBaseAnimating::SetGlowBlip
Signature:   void CBaseAnimating::SetGlowBlip(bool)
Description: When true, this glow will show a 'blip' in the player compass.

Function:    CBaseAnimating::SetGlowColor
Signature:   void CBaseAnimating::SetGlowColor(int, int, int)
Description: Sets glow color, with RGB parameters.

Function:    CBaseAnimating::SetGlowDistance
Signature:   void CBaseAnimating::SetGlowDistance(float)
Description: Sets max. distance for a player to see the glow, in units. Use -1 for no limit.

Function:    CBaseAnimating::SetGlowable
Signature:   void CBaseAnimating::SetGlowable(bool)
Description: Sets the 'glowable' state. If you want to use glow properties and functions, you'll have to enable this first.

Function:    CBaseAnimating::SetModelScale
Signature:   void CBaseAnimating::SetModelScale(float, float)
Description: Changes model scale. Params: <scale> <change duration in seconds>

Function:    CBaseAnimating::SetPlaybackRate
Signature:   void CBaseAnimating::SetPlaybackRate(float)

Function:    CBaseAnimating::SetPoseParameter
Signature:   void CBaseAnimating::SetPoseParameter(string, float)
Description: Set the specified pose parameter to the specified value

Function:    CBaseAnimating::SetSequence
Signature:   void CBaseAnimating::SetSequence(int)
Description: Sets the current sequence

Function:    CBaseAnimating::SetSkin
Signature:   void CBaseAnimating::SetSkin(int)
Description: Sets the model's skin

Function:    CBaseAnimating::StudioFrameAdvance
Signature:   void CBaseAnimating::StudioFrameAdvance()

Function:    CBaseCombatCharacter::BodyAngles
Signature:   Vector CBaseCombatCharacter::BodyAngles()
Description: Get the body's angles.

Function:    CBaseCombatCharacter::BodyDirection2D
Signature:   Vector CBaseCombatCharacter::BodyDirection2D()
Description: Get the body's 2D direction.

Function:    CBaseCombatCharacter::BodyDirection3D
Signature:   Vector CBaseCombatCharacter::BodyDirection3D()
Description: Get the body's 3D direction.

Function:    CBaseCombatCharacter::DoMuzzleFlash
Signature:   void CBaseCombatCharacter::DoMuzzleFlash()
Description: Does a muzzle flash.

Function:    CBaseCombatCharacter::DropAllWeapons
Signature:   void CBaseCombatCharacter::DropAllWeapons(bool)
Description: Make the character drop all of its weapons.

Function:    CBaseCombatCharacter::DropWeapon
Signature:   void CBaseCombatCharacter::DropWeapon(handle)
Description: Make the character drop the specified weapon entity if they own it.

Function:    CBaseCombatCharacter::EntInAimCone
Signature:   bool CBaseCombatCharacter::EntInAimCone(handle)
Description: Check if the specified entity is in the character's aim cone.

Function:    CBaseCombatCharacter::EntInViewCone
Signature:   bool CBaseCombatCharacter::EntInViewCone(handle)
Description: Check if the specified entity is in the character's viewcone.

Function:    CBaseCombatCharacter::EquipWeapon
Signature:   void CBaseCombatCharacter::EquipWeapon(handle)
Description: Make the character equip the specified weapon entity. If they don't already own the weapon, they will acquire it instantly.

Function:    CBaseCombatCharacter::EyeDirection2D
Signature:   Vector CBaseCombatCharacter::EyeDirection2D()
Description: Get the eyes' 2D direction.

Function:    CBaseCombatCharacter::EyeDirection3D
Signature:   Vector CBaseCombatCharacter::EyeDirection3D()
Description: Get the eyes' 3D direction.

Function:    CBaseCombatCharacter::FindWeapon
Signature:   handle CBaseCombatCharacter::FindWeapon(string, int)
Description: Find a specific weapon in the character's inventory by its classname.

Function:    CBaseCombatCharacter::GetActiveWeapon
Signature:   handle CBaseCombatCharacter::GetActiveWeapon()
Description: Get the character's active weapon entity.

Function:    CBaseCombatCharacter::GetAllWeapons
Signature:   void CBaseCombatCharacter::GetAllWeapons(handle)
Description: Get the character's weapon inventory.

Function:    CBaseCombatCharacter::GetAmmoCount
Signature:   int CBaseCombatCharacter::GetAmmoCount(int)
Description: Get the ammo count of the specified ammo type.

Function:    CBaseCombatCharacter::GetAttackSpread
Signature:   Vector CBaseCombatCharacter::GetAttackSpread(handle, handle)
Description: Get the attack spread.

Function:    CBaseCombatCharacter::GetCurrentWeaponProficiency
Signature:   int CBaseCombatCharacter::GetCurrentWeaponProficiency()
Description: Get the character's current proficiency (accuracy) with their current weapon.

Function:    CBaseCombatCharacter::GetRelationPriority
Signature:   int CBaseCombatCharacter::GetRelationPriority(handle)
Description: Get a character's relationship priority for a specific entity.

Function:    CBaseCombatCharacter::GetRelationship
Signature:   int CBaseCombatCharacter::GetRelationship(handle)
Description: Get a character's relationship to a specific entity.

Function:    CBaseCombatCharacter::GetSpreadBias
Signature:   float CBaseCombatCharacter::GetSpreadBias(handle, handle)
Description: Get the spread bias.

Function:    CBaseCombatCharacter::GetVehicleEntity
Signature:   handle CBaseCombatCharacter::GetVehicleEntity()
Description: Get the entity for a character's current vehicle if they're in one.

Function:    CBaseCombatCharacter::GetWeapon
Signature:   handle CBaseCombatCharacter::GetWeapon(int)
Description: Get a specific weapon in the character's inventory.

Function:    CBaseCombatCharacter::HeadDirection2D
Signature:   Vector CBaseCombatCharacter::HeadDirection2D()
Description: Get the head's 2D direction.

Function:    CBaseCombatCharacter::HeadDirection3D
Signature:   Vector CBaseCombatCharacter::HeadDirection3D()
Description: Get the head's 3D direction.

Function:    CBaseCombatCharacter::InAimCone
Signature:   bool CBaseCombatCharacter::InAimCone(Vector)
Description: Check if the specified position is in the character's aim cone.

Function:    CBaseCombatCharacter::InViewCone
Signature:   bool CBaseCombatCharacter::InViewCone(Vector)
Description: Check if the specified position is in the character's viewcone.

Function:    CBaseCombatCharacter::SetAmmoCount
Signature:   void CBaseCombatCharacter::SetAmmoCount(int, int)
Description: Set the ammo count of the specified ammo type.

Function:    CBaseCombatCharacter::SetRelationship
Signature:   void CBaseCombatCharacter::SetRelationship(handle, int, int)
Description: Set a character's relationship with a specific entity.

Function:    CBaseCombatCharacter::ShootPosition
Signature:   Vector CBaseCombatCharacter::ShootPosition()
Description: Get the character's shoot position.

Function:    CBaseCombatCharacter::WeaponCount
Signature:   int CBaseCombatCharacter::WeaponCount()
Description: Get the number of weapons a character possesses.

Function:    CBaseCombatWeapon::AddViewKick
Signature:   void CBaseCombatWeapon::AddViewKick()
Description: Applies the weapon's view kick.

Function:    CBaseCombatWeapon::AltFiresUnderwater
Signature:   bool CBaseCombatWeapon::AltFiresUnderwater()
Description: Returns true if this weapon can alt-fire underwater.

Function:    CBaseCombatWeapon::CanBePickedUpByNPCs
Signature:   bool CBaseCombatWeapon::CanBePickedUpByNPCs()
Description: Check if the weapon can be picked up by NPCs.

Function:    CBaseCombatWeapon::CapabilitiesGet
Signature:   int CBaseCombatWeapon::CapabilitiesGet()
Description: Get the capabilities the weapon currently possesses.

Function:    CBaseCombatWeapon::Clip1
Signature:   int CBaseCombatWeapon::Clip1()
Description: Get the weapon's current primary ammo.

Function:    CBaseCombatWeapon::Clip2
Signature:   int CBaseCombatWeapon::Clip2()
Description: Get the weapon's current secondary ammo.

Function:    CBaseCombatWeapon::FireDuration
Signature:   float CBaseCombatWeapon::FireDuration()
Description: Returns the amount of time that the weapon has sustained firing.

Function:    CBaseCombatWeapon::FiresUnderwater
Signature:   bool CBaseCombatWeapon::FiresUnderwater()
Description: Returns true if this weapon can fire underwater.

Function:    CBaseCombatWeapon::GetBulletSpread
Signature:   Vector CBaseCombatWeapon::GetBulletSpread()
Description: Returns the weapon's default bullet spread.

Function:    CBaseCombatWeapon::GetBulletSpreadForProficiency
Signature:   Vector CBaseCombatWeapon::GetBulletSpreadForProficiency(int)
Description: Returns the weapon's bullet spread for the specified proficiency level.

Function:    CBaseCombatWeapon::GetDefaultAnimSpeed
Signature:   float CBaseCombatWeapon::GetDefaultAnimSpeed()
Description: Returns the weapon's default animation speed.

Function:    CBaseCombatWeapon::GetDefaultClip1
Signature:   int CBaseCombatWeapon::GetDefaultClip1()
Description: Get the weapon's default primary ammo.

Function:    CBaseCombatWeapon::GetDefaultClip2
Signature:   int CBaseCombatWeapon::GetDefaultClip2()
Description: Get the weapon's default secondary ammo.

Function:    CBaseCombatWeapon::GetDrawActivity
Signature:   int CBaseCombatWeapon::GetDrawActivity()
Description: Returns the weapon's draw activity.

Function:    CBaseCombatWeapon::GetFireRate
Signature:   float CBaseCombatWeapon::GetFireRate()
Description: Get the weapon's firing rate.

Function:    CBaseCombatWeapon::GetMaxClip1
Signature:   int CBaseCombatWeapon::GetMaxClip1()
Description: Get the weapon's maximum primary ammo.

Function:    CBaseCombatWeapon::GetMaxClip2
Signature:   int CBaseCombatWeapon::GetMaxClip2()
Description: Get the weapon's maximum secondary ammo.

Function:    CBaseCombatWeapon::GetOwner
Signature:   handle CBaseCombatWeapon::GetOwner()
Description: Get the weapon's owner.

Function:    CBaseCombatWeapon::GetPrimaryAmmoType
Signature:   int CBaseCombatWeapon::GetPrimaryAmmoType()
Description: Get the weapon's primary ammo type.

Function:    CBaseCombatWeapon::GetPrimaryAttackActivity
Signature:   int CBaseCombatWeapon::GetPrimaryAttackActivity()
Description: Returns the weapon's primary attack activity.

Function:    CBaseCombatWeapon::GetPrintName
Signature:   string CBaseCombatWeapon::GetPrintName()

Function:    CBaseCombatWeapon::GetSecondaryAmmoType
Signature:   int CBaseCombatWeapon::GetSecondaryAmmoType()
Description: Get the weapon's secondary ammo type.

Function:    CBaseCombatWeapon::GetSecondaryAttackActivity
Signature:   int CBaseCombatWeapon::GetSecondaryAttackActivity()
Description: Returns the weapon's secondary attack activity.

Function:    CBaseCombatWeapon::GetSubType
Signature:   int CBaseCombatWeapon::GetSubType()
Description: Get the weapon's subtype.

Function:    CBaseCombatWeapon::GetViewModel
Signature:   string CBaseCombatWeapon::GetViewModel(int)
Description: Get the weapon's view model.

Function:    CBaseCombatWeapon::GetViewModelSequenceDuration
Signature:   float CBaseCombatWeapon::GetViewModelSequenceDuration()
Description: Gets the sequence duration of the current view model animation.

Function:    CBaseCombatWeapon::GetWeaponIdleTime
Signature:   float CBaseCombatWeapon::GetWeaponIdleTime()
Description: Returns the next time WeaponIdle() will run.

Function:    CBaseCombatWeapon::GetWeight
Signature:   int CBaseCombatWeapon::GetWeight()
Description: Get the weapon's weight.

Function:    CBaseCombatWeapon::GetWorldModel
Signature:   string CBaseCombatWeapon::GetWorldModel()
Description: Get the weapon's world model.

Function:    CBaseCombatWeapon::GiveDefaultAmmo
Signature:   void CBaseCombatWeapon::GiveDefaultAmmo()
Description: Fill the weapon back up to default ammo.

Function:    CBaseCombatWeapon::HasAnyAmmo
Signature:   bool CBaseCombatWeapon::HasAnyAmmo()
Description: Check if the weapon currently has ammo or doesn't need ammo.

Function:    CBaseCombatWeapon::HasPrimaryAmmo
Signature:   bool CBaseCombatWeapon::HasPrimaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need primary ammo.

Function:    CBaseCombatWeapon::HasSecondaryAmmo
Signature:   bool CBaseCombatWeapon::HasSecondaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need secondary ammo.

Function:    CBaseCombatWeapon::HasWeaponIdleTimeElapsed
Signature:   bool CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
Description: Returns true if the idle time has elapsed.

Function:    CBaseCombatWeapon::IsViewModelSequenceFinished
Signature:   bool CBaseCombatWeapon::IsViewModelSequenceFinished()
Description: Returns true if the current view model animation is finished.

Function:    CBaseCombatWeapon::MinRange1
Signature:   float CBaseCombatWeapon::MinRange1()
Description: Returns the closest this weapon can be used.

Function:    CBaseCombatWeapon::MinRange2
Signature:   float CBaseCombatWeapon::MinRange2()
Description: Returns the closest this weapon can be used.

Function:    CBaseCombatWeapon::NextPrimaryAttack
Signature:   float CBaseCombatWeapon::NextPrimaryAttack()
Description: Returns the next time PrimaryAttack() will run when the player is pressing +ATTACK.

Function:    CBaseCombatWeapon::NextSecondaryAttack
Signature:   float CBaseCombatWeapon::NextSecondaryAttack()
Description: Returns the next time SecondaryAttack() will run when the player is pressing +ATTACK2.

Function:    CBaseCombatWeapon::ReloadsSingly
Signature:   bool CBaseCombatWeapon::ReloadsSingly()
Description: Returns true if this weapon reloads 1 round at a time.

Function:    CBaseCombatWeapon::SendWeaponAnim
Signature:   bool CBaseCombatWeapon::SendWeaponAnim(int)
Description: Sends a weapon animation.

Function:    CBaseCombatWeapon::SetAltFiresUnderwater
Signature:   void CBaseCombatWeapon::SetAltFiresUnderwater(bool)
Description: Sets whether this weapon can alt-fire underwater.

Function:    CBaseCombatWeapon::SetClip1
Signature:   void CBaseCombatWeapon::SetClip1(int)
Description: Set the weapon's current primary ammo.

Function:    CBaseCombatWeapon::SetClip2
Signature:   void CBaseCombatWeapon::SetClip2(int)
Description: Set the weapon's current secondary ammo.

Function:    CBaseCombatWeapon::SetFireDuration
Signature:   void CBaseCombatWeapon::SetFireDuration(float)
Description: Sets the amount of time that the weapon has sustained firing.

Function:    CBaseCombatWeapon::SetFiresUnderwater
Signature:   void CBaseCombatWeapon::SetFiresUnderwater(bool)
Description: Sets whether this weapon can fire underwater.

Function:    CBaseCombatWeapon::SetMinRange1
Signature:   void CBaseCombatWeapon::SetMinRange1(float)
Description: Sets the closest this weapon can be used.

Function:    CBaseCombatWeapon::SetMinRange2
Signature:   void CBaseCombatWeapon::SetMinRange2(float)
Description: Sets the closest this weapon can be used.

Function:    CBaseCombatWeapon::SetNextPrimaryAttack
Signature:   void CBaseCombatWeapon::SetNextPrimaryAttack(float)
Description: Sets the next time PrimaryAttack() will run when the player is pressing +ATTACK.

Function:    CBaseCombatWeapon::SetNextSecondaryAttack
Signature:   void CBaseCombatWeapon::SetNextSecondaryAttack(float)
Description: Sets the next time SecondaryAttack() will run when the player is pressing +ATTACK2.

Function:    CBaseCombatWeapon::SetOwner
Signature:   void CBaseCombatWeapon::SetOwner(handle)
Description: Set the weapon's owner.

Function:    CBaseCombatWeapon::SetReloadsSingly
Signature:   void CBaseCombatWeapon::SetReloadsSingly(bool)
Description: Sets whether this weapon reloads 1 round at a time.

Function:    CBaseCombatWeapon::SetSubType
Signature:   void CBaseCombatWeapon::SetSubType(int)
Description: Set the weapon's subtype.

Function:    CBaseCombatWeapon::SetWeaponIdleTime
Signature:   void CBaseCombatWeapon::SetWeaponIdleTime(float)
Description: Sets the next time WeaponIdle() will run.

Function:    CBaseCombatWeapon::UsesClipsForAmmo1
Signature:   bool CBaseCombatWeapon::UsesClipsForAmmo1()
Description: Check if the weapon uses clips for primary ammo.

Function:    CBaseCombatWeapon::UsesClipsForAmmo2
Signature:   bool CBaseCombatWeapon::UsesClipsForAmmo2()
Description: Check if the weapon uses clips for secondary ammo.

Function:    CBaseCombatWeapon::UsesPrimaryAmmo
Signature:   bool CBaseCombatWeapon::UsesPrimaryAmmo()
Description: Check if the weapon uses primary ammo.

Function:    CBaseCombatWeapon::UsesSecondaryAmmo
Signature:   bool CBaseCombatWeapon::UsesSecondaryAmmo()
Description: Check if the weapon uses secondary ammo.

Function:    CBaseCombatWeapon::WeaponSound
Signature:   void CBaseCombatWeapon::WeaponSound(int, float)
Description: Plays one of the weapon's sounds.

Function:    CBaseEntity::AcceptInput
Signature:   bool CBaseEntity::AcceptInput(string, string, handle, handle)

Function:    CBaseEntity::Activate
Signature:   void CBaseEntity::Activate()

Function:    CBaseEntity::AddEFlags
Signature:   void CBaseEntity::AddEFlags(int)
Description: Add Eflags

Function:    CBaseEntity::AddEffects
Signature:   void CBaseEntity::AddEffects(int)
Description: Add effect(s)

Function:    CBaseEntity::AddFlag
Signature:   void CBaseEntity::AddFlag(int)
Description: Add flag

Function:    CBaseEntity::AddOutput
Signature:   bool CBaseEntity::AddOutput(string, string, string, string, float, int)
Description: Add an output

Function:    CBaseEntity::AddSolidFlags
Signature:   void CBaseEntity::AddSolidFlags(int)
Description: Add solid flags

Function:    CBaseEntity::AddSpawnFlags
Signature:   void CBaseEntity::AddSpawnFlags(int)
Description: Add spawnflag(s)

Function:    CBaseEntity::ApplyAbsVelocityImpulse
Signature:   void CBaseEntity::ApplyAbsVelocityImpulse(Vector)

Function:    CBaseEntity::ApplyLocalAngularVelocityImpulse
Signature:   void CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector)

Function:    CBaseEntity::BodyTarget
Signature:   Vector CBaseEntity::BodyTarget(Vector, bool)

Function:    CBaseEntity::Classify
Signature:   int CBaseEntity::Classify()
Description: Get Class_T class ID (corresponds to the CLASS_ set of constants)

Function:    CBaseEntity::ClearEffects
Signature:   void CBaseEntity::ClearEffects()
Description: Clear effect(s)

Function:    CBaseEntity::ClearSpawnFlags
Signature:   void CBaseEntity::ClearSpawnFlags()
Description: Clear spawnflag(s)

Function:    CBaseEntity::ConnectOutput
Signature:   void CBaseEntity::ConnectOutput(string, string)
Description: Adds an I/O connection that will call the named function when the specified output fires

Function:    CBaseEntity::Destroy
Signature:   void CBaseEntity::Destroy()

Function:    CBaseEntity::DisconnectOutput
Signature:   void CBaseEntity::DisconnectOutput(string, string)
Description: Removes a connected script function from an I/O event.

Function:    CBaseEntity::EmitSound
Signature:   void CBaseEntity::EmitSound(string)
Description: Plays a sound from this entity.

Function:    CBaseEntity::EntityToWorldTransform
Signature:   handle CBaseEntity::EntityToWorldTransform()
Description: Get the entity's transform

Function:    CBaseEntity::EyeAngles
Signature:   Vector CBaseEntity::EyeAngles()
Description: Get eye pitch, yaw, roll as a vector

Function:    CBaseEntity::EyePosition
Signature:   Vector CBaseEntity::EyePosition()
Description: Get vector to eye position - absolute coords

Function:    CBaseEntity::FireBullets
Signature:   void CBaseEntity::FireBullets(handle)
Description: Fire bullets from entity with a given info handle

Function:    CBaseEntity::FireOutput
Signature:   void CBaseEntity::FireOutput(string, handle, handle, string, float)
Description: Fire an entity output

Function:    CBaseEntity::FirstMoveChild
Signature:   handle CBaseEntity::FirstMoveChild()

Function:    CBaseEntity::FollowEntity
Signature:   void CBaseEntity::FollowEntity(handle, bool)
Description: Begin following the specified entity. This makes this entity non-solid, parents it to the target entity, and teleports it to the specified entity's origin. The second parameter is whether or not to use bonemerging while following.

Function:    CBaseEntity::GetAngles
Signature:   Vector CBaseEntity::GetAngles()
Description: Get entity pitch, yaw, roll as a vector

Function:    CBaseEntity::GetAngularVelocity
Signature:   Vector CBaseEntity::GetAngularVelocity()
Description: Get the local angular velocity - returns a vector of pitch,yaw,roll

Function:    CBaseEntity::GetBoundingMaxs
Signature:   Vector CBaseEntity::GetBoundingMaxs()
Description: Get a vector containing max bounds, centered on object

Function:    CBaseEntity::GetBoundingMins
Signature:   Vector CBaseEntity::GetBoundingMins()
Description: Get a vector containing min bounds, centered on object

Function:    CBaseEntity::GetCenter
Signature:   Vector CBaseEntity::GetCenter()
Description: Get vector to center of object - absolute coords

Function:    CBaseEntity::GetClassname
Signature:   string CBaseEntity::GetClassname()

Function:    CBaseEntity::GetCollisionGroup
Signature:   int CBaseEntity::GetCollisionGroup()
Description: Get the collision group

Function:    CBaseEntity::GetContextCount
Signature:   int CBaseEntity::GetContextCount()
Description: Get the number of response contexts

Function:    CBaseEntity::GetDebugName
Signature:   string CBaseEntity::GetDebugName()
Description: If name exists returns name, otherwise returns classname

Function:    CBaseEntity::GetEFlags
Signature:   int CBaseEntity::GetEFlags()
Description: Get Eflags

Function:    CBaseEntity::GetEffects
Signature:   int CBaseEntity::GetEffects()
Description: Get effects

Function:    CBaseEntity::GetFlags
Signature:   int CBaseEntity::GetFlags()
Description: Get flags

Function:    CBaseEntity::GetFollowedEntity
Signature:   handle CBaseEntity::GetFollowedEntity()
Description: Get the entity we're following.

Function:    CBaseEntity::GetForwardVector
Signature:   Vector CBaseEntity::GetForwardVector()
Description: Get the forward vector of the entity

Function:    CBaseEntity::GetFriction
Signature:   float CBaseEntity::GetFriction()

Function:    CBaseEntity::GetGravity
Signature:   float CBaseEntity::GetGravity()

Function:    CBaseEntity::GetGroundEntity
Signature:   handle CBaseEntity::GetGroundEntity()
Description: Returns handle to ground entity.

Function:    CBaseEntity::GetHealth
Signature:   int CBaseEntity::GetHealth()

Function:    CBaseEntity::GetKeyValue
Signature:   string CBaseEntity::GetKeyValue(string)
Description: Get a keyvalue

Function:    CBaseEntity::GetLocalAngles
Signature:   Vector CBaseEntity::GetLocalAngles()
Description: GetLocalAngles

Function:    CBaseEntity::GetLocalOrigin
Signature:   Vector CBaseEntity::GetLocalOrigin()
Description: GetLocalOrigin

Function:    CBaseEntity::GetMass
Signature:   float CBaseEntity::GetMass()

Function:    CBaseEntity::GetMaxHealth
Signature:   int CBaseEntity::GetMaxHealth()

Function:    CBaseEntity::GetMaxOutputDelay
Signature:   float CBaseEntity::GetMaxOutputDelay(string)
Description: Get the longest delay for all events attached to an output

Function:    CBaseEntity::GetModelKeyValues
Signature:   handle CBaseEntity::GetModelKeyValues()
Description: Get a KeyValue class instance on this entity's model

Function:    CBaseEntity::GetModelName
Signature:   string CBaseEntity::GetModelName()
Description: Returns the name of the model

Function:    CBaseEntity::GetMoveParent
Signature:   handle CBaseEntity::GetMoveParent()
Description: If in hierarchy, retrieves the entity's parent

Function:    CBaseEntity::GetMoveType
Signature:   int CBaseEntity::GetMoveType()
Description: Get the move type

Function:    CBaseEntity::GetName
Signature:   string CBaseEntity::GetName()

Function:    CBaseEntity::GetOrCreatePrivateScriptScope
Signature:   handle CBaseEntity::GetOrCreatePrivateScriptScope()
Description: Create and retrieve the script-side data associated with an entity

Function:    CBaseEntity::GetOrigin
Signature:   Vector CBaseEntity::GetOrigin()

Function:    CBaseEntity::GetOwner
Signature:   handle CBaseEntity::GetOwner()
Description: Gets this entity's owner

Function:    CBaseEntity::GetPhysicsObject
Signature:   handle CBaseEntity::GetPhysicsObject()
Description: Get the entity's physics object if it has one

Function:    CBaseEntity::GetPreTemplateName
Signature:   string CBaseEntity::GetPreTemplateName()
Description: Get the entity name stripped of template unique decoration

Function:    CBaseEntity::GetRenderAlpha
Signature:   int CBaseEntity::GetRenderAlpha()
Description: Get the render color's alpha value

Function:    CBaseEntity::GetRenderColorB
Signature:   int CBaseEntity::GetRenderColorB()
Description: Get the render color's B value

Function:    CBaseEntity::GetRenderColorG
Signature:   int CBaseEntity::GetRenderColorG()
Description: Get the render color's G value

Function:    CBaseEntity::GetRenderColorR
Signature:   int CBaseEntity::GetRenderColorR()
Description: Get the render color's R value

Function:    CBaseEntity::GetRenderColorVector
Signature:   Vector CBaseEntity::GetRenderColorVector()
Description: Get the render color as a vector

Function:    CBaseEntity::GetRenderMode
Signature:   int CBaseEntity::GetRenderMode()
Description: Get render mode

Function:    CBaseEntity::GetRightVector
Signature:   Vector CBaseEntity::GetRightVector()
Description: Get the right vector of the entity

Function:    CBaseEntity::GetRootMoveParent
Signature:   handle CBaseEntity::GetRootMoveParent()
Description: If in hierarchy, walks up the hierarchy to find the root parent

Function:    CBaseEntity::GetScriptId
Signature:   string CBaseEntity::GetScriptId()
Description: Retrieve the unique identifier used to refer to the entity within the scripting system

Function:    CBaseEntity::GetScriptScope
Signature:   handle CBaseEntity::GetScriptScope()
Description: Retrieve the script-side data associated with an entity

Function:    CBaseEntity::GetSolid
Signature:   int CBaseEntity::GetSolid()

Function:    CBaseEntity::GetSolidFlags
Signature:   int CBaseEntity::GetSolidFlags()
Description: Get solid flags

Function:    CBaseEntity::GetSoundDuration
Signature:   float CBaseEntity::GetSoundDuration(string, string)
Description: Returns float duration of the sound. Takes soundname and optional actormodelname.

Function:    CBaseEntity::GetSpawnFlags
Signature:   int CBaseEntity::GetSpawnFlags()
Description: Get spawnflags

Function:    CBaseEntity::GetTakeDamage
Signature:   int CBaseEntity::GetTakeDamage()
Description: Gets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)

Function:    CBaseEntity::GetTeam
Signature:   int CBaseEntity::GetTeam()

Function:    CBaseEntity::GetTransmitState
Signature:   int CBaseEntity::GetTransmitState()

Function:    CBaseEntity::GetUpVector
Signature:   Vector CBaseEntity::GetUpVector()
Description: Get the up vector of the entity

Function:    CBaseEntity::GetVelocity
Signature:   Vector CBaseEntity::GetVelocity()

Function:    CBaseEntity::GetWaterLevel
Signature:   int CBaseEntity::GetWaterLevel()
Description: Get current level of water submergence

Function:    CBaseEntity::HasSpawnFlags
Signature:   bool CBaseEntity::HasSpawnFlags(int)
Description: Check if the entity has specific spawnflag(s) ticked

Function:    CBaseEntity::HeadTarget
Signature:   Vector CBaseEntity::HeadTarget(Vector)

Function:    CBaseEntity::IsAlive
Signature:   bool CBaseEntity::IsAlive()
Description: Return true if this entity is alive

Function:    CBaseEntity::IsCombatCharacter
Signature:   bool CBaseEntity::IsCombatCharacter()
Description: Returns true if this entity is a combat character (player or NPC).

Function:    CBaseEntity::IsEffectActive
Signature:   bool CBaseEntity::IsEffectActive(int)
Description: Check if an effect is active

Function:    CBaseEntity::IsEntVisible
Signature:   bool CBaseEntity::IsEntVisible(handle)
Description: Check if the specified entity can be visible to this entity.

Function:    CBaseEntity::IsFollowingEntity
Signature:   bool CBaseEntity::IsFollowingEntity()
Description: Returns true if this entity is following another entity.

Function:    CBaseEntity::IsNPC
Signature:   bool CBaseEntity::IsNPC()
Description: Returns true if this entity is a NPC.

Function:    CBaseEntity::IsPlayer
Signature:   bool CBaseEntity::IsPlayer()
Description: Returns true if this entity is a player.

Function:    CBaseEntity::IsVisible
Signature:   bool CBaseEntity::IsVisible(Vector)
Description: Check if the specified position can be visible to this entity.

Function:    CBaseEntity::IsVisibleWithMask
Signature:   bool CBaseEntity::IsVisibleWithMask(Vector, int)
Description: Check if the specified position can be visible to this entity with a specific trace mask.

Function:    CBaseEntity::IsWeapon
Signature:   bool CBaseEntity::IsWeapon()
Description: Returns true if this entity is a weapon.

Function:    CBaseEntity::IsWorld
Signature:   bool CBaseEntity::IsWorld()
Description: Returns true if this entity is the world.

Function:    CBaseEntity::KeyValueFromFloat
Signature:   bool CBaseEntity::KeyValueFromFloat(string, float)
Description: Executes KeyValue with a float, same caveat from KeyValueFromString applies.

Function:    CBaseEntity::KeyValueFromInt
Signature:   bool CBaseEntity::KeyValueFromInt(string, int)
Description: Executes KeyValue with an int, same caveat from KeyValueFromString applies.

Function:    CBaseEntity::KeyValueFromString
Signature:   bool CBaseEntity::KeyValueFromString(string, string)
Description: Executes KeyValue with a string. Warning: Does not update the internal network state of the entity, which can result in any desired visual changes being delayed for clients if used after spawning. Netprops can be used instead which correctly updates the networking state and results in an immediate update.

Function:    CBaseEntity::KeyValueFromVector
Signature:   bool CBaseEntity::KeyValueFromVector(string, Vector)
Description: Executes KeyValue with a vector, same caveat from KeyValueFromString applies.

Function:    CBaseEntity::NextMovePeer
Signature:   handle CBaseEntity::NextMovePeer()

Function:    CBaseEntity::PhysicsDestroyObject
Signature:   void CBaseEntity::PhysicsDestroyObject()
Description: Destroys the entity's physics object

Function:    CBaseEntity::PhysicsInitNormal
Signature:   void CBaseEntity::PhysicsInitNormal(int, int, bool)
Description: Initializes the entity's physics object with the specified solid type, solid flags, and whether to start asleep

Function:    CBaseEntity::PrecacheSoundScript
Signature:   void CBaseEntity::PrecacheSoundScript(string)
Description: Precache a sound for later playing.

Function:    CBaseEntity::RemoveEFlags
Signature:   void CBaseEntity::RemoveEFlags(int)
Description: Remove Eflags

Function:    CBaseEntity::RemoveEffects
Signature:   void CBaseEntity::RemoveEffects(int)
Description: Remove effect(s)

Function:    CBaseEntity::RemoveFlag
Signature:   void CBaseEntity::RemoveFlag(int)
Description: Remove flag

Function:    CBaseEntity::RemoveSolidFlags
Signature:   void CBaseEntity::RemoveSolidFlags(int)
Description: Remove solid flags

Function:    CBaseEntity::RemoveSpawnFlags
Signature:   void CBaseEntity::RemoveSpawnFlags(int)
Description: Remove spawnflag(s)

Function:    CBaseEntity::SetAbsAngles
Signature:   void CBaseEntity::SetAbsAngles(Vector)
Description: SetAbsAngles

Function:    CBaseEntity::SetAbsOrigin
Signature:   void CBaseEntity::SetAbsOrigin(Vector)
Description: SetAbsOrigin

Function:    CBaseEntity::SetAngles
Signature:   void CBaseEntity::SetAngles(Vector)
Description: Set entity pitch, yaw, roll

Function:    CBaseEntity::SetAngularVelocity
Signature:   void CBaseEntity::SetAngularVelocity(float, float, float)
Description: Set the local angular velocity - takes float pitch,yaw,roll velocities

Function:    CBaseEntity::SetCauser
Signature:   void CBaseEntity::SetCauser(handle)
Description: Set who gets credit for a kill from this entity.

Function:    CBaseEntity::SetClassname
Signature:   void CBaseEntity::SetClassname(string)
Description: Replaces entity's classname. Very dangerous, use with care.

Function:    CBaseEntity::SetCollisionGroup
Signature:   void CBaseEntity::SetCollisionGroup(int)
Description: Set the collision group

Function:    CBaseEntity::SetContextThink
Signature:   void CBaseEntity::SetContextThink(string, handle, float)
Description: Set a think function on this entity.

Function:    CBaseEntity::SetEffects
Signature:   void CBaseEntity::SetEffects(int)
Description: Set effect(s)

Function:    CBaseEntity::SetForwardVector
Signature:   void CBaseEntity::SetForwardVector(Vector)
Description: Set the orientation of the entity to have this forward vector

Function:    CBaseEntity::SetFriction
Signature:   void CBaseEntity::SetFriction(float)

Function:    CBaseEntity::SetGravity
Signature:   void CBaseEntity::SetGravity(float)

Function:    CBaseEntity::SetGroundEntity
Signature:   void CBaseEntity::SetGroundEntity(handle)
Description: Sets ground entity by handle, pass null to clear it.

Function:    CBaseEntity::SetHealth
Signature:   void CBaseEntity::SetHealth(int)

Function:    CBaseEntity::SetLocalAngles
Signature:   void CBaseEntity::SetLocalAngles(Vector)
Description: SetLocalAngles

Function:    CBaseEntity::SetLocalOrigin
Signature:   void CBaseEntity::SetLocalOrigin(Vector)
Description: SetLocalOrigin

Function:    CBaseEntity::SetMass
Signature:   void CBaseEntity::SetMass(float)

Function:    CBaseEntity::SetMaxHealth
Signature:   void CBaseEntity::SetMaxHealth(int)

Function:    CBaseEntity::SetModel
Signature:   void CBaseEntity::SetModel(string)

Function:    CBaseEntity::SetMoveType
Signature:   void CBaseEntity::SetMoveType(int)
Description: Set the move type

Function:    CBaseEntity::SetName
Signature:   void CBaseEntity::SetName(string)

Function:    CBaseEntity::SetOrigin
Signature:   void CBaseEntity::SetOrigin(Vector)

Function:    CBaseEntity::SetOriginAngles
Signature:   void CBaseEntity::SetOriginAngles(Vector, Vector)
Description: Set both the origin and the angles

Function:    CBaseEntity::SetOriginAnglesVelocity
Signature:   void CBaseEntity::SetOriginAnglesVelocity(Vector, Vector, Vector)
Description: Set the origin, the angles, and the velocity

Function:    CBaseEntity::SetOwner
Signature:   void CBaseEntity::SetOwner(handle)
Description: Sets this entity's owner

Function:    CBaseEntity::SetParent
Signature:   void CBaseEntity::SetParent(handle, string)

Function:    CBaseEntity::SetRenderAlpha
Signature:   void CBaseEntity::SetRenderAlpha(int)
Description: Set the render color's alpha value

Function:    CBaseEntity::SetRenderColor
Signature:   void CBaseEntity::SetRenderColor(int, int, int)
Description: Set the render color

Function:    CBaseEntity::SetRenderColorB
Signature:   void CBaseEntity::SetRenderColorB(int)
Description: Set the render color's B value

Function:    CBaseEntity::SetRenderColorG
Signature:   void CBaseEntity::SetRenderColorG(int)
Description: Set the render color's G value

Function:    CBaseEntity::SetRenderColorR
Signature:   void CBaseEntity::SetRenderColorR(int)
Description: Set the render color's R value

Function:    CBaseEntity::SetRenderColorVector
Signature:   void CBaseEntity::SetRenderColorVector(Vector)
Description: Set the render color as a vector

Function:    CBaseEntity::SetRenderMode
Signature:   void CBaseEntity::SetRenderMode(int)
Description: Set render mode

Function:    CBaseEntity::SetSize
Signature:   void CBaseEntity::SetSize(Vector, Vector)

Function:    CBaseEntity::SetSolid
Signature:   void CBaseEntity::SetSolid(int)

Function:    CBaseEntity::SetTakeDamage
Signature:   void CBaseEntity::SetTakeDamage(int)
Description: Sets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)

Function:    CBaseEntity::SetTeam
Signature:   void CBaseEntity::SetTeam(int)

Function:    CBaseEntity::SetThink
Signature:   void CBaseEntity::SetThink(handle, float)

Function:    CBaseEntity::SetThinkFunction
Signature:   void CBaseEntity::SetThinkFunction(string, float)

Function:    CBaseEntity::SetTransmitState
Signature:   int CBaseEntity::SetTransmitState(int)

Function:    CBaseEntity::SetVelocity
Signature:   void CBaseEntity::SetVelocity(Vector)

Function:    CBaseEntity::StopFollowingEntity
Signature:   void CBaseEntity::StopFollowingEntity()
Description: Stops following an entity if we're following one.

Function:    CBaseEntity::StopSound
Signature:   void CBaseEntity::StopSound(string)
Description: Stops a sound from this entity.

Function:    CBaseEntity::StopThink
Signature:   void CBaseEntity::StopThink()

Function:    CBaseEntity::StopThinkFunction
Signature:   void CBaseEntity::StopThinkFunction()

Function:    CBaseEntity::TakeDamage
Signature:   int CBaseEntity::TakeDamage(handle)
Description: Apply damage to this entity with a given info handle

Function:    CBaseEntity::TakeHealth
Signature:   int CBaseEntity::TakeHealth(float, int)
Description: Give this entity health

Function:    CBaseEntity::ValidateScriptScope
Signature:   bool CBaseEntity::ValidateScriptScope()
Description: Ensure that an entity's script scope has been created

Function:    CBaseEntity::entindex
Signature:   int CBaseEntity::entindex()

Function:    CBaseFilter::PassesDamageFilter
Signature:   bool CBaseFilter::PassesDamageFilter(handle, handle)
Description: Check if the given caller and damage info pass the damage filter, with the second parameter being a CTakeDamageInfo instance. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter.

Function:    CBaseFilter::PassesFilter
Signature:   bool CBaseFilter::PassesFilter(handle, handle)
Description: Check if the given caller and entity pass the filter. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter.

Function:    CBaseFlex::GetCurrentScene
Signature:   handle CBaseFlex::GetCurrentScene()
Description: Returns the instance of the oldest active scene entity (if any).

Function:    CBaseFlex::GetSceneByIndex
Signature:   handle CBaseFlex::GetSceneByIndex(int)
Description: Returns the instance of the scene entity at the specified index.

Function:    CBasePlayer::CanPickupObject
Signature:   bool CBasePlayer::CanPickupObject(handle, float, float)
Description: Can player pick up this entity? With float parameters for mass limit, and size limit.

Function:    CBasePlayer::DeathCount
Signature:   int CBasePlayer::DeathCount()
Description: Gets the number of deaths this player has had in a multiplayer game.

Function:    CBasePlayer::DisableButtons
Signature:   void CBasePlayer::DisableButtons(int)
Description: Disables the specified button mask.

Function:    CBasePlayer::EnableButtons
Signature:   void CBasePlayer::EnableButtons(int)
Description: Enables the specified button mask if it was disabled before.

Function:    CBasePlayer::FlashlightIsOn
Signature:   int CBasePlayer::FlashlightIsOn()
Description: Returns true if the flashlight is on.

Function:    CBasePlayer::FlashlightTurnOff
Signature:   void CBasePlayer::FlashlightTurnOff()
Description: Turns off the flashlight.

Function:    CBasePlayer::FlashlightTurnOn
Signature:   void CBasePlayer::FlashlightTurnOn()
Description: Turns on the flashlight.

Function:    CBasePlayer::ForceButtons
Signature:   void CBasePlayer::ForceButtons(int)
Description: Forces the specified button mask.

Function:    CBasePlayer::FragCount
Signature:   int CBasePlayer::FragCount()
Description: Gets the number of frags (kills) this player has in a multiplayer game.

Function:    CBasePlayer::GetArmor
Signature:   int CBasePlayer::GetArmor()
Description: Gets the player's armor.

Function:    CBasePlayer::GetAutoaimVector
Signature:   Vector CBasePlayer::GetAutoaimVector(float)
Description: Gets the player's autoaim shooting direction with the specified scale.

Function:    CBasePlayer::GetAutoaimVectorCustomMaxDist
Signature:   Vector CBasePlayer::GetAutoaimVectorCustomMaxDist(float, float)
Description: Gets the player's autoaim shooting direction with the specified scale and a custom max distance.

Function:    CBasePlayer::GetButtonDisabled
Signature:   int CBasePlayer::GetButtonDisabled()
Description: Gets the player's currently unusable buttons.

Function:    CBasePlayer::GetButtonForced
Signature:   int CBasePlayer::GetButtonForced()
Description: Gets the player's currently forced buttons.

Function:    CBasePlayer::GetButtonLast
Signature:   int CBasePlayer::GetButtonLast()
Description: Gets the player's previously active buttons.

Function:    CBasePlayer::GetButtonPressed
Signature:   int CBasePlayer::GetButtonPressed()
Description: Gets the player's currently pressed buttons.

Function:    CBasePlayer::GetButtonReleased
Signature:   int CBasePlayer::GetButtonReleased()
Description: Gets the player's just-released buttons.

Function:    CBasePlayer::GetButtons
Signature:   int CBasePlayer::GetButtons()
Description: Gets the player's active buttons.

Function:    CBasePlayer::GetExpresser
Signature:   handle CBasePlayer::GetExpresser()
Description: Gets a handle for this player's expresser.

Function:    CBasePlayer::GetEyeForward
Signature:   Vector CBasePlayer::GetEyeForward()
Description: Gets the player's forward eye vector.

Function:    CBasePlayer::GetEyeRight
Signature:   Vector CBasePlayer::GetEyeRight()
Description: Gets the player's right eye vector.

Function:    CBasePlayer::GetEyeUp
Signature:   Vector CBasePlayer::GetEyeUp()
Description: Gets the player's up eye vector.

Function:    CBasePlayer::GetFOV
Signature:   int CBasePlayer::GetFOV()

Function:    CBasePlayer::GetFOVOwner
Signature:   handle CBasePlayer::GetFOVOwner()
Description: Gets current view owner.

Function:    CBasePlayer::GetNetworkIDString
Signature:   string CBasePlayer::GetNetworkIDString()
Description: Gets the player's network (i.e. Steam) ID.

Function:    CBasePlayer::GetPlayerName
Signature:   string CBasePlayer::GetPlayerName()
Description: Gets the player's name.

Function:    CBasePlayer::GetUserID
Signature:   int CBasePlayer::GetUserID()
Description: Gets the player's user ID.

Function:    CBasePlayer::IsConnected
Signature:   bool CBasePlayer::IsConnected()
Description: Returns true if this player is connected.

Function:    CBasePlayer::IsDisconnecting
Signature:   bool CBasePlayer::IsDisconnecting()
Description: Returns true if this player is disconnecting.

Function:    CBasePlayer::IsNoclipping
Signature:   bool CBasePlayer::IsNoclipping()
Description: Returns true if the player is in noclip mode.

Function:    CBasePlayer::IsSuitEquipped
Signature:   bool CBasePlayer::IsSuitEquipped()
Description: Returns true if this player had the HEV suit equipped.

Function:    CBasePlayer::SetArmor
Signature:   void CBasePlayer::SetArmor(int)
Description: Sets the player's armor.

Function:    CBasePlayer::SetFOV
Signature:   void CBasePlayer::SetFOV(int, float)
Description: Sets player FOV regardless of view owner.

Function:    CBasePlayer::SetMuzzleFlashTime
Signature:   void CBasePlayer::SetMuzzleFlashTime(float)
Description: Sets the player's muzzle flash time for AI.

Function:    CBasePlayer::SetSuitUpdate
Signature:   void CBasePlayer::SetSuitUpdate(string, int, int)
Description: Sets an update for the player's HEV suit.

Function:    CBasePlayer::ShouldAutoaim
Signature:   bool CBasePlayer::ShouldAutoaim()
Description: Returns true if the player should be autoaiming.

Function:    CBasePlayer::UnforceButtons
Signature:   void CBasePlayer::UnforceButtons(int)
Description: Unforces the specified button mask if it was forced before.

Function:    CBasePlayer::ViewPunch
Signature:   void CBasePlayer::ViewPunch(Vector)
Description: Punches the player's view with the specified vector.

Function:    CConvars::GetBool
Signature:   bool CConvars::GetBool(string)
Description: Returns the convar as a bool. May return null if no such convar.

Function:    CConvars::GetClientConvarValue
Signature:   CConvars::GetClientConvarValue(string, int)
Description: Returns the convar value for the entindex as a string. Only works with client convars with the FCVAR_USERINFO flag.

Function:    CConvars::GetCommandClient
Signature:   handle CConvars::GetCommandClient()
Description: returns the player who issued this console command.

Function:    CConvars::GetDefaultValue
Signature:   string CConvars::GetDefaultValue(string)
Description: Returns the convar's default value as a string. May return null if no such convar.

Function:    CConvars::GetFloat
Signature:   float CConvars::GetFloat(string)
Description: Returns the convar as a float. May return null if no such convar.

Function:    CConvars::GetInt
Signature:   int CConvars::GetInt(string)
Description: Returns the convar as an int. May return null if no such convar.

Function:    CConvars::GetStr
Signature:   string CConvars::GetStr(string)
Description: Returns the convar as a string. May return null if no such convar.

Function:    CConvars::IsFlagSet
Signature:   bool CConvars::IsFlagSet(string, int)
Description: Returns the convar's flags. May return null if no such convar.

Function:    CConvars::RegisterAdminCommand
Signature:   void CConvars::RegisterAdminCommand(string, handle, string, int)
Description: Registers an admin command, only server admins are able to execute it. Otherwise identical to RegisterCommand. Usage: RegisterAdminCommand(<name>, <callback function>, <description>, <flags>)

Function:    CConvars::RegisterCommand
Signature:   void CConvars::RegisterCommand(string, handle, string, int)
Description: Registers a console command. For callback, args will be mirrored as function params (e.g. Callback(name, arg1, arg2, ...)) Usage: RegisterCommand(<name>, <callback function>, <description>, <flags>)

Function:    CConvars::RegisterConvar
Signature:   void CConvars::RegisterConvar(string, string, string, int)
Description: Registers a new console variable. Usage: RegisterConvar(<name>, <default value>, <description>, <flags>)

Function:    CConvars::SetBool
Signature:   void CConvars::SetBool(string, bool)
Description: Sets the value of the convar as a bool.

Function:    CConvars::SetChangeCallback
Signature:   void CConvars::SetChangeCallback(string, handle)
Description: callback is called with 5 parameters (var, szOldValue, flOldValue, szNewValue, flNewValue)

Function:    CConvars::SetCompletionCallback
Signature:   void CConvars::SetCompletionCallback(string, handle)
Description: callback is called with 3 parameters (cmd, partial, commands), user strings must be appended to 'commands' array

Function:    CConvars::SetFloat
Signature:   void CConvars::SetFloat(string, float)
Description: Sets the value of the convar as a float.

Function:    CConvars::SetInt
Signature:   void CConvars::SetInt(string, int)
Description: Sets the value of the convar as an int.

Function:    CConvars::SetStr
Signature:   void CConvars::SetStr(string, string)
Description: Sets the value of the convar as a string.

Function:    CConvars::UnregisterCommand
Signature:   void CConvars::UnregisterCommand(string)
Description: unregister a console command.

Function:    CDebugOverlayScriptHelper::Axis
Signature:   void CDebugOverlayScriptHelper::Axis(Vector, Vector, float, bool, float)
Description: Draws an axis. Specify origin + orientation in world space.

Function:    CDebugOverlayScriptHelper::Box
Signature:   void CDebugOverlayScriptHelper::Box(Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a world-space axis-aligned box. Specify bounds in world space.

Function:    CDebugOverlayScriptHelper::BoxAngles
Signature:   void CDebugOverlayScriptHelper::BoxAngles(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws an oriented box at the origin. Specify bounds in local space.

Function:    CDebugOverlayScriptHelper::BoxDirection
Signature:   void CDebugOverlayScriptHelper::BoxDirection(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draw box oriented to a Vector direction

Function:    CDebugOverlayScriptHelper::Circle
Signature:   void CDebugOverlayScriptHelper::Circle(Vector, Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle. Specify center in world space.

Function:    CDebugOverlayScriptHelper::CircleOriented
Signature:   void CDebugOverlayScriptHelper::CircleOriented(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle oriented. Specify center in world space.

Function:    CDebugOverlayScriptHelper::ClearAllOverlays
Signature:   void CDebugOverlayScriptHelper::ClearAllOverlays()
Description: Clear all debug overlays at once

Function:    CDebugOverlayScriptHelper::Cross3D
Signature:   void CDebugOverlayScriptHelper::Cross3D(Vector, float, int, int, int, bool, float)
Description: Draws a world-aligned cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Cross3DOriented
Signature:   void CDebugOverlayScriptHelper::Cross3DOriented(Vector, Vector, float, int, int, int, bool, float)
Description: Draws an oriented cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::DrawTickMarkedLine
Signature:   void CDebugOverlayScriptHelper::DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a dashed line. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::EntityBounds
Signature:   void CDebugOverlayScriptHelper::EntityBounds(handle, int, int, int, int, float)
Description: Draws bounds of an entity

Function:    CDebugOverlayScriptHelper::EntityText
Signature:   void CDebugOverlayScriptHelper::EntityText(int, int, string, float, int, int, int, int)
Description: Draws text on an entity

Function:    CDebugOverlayScriptHelper::EntityTextAtPosition
Signature:   void CDebugOverlayScriptHelper::EntityTextAtPosition(Vector, int, string, float, int, int, int, int)
Description: Draw entity text overlay at a specific position

Function:    CDebugOverlayScriptHelper::Grid
Signature:   void CDebugOverlayScriptHelper::Grid(Vector)
Description: Add grid overlay

Function:    CDebugOverlayScriptHelper::HorzArrow
Signature:   void CDebugOverlayScriptHelper::HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a horizontal arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::Line
Signature:   void CDebugOverlayScriptHelper::Line(Vector, Vector, int, int, int, bool, float)
Description: Draws a line between two points

Function:    CDebugOverlayScriptHelper::ScreenText
Signature:   void CDebugOverlayScriptHelper::ScreenText(float, float, string, int, int, int, int, float)
Description: Draws 2D text. Specify coordinates in screen space.

Function:    CDebugOverlayScriptHelper::SetDebugBits
Signature:   void CDebugOverlayScriptHelper::SetDebugBits(handle, int)
Description: Set debug bits on entity

Function:    CDebugOverlayScriptHelper::Sphere
Signature:   void CDebugOverlayScriptHelper::Sphere(Vector, float, int, int, int, bool, float)
Description: Draws a wireframe sphere. Specify center in world space.

Function:    CDebugOverlayScriptHelper::SweptBox
Signature:   void CDebugOverlayScriptHelper::SweptBox(Vector, Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a swept box. Specify endpoints in world space and the bounds in local space.

Function:    CDebugOverlayScriptHelper::Text
Signature:   void CDebugOverlayScriptHelper::Text(Vector, string, float)
Description: Draws 2D text. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Triangle
Signature:   void CDebugOverlayScriptHelper::Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)
Description: Draws a filled triangle. Specify vertices in world space.

Function:    CDebugOverlayScriptHelper::VertArrow
Signature:   void CDebugOverlayScriptHelper::VertArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a vertical arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::YawArrow
Signature:   void CDebugOverlayScriptHelper::YawArrow(Vector, float, float, float, int, int, int, int, bool, float)
Description: Draws a arrow associated with a specific yaw. Specify endpoints in world space.

Function:    CEntities::CreateByClassname
Signature:   handle CEntities::CreateByClassname(string)
Description: Creates an entity by classname

Function:    CEntities::FindByClassNearestFacing
Signature:   handle CEntities::FindByClassNearestFacing(Vector, Vector, float, string)
Description: Find the nearest entity along the facing direction from the given origin within the angular threshold with the given classname.

Function:    CEntities::FindByClassname
Signature:   handle CEntities::FindByClassname(handle, string)
Description: Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByClassnameNearest
Signature:   handle CEntities::FindByClassnameNearest(string, Vector, float)
Description: Find entities by class name nearest to a point.

Function:    CEntities::FindByClassnameWithin
Signature:   handle CEntities::FindByClassnameWithin(handle, string, Vector, float)
Description: Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByClassnameWithinBox
Signature:   handle CEntities::FindByClassnameWithinBox(handle, string, Vector, Vector)
Description: Find entities by class name within an AABB. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByModel
Signature:   handle CEntities::FindByModel(handle, string)
Description: Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByName
Signature:   handle CEntities::FindByName(handle, string)
Description: Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByNameNearest
Signature:   handle CEntities::FindByNameNearest(string, Vector, float)
Description: Find entities by name nearest to a point.

Function:    CEntities::FindByNameWithin
Signature:   handle CEntities::FindByNameWithin(handle, string, Vector, float)
Description: Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByTarget
Signature:   handle CEntities::FindByTarget(handle, string)
Description: Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindInSphere
Signature:   handle CEntities::FindInSphere(handle, Vector, float)
Description: Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::First
Signature:   handle CEntities::First()
Description: Begin an iteration over the list of entities

Function:    CEntities::Next
Signature:   handle CEntities::Next(handle)
Description: Continue an iteration over the list of entities, providing reference to a previously found entity

Function:    CEnvEntityMaker::SpawnEntity
Signature:   void CEnvEntityMaker::SpawnEntity()
Description: Create an entity at the location of the maker

Function:    CEnvEntityMaker::SpawnEntityAtEntityOrigin
Signature:   void CEnvEntityMaker::SpawnEntityAtEntityOrigin(handle)
Description: Create an entity at the location of a specified entity instance

Function:    CEnvEntityMaker::SpawnEntityAtLocation
Signature:   void CEnvEntityMaker::SpawnEntityAtLocation(Vector, Vector)
Description: Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)

Function:    CEnvEntityMaker::SpawnEntityAtNamedEntityOrigin
Signature:   void CEnvEntityMaker::SpawnEntityAtNamedEntityOrigin(string)
Description: Create an entity at the location of a named entity

Function:    CEnvScreenOverlayMultiplayer::StartOverlay
Signature:   void CEnvScreenOverlayMultiplayer::StartOverlay(handle)
Description: Starts displaying the first overlay for the given player.

Function:    CEnvScreenOverlayMultiplayer::StartOverlayForAllPlayers
Signature:   void CEnvScreenOverlayMultiplayer::StartOverlayForAllPlayers()
Description: Starts displaying the first overlay for all players.

Function:    CEnvScreenOverlayMultiplayer::StopOverlay
Signature:   void CEnvScreenOverlayMultiplayer::StopOverlay(handle)
Description: Stops displaying any overlays for the given player.

Function:    CEnvScreenOverlayMultiplayer::StopOverlayForAllPlayers
Signature:   void CEnvScreenOverlayMultiplayer::StopOverlayForAllPlayers()
Description: Stops displaying any overlays for all players.

Function:    CEnvScreenOverlayMultiplayer::SwitchOverlay
Signature:   void CEnvScreenOverlayMultiplayer::SwitchOverlay(handle, int)
Description: Switches to displaying a specific overlay. Pass in the desired player and overlay number.

Function:    CEnvScreenOverlayMultiplayer::SwitchOverlayForAllPlayers
Signature:   void CEnvScreenOverlayMultiplayer::SwitchOverlayForAllPlayers(int)
Description: Switches to displaying a specific overlay for all players. Pass in the desired overlay number.

Function:    CEnvTimer::AddTargetTime
Signature:   void CEnvTimer::AddTargetTime(float)
Description: Adds a target time, with parameter in seconds. Once met, output OnTargetTime will be fired. You can have multiple.

Function:    CEnvTimer::HideTimer
Signature:   void CEnvTimer::HideTimer()
Description: Stops displaying the timer.

Function:    CEnvTimer::SetBroadcast
Signature:   void CEnvTimer::SetBroadcast(bool)
Description: When true, display the timer to all players, and not only the activator.

Function:    CEnvTimer::SetCountdown
Signature:   void CEnvTimer::SetCountdown(bool)
Description: When true, this timer will count down.

Function:    CEnvTimer::SetResolution
Signature:   void CEnvTimer::SetResolution(int)
Description: Sets timer resolution. Available values are; 0 - mm:ss, 1 - mm:ss.cs, 2 - hh:mm, 3 - hh:mm:ss, 4 - hh:mm:ss.cs (Key: hh - hours, mm - minutes, ss - seconds, cs - centiseconds)

Function:    CEnvTimer::SetStartTime
Signature:   void CEnvTimer::SetStartTime(float)
Description: The timer will initialize with this value, in seconds.

Function:    CEnvTimer::SetTime
Signature:   void CEnvTimer::SetTime(float)
Description: Sets the current time, with the parameter override in seconds.

Function:    CEnvTimer::SetTimerColor
Signature:   void CEnvTimer::SetTimerColor(int, int, int)
Description: Sets timer color, with RGB parameters.

Function:    CEnvTimer::SetXPos
Signature:   void CEnvTimer::SetXPos(int)
Description: Overrides proportional X position on the HUD, set to '-1' for default screen adjusted position.

Function:    CEnvTimer::SetYPos
Signature:   void CEnvTimer::SetYPos(int)
Description: Overrides proportional Y position on the HUD, set to '-1' for default screen adjusted position.

Function:    CEnvTimer::ShowTimer
Signature:   void CEnvTimer::ShowTimer()
Description: Displays timer on HUD for players. Doesn't start it.

Function:    CEnvTimer::StartTimer
Signature:   void CEnvTimer::StartTimer(handle)
Description: Starts the timer, with parameter of a player you wish to show it for (has no effect for broadcast timers, can be set to null). If this is a countdown timer, it'll tick down instead.

Function:    CEnvTimer::StopTimer
Signature:   void CEnvTimer::StopTimer()
Description: Stops the timer, this effectively pauses it.

Function:    CFuncZombieSpawn::CanDespawn
Signature:   bool CFuncZombieSpawn::CanDespawn()
Description: Returns true if this volume can despawn zombies.

Function:    CFuncZombieSpawn::Disable
Signature:   void CFuncZombieSpawn::Disable()
Description: Removes self from global list of active zones.

Function:    CFuncZombieSpawn::Enable
Signature:   void CFuncZombieSpawn::Enable()
Description: Adds self to global list of active zones.

Function:    CFuncZombieSpawn::GetChildChance
Signature:   float CFuncZombieSpawn::GetChildChance()
Description: Returns current child chance for this volume.

Function:    CFuncZombieSpawn::GetInterimMax
Signature:   int CFuncZombieSpawn::GetInterimMax()
Description: Returns optimal number of zombies this volume can spawn based on player proximity.

Function:    CFuncZombieSpawn::GetRegenTarget
Signature:   float CFuncZombieSpawn::GetRegenTarget()
Description: Returns ratio of dead zombie regeneration.

Function:    CFuncZombieSpawn::GetRunnerChance
Signature:   float CFuncZombieSpawn::GetRunnerChance()
Description: Returns current runner chance for this volume.

Function:    CFuncZombieSpawn::GetSpawnDensity
Signature:   float CFuncZombieSpawn::GetSpawnDensity()
Description: Returns ratio of spawn density

Function:    CFuncZombieSpawn::GetSpawnMax
Signature:   int CFuncZombieSpawn::GetSpawnMax()
Description: Returns maximum of zombies this volume can hold.

Function:    CFuncZombieSpawn::GetSpawnedCount
Signature:   int CFuncZombieSpawn::GetSpawnedCount()
Description: Returns the number of active zombies spawned by this volume.

Function:    CFuncZombieSpawn::GetSpawnedDead
Signature:   int CFuncZombieSpawn::GetSpawnedDead()
Description: Returns the number of dead zombies that were spawned by this volume. Reduces over time when regen is enabled.

Function:    CFuncZombieSpawn::GetZombiesNeeded
Signature:   int CFuncZombieSpawn::GetZombiesNeeded()
Description: Returns the number of zombies this volume wants to spawn.

Function:    CFuncZombieSpawn::HasHadPlayers
Signature:   bool CFuncZombieSpawn::HasHadPlayers()
Description: Returns true if this volume ever had players inside.

Function:    CFuncZombieSpawn::HasPlayers
Signature:   bool CFuncZombieSpawn::HasPlayers()
Description: Returns true if this volume has players inside.

Function:    CFuncZombieSpawn::InstantSpawn
Signature:   void CFuncZombieSpawn::InstantSpawn(int)
Description: Instantly spawns given amount of zombies in this volume.

Function:    CFuncZombieSpawn::IsEnabled
Signature:   bool CFuncZombieSpawn::IsEnabled()
Description: Returns true if this volume is active.

Function:    CFuncZombieSpawn::SetChildChance
Signature:   void CFuncZombieSpawn::SetChildChance(float)
Description: Sets child chance by given multiplier.

Function:    CFuncZombieSpawn::SetIgnoreVisibility
Signature:   void CFuncZombieSpawn::SetIgnoreVisibility(bool)
Description: When true, ignores player visibility when spawning zombies.

Function:    CFuncZombieSpawn::SetRunnerChance
Signature:   void CFuncZombieSpawn::SetRunnerChance(float)
Description: Sets runner chance by given multiplier.

Function:    CFuncZombieSpawn::SetSpawnDensity
Signature:   void CFuncZombieSpawn::SetSpawnDensity(float)
Description: Sets spawn density by given multiplier.

Function:    CFuncZombieSpawn::SetSpawnRegenTarget
Signature:   void CFuncZombieSpawn::SetSpawnRegenTarget(float)
Description: Sets regeneration fraction goal.

Function:    CFuncZombieSpawn::SetTarget
Signature:   void CFuncZombieSpawn::SetTarget(string)
Description: Sets target entity that zombies will head towards after spawning.

Function:    CFunc_SafeZone::Deactivate
Signature:   void CFunc_SafeZone::Deactivate()

Function:    CFunc_SafeZone::Heal
Signature:   void CFunc_SafeZone::Heal(int)
Description: Heals this safe zone by given amount.

Function:    CFunc_SafeZone::IsActive
Signature:   bool CFunc_SafeZone::IsActive()

Function:    CFunc_SafeZone::IsActiveForZombies
Signature:   bool CFunc_SafeZone::IsActiveForZombies()
Description: Returns true if the zone is active and not deactivated by map author.

Function:    CFunc_SafeZone::IsPaused
Signature:   bool CFunc_SafeZone::IsPaused()

Function:    CFunc_SafeZone::IsTouchingEntity
Signature:   bool CFunc_SafeZone::IsTouchingEntity(handle)
Description: Returns true if given entity is inside safe zone bounds.

Function:    CFunc_SafeZone::PauseDrain
Signature:   void CFunc_SafeZone::PauseDrain()
Description: Pauses safe zone health drain.

Function:    CFunc_SafeZone::Reactivate
Signature:   void CFunc_SafeZone::Reactivate()

Function:    CFunc_SafeZone::Reset
Signature:   void CFunc_SafeZone::Reset()
Description: Resets this safe zone back to default.

Function:    CFunc_SafeZone::ResumeDrain
Signature:   void CFunc_SafeZone::ResumeDrain()
Description: Resumes safe zone health drain.

Function:    CGameRules::AllowFlashlight
Signature:   bool CGameRules::AllowFlashlight()
Description: Returns true if players are allowed to switch on their flashlight.

Function:    CGameRules::AllowNPCs
Signature:   bool CGameRules::AllowNPCs()
Description: Returns true if NPCs are allowed.

Function:    CGameRules::AllowThirdPersonCamera
Signature:   bool CGameRules::AllowThirdPersonCamera()
Description: Returns true if third-person camera is allowed.

Function:    CGameRules::Damage_IsTimeBased
Signature:   bool CGameRules::Damage_IsTimeBased(int)
Description: Damage types that are time-based.

Function:    CGameRules::Damage_NoPhysicsForce
Signature:   bool CGameRules::Damage_NoPhysicsForce(int)
Description: Damage types that don't have to supply a physics force & position.

Function:    CGameRules::Damage_ShouldGibCorpse
Signature:   bool CGameRules::Damage_ShouldGibCorpse(int)
Description: Damage types that gib the corpse.

Function:    CGameRules::Damage_ShouldNotBleed
Signature:   bool CGameRules::Damage_ShouldNotBleed(int)
Description: Damage types that don't make the player bleed.

Function:    CGameRules::Damage_ShowOnHUD
Signature:   bool CGameRules::Damage_ShowOnHUD(int)
Description: Damage types that have client HUD art.

Function:    CGameRules::DefaultFOV
Signature:   int CGameRules::DefaultFOV()
Description: Default player FOV in this game.

Function:    CGameRules::GetDamageMultiplier
Signature:   float CGameRules::GetDamageMultiplier()
Description: Ammo type damage multiplier.

Function:    CGameRules::GetGameDescription
Signature:   string CGameRules::GetGameDescription()
Description: This is the game description that gets seen in server browsers.

Function:    CGameRules::GetGameType
Signature:   int CGameRules::GetGameType()

Function:    CGameRules::GetGameTypeName
Signature:   string CGameRules::GetGameTypeName()

Function:    CGameRules::GetSkillLevel
Signature:   int CGameRules::GetSkillLevel()
Description: Returns the game's difficulty/skill level.

Function:    CGameRules::InRoundRestart
Signature:   bool CGameRules::InRoundRestart()
Description: Returns true if the round is restarting.

Function:    CGameRules::IsCoOp
Signature:   bool CGameRules::IsCoOp()

Function:    CGameRules::IsDeathmatch
Signature:   bool CGameRules::IsDeathmatch()

Function:    CGameRules::IsMultiplayer
Signature:   bool CGameRules::IsMultiplayer()
Description: Returns true if this is a multiplayer game (like co-op or deathmatch).

Function:    CGameRules::IsSkillLevel
Signature:   bool CGameRules::IsSkillLevel(int)
Description: Returns true if the game is set to the specified difficulty/skill level.

Function:    CGameRules::IsTeamplay
Signature:   bool CGameRules::IsTeamplay()

Function:    CGameRules::Name
Signature:   string CGameRules::Name()
Description: Gets the name of these rules.

Function:    CGameRules::RefreshSkillData
Signature:   void CGameRules::RefreshSkillData(bool)

Function:    CGameRules::SetSkillLevel
Signature:   void CGameRules::SetSkillLevel(int)
Description: Sets the game's difficulty/skill level.

Function:    CGameRules::ShouldCollide
Signature:   bool CGameRules::ShouldCollide(int, int)
Description: Returns whether two collision groups collide with each other in this game.

Function:    CGameState::EndRound
Signature:   void CGameState::EndRound()
Description: Ends the round (loss state).

Function:    CGameState::ExtractAllPlayers
Signature:   void CGameState::ExtractAllPlayers()
Description: Extracts all players (win state).

Function:    CGameState::ExtractPlayer
Signature:   void CGameState::ExtractPlayer(handle)
Description: Extracts a player.

Function:    CGameState::FreezeAllNPCs
Signature:   void CGameState::FreezeAllNPCs()
Description: Freezes all NPCs.

Function:    CGameState::FreezeAllPlayers
Signature:   void CGameState::FreezeAllPlayers()
Description: Freezes all players.

Function:    CGameState::NukePlayers
Signature:   void CGameState::NukePlayers()
Description: Kills all players, then ends the round (loss state).

Function:    CGameState::RespawnAllPlayers
Signature:   void CGameState::RespawnAllPlayers()
Description: Respawns all players.

Function:    CGameState::RespawnDeadPlayers
Signature:   void CGameState::RespawnDeadPlayers()
Description: Respawns dead players.

Function:    CGameState::RespawnPlayer
Signature:   void CGameState::RespawnPlayer(handle)
Description: Respawns a player.

Function:    CGameState::RestartRound
Signature:   void CGameState::RestartRound()
Description: Restarts round immediately.

Function:    CGameState::UnfreezeAllNPCs
Signature:   void CGameState::UnfreezeAllNPCs()
Description: Unfreezes all NPCs.

Function:    CGameState::UnfreezeAllPlayers
Signature:   void CGameState::UnfreezeAllPlayers()
Description: Unfreezes all players.

Function:    CGameTrace::AllSolid
Signature:   bool CGameTrace::AllSolid()
Description: Returns whether the trace is completely within a solid.

Function:    CGameTrace::Contents
Signature:   int CGameTrace::Contents()
Description: Gets the contents of the surface the trace has hit.

Function:    CGameTrace::Destroy
Signature:   void CGameTrace::Destroy()
Description: Deletes this instance. Important for preventing memory leaks.

Function:    CGameTrace::DidHit
Signature:   bool CGameTrace::DidHit()
Description: Returns whether the trace hit anything.

Function:    CGameTrace::DidHitNonWorldEntity
Signature:   bool CGameTrace::DidHitNonWorldEntity()
Description: Returns whether the trace hit something other than the world entity.

Function:    CGameTrace::DidHitWorld
Signature:   bool CGameTrace::DidHitWorld()
Description: Returns whether the trace hit the world entity or not.

Function:    CGameTrace::DispFlags
Signature:   int CGameTrace::DispFlags()
Description: Gets the displacement flags of the surface the trace has hit.

Function:    CGameTrace::EndPos
Signature:   Vector CGameTrace::EndPos()
Description: Gets the trace's end position.

Function:    CGameTrace::Entity
Signature:   handle CGameTrace::Entity()
Description: Returns the entity this trace has hit.

Function:    CGameTrace::Fraction
Signature:   float CGameTrace::Fraction()
Description: Gets the fraction of the trace completed. For example, if the trace stopped exactly halfway to the end position, this would be 0.5.

Function:    CGameTrace::FractionLeftSolid
Signature:   float CGameTrace::FractionLeftSolid()
Description: If this trace started within a solid, this is the point in the trace's fraction at which it left that solid.

Function:    CGameTrace::GetEntityIndex
Signature:   int CGameTrace::GetEntityIndex()
Description: Returns the index of whatever entity this trace hit.

Function:    CGameTrace::HitBox
Signature:   int CGameTrace::HitBox()
Description: Returns the hitbox of the entity this trace has hit. If it hit the world entity, this returns the static prop index.

Function:    CGameTrace::HitGroup
Signature:   int CGameTrace::HitGroup()
Description: Returns the specific hit group this trace hit if it hit an entity.

Function:    CGameTrace::IsDispSurface
Signature:   bool CGameTrace::IsDispSurface()
Description: Returns whether this trace hit a displacement.

Function:    CGameTrace::IsDispSurfaceBuildable
Signature:   bool CGameTrace::IsDispSurfaceBuildable()
Description: Returns whether DISPSURF_FLAG_BUILDABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp1
Signature:   bool CGameTrace::IsDispSurfaceProp1()
Description: Returns whether DISPSURF_FLAG_SURFPROP1 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp2
Signature:   bool CGameTrace::IsDispSurfaceProp2()
Description: Returns whether DISPSURF_FLAG_SURFPROP2 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceWalkable
Signature:   bool CGameTrace::IsDispSurfaceWalkable()
Description: Returns whether DISPSURF_FLAG_WALKABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::PhysicsBone
Signature:   int CGameTrace::PhysicsBone()
Description: Returns the physics bone this trace hit if it hit an entity.

Function:    CGameTrace::Plane
Signature:   handle CGameTrace::Plane()

Function:    CGameTrace::StartPos
Signature:   Vector CGameTrace::StartPos()
Description: Gets the trace's start position.

Function:    CGameTrace::StartSolid
Signature:   bool CGameTrace::StartSolid()
Description: Returns whether the trace started within a solid.

Function:    CGameTrace::Surface
Signature:   handle CGameTrace::Surface()

Function:    CInfectableCharacter::BecomeInfected
Signature:   void CInfectableCharacter::BecomeInfected()
Description: Character becomes infected.

Function:    CInfectableCharacter::CureInfection
Signature:   void CInfectableCharacter::CureInfection()
Description: Cures active infection.

Function:    CInfectableCharacter::DiedWhileInfected
Signature:   bool CInfectableCharacter::DiedWhileInfected()
Description: Returns true if character died while infected.

Function:    CInfectableCharacter::GetInfectionDeathTime
Signature:   float CInfectableCharacter::GetInfectionDeathTime()
Description: Gets the time of when infection takes over.

Function:    CInfectableCharacter::GetInfectionTime
Signature:   float CInfectableCharacter::GetInfectionTime()
Description: Gets the time of infection.

Function:    CInfectableCharacter::IsInfected
Signature:   bool CInfectableCharacter::IsInfected()
Description: Returns true if character is infected.

Function:    CInfectableCharacter::TakePills
Signature:   void CInfectableCharacter::TakePills()
Description: Resets infection time.

Function:    CItem_AmmoBox::GetAmmoType
Signature:   string CItem_AmmoBox::GetAmmoType()
Description: Returns ammo type name, e.g. ammotype_9mm

Function:    CItem_AmmoBox::GetMaxAmmo
Signature:   int CItem_AmmoBox::GetMaxAmmo()
Description: Returns max count for current ammo type.

Function:    CItem_AmmoBox::SetAmmoCount
Signature:   void CItem_AmmoBox::SetAmmoCount(int)
Description: Set ammo count.

Function:    CItem_AmmoBox::SetAmmoType
Signature:   void CItem_AmmoBox::SetAmmoType(string)
Description: Set ammo type by name.

Function:    CItem_InventoryBox::AddItem
Signature:   bool CItem_InventoryBox::AddItem(string)
Description: Adds an item to the inventory box, accepts item aliases and spawner keywords. Returns false if the box is full.

Function:    CItem_InventoryBox::AddItemAtIndex
Signature:   void CItem_InventoryBox::AddItemAtIndex(string, int, int)
Description: Adds an item at specified category and index, accepts item aliases and spawner keywords.

Function:    CItem_InventoryBox::AddRandomAmmo
Signature:   void CItem_InventoryBox::AddRandomAmmo(int)
Description: Adds a random ammo item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots.

Function:    CItem_InventoryBox::AddRandomGear
Signature:   void CItem_InventoryBox::AddRandomGear(int)
Description: Adds a random gear item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots.

Function:    CItem_InventoryBox::AddRandomWeapon
Signature:   void CItem_InventoryBox::AddRandomWeapon(int)
Description: Adds a random weapon item to the inventory box, with a parameter of item count. Use -1 to fill all the empty slots.

Function:    CItem_InventoryBox::AllowEmpty
Signature:   void CItem_InventoryBox::AllowEmpty(bool)
Description: Sets whether or not the box will be removed once it's been emptied, with a boolean parameter.

Function:    CItem_InventoryBox::IsDroppedByChopper
Signature:   bool CItem_InventoryBox::IsDroppedByChopper()
Description: Returns true if this inventory box is dropped by a chopper, and isn't manually spawned.

Function:    CItem_InventoryBox::IsUncategorized
Signature:   bool CItem_InventoryBox::IsUncategorized()
Description: Returns true if this inventory box is uncategorized.

Function:    CItem_InventoryBox::ItemAtPosition
Signature:   int CItem_InventoryBox::ItemAtPosition(int, int)
Description: Returns WeaponID for an item at specified category and index.

Function:    CItem_InventoryBox::RandomizeContents
Signature:   void CItem_InventoryBox::RandomizeContents()
Description: Randomizes new contents, and replaces all existing items.

Function:    CItem_InventoryBox::RemoveAllItems
Signature:   void CItem_InventoryBox::RemoveAllItems()
Description: Removes all items in the inventory box.

Function:    CItem_InventoryBox::RemoveItem
Signature:   void CItem_InventoryBox::RemoveItem(int, int)
Description: Removes an item at specified category and index.

Function:    CItem_InventoryBox::SetBackgroundTexture
Signature:   void CItem_InventoryBox::SetBackgroundTexture(string)
Description: Changes supply crate background in the client UI, with a parameter of material name.

Function:    CLogicProgress::AddMilestone
Signature:   void CLogicProgress::AddMilestone(float)
Description: Adds a milestone, with parameter of progress ratio (0.0 - 1.0). Once hit, output OnMilestone will be fired. You can have multiple milestones.

Function:    CLogicProgress::GetProgress
Signature:   float CLogicProgress::GetProgress()
Description: Returns current progress ratio (0.0 - 1.0).

Function:    CLogicProgress::HideProgress
Signature:   void CLogicProgress::HideProgress()
Description: Hides progress on HUD while it's still ongoing.

Function:    CLogicProgress::SetBroadcast
Signature:   void CLogicProgress::SetBroadcast(bool)
Description: When true, display the progress bar to all players, and not only the activator.

Function:    CLogicProgress::SetInvert
Signature:   void CLogicProgress::SetInvert(bool)
Description: When true, progress decreases and fires output when depleted. Note: Milestones remain unchanged, e.g. 0.75 would be fired when 0.25 is hit.

Function:    CLogicProgress::SetLength
Signature:   void CLogicProgress::SetLength(float)
Description: Sets length to completion in seconds when the progress activates. Only works in dynamic mode.

Function:    CLogicProgress::SetProgress
Signature:   void CLogicProgress::SetProgress(float)
Description: Sets current progress, with parameter of ratio (0.0 - 1.0). In dynamic mode, the timer will be set accordingly.

Function:    CLogicProgress::SetProgressColor
Signature:   void CLogicProgress::SetProgressColor(int, int, int)
Description: Sets a custom color for HUD progress bar, with RGB parameters.

Function:    CLogicProgress::SetStatic
Signature:   void CLogicProgress::SetStatic(bool)
Description: When true, be a static timer; it'll remain still, and will require manual use of SetProgress. When false, be a dynamic timer; a timer-based counter (i.e. trigger_progress_use).

Function:    CLogicProgress::StartProgress
Signature:   void CLogicProgress::StartProgress(handle)
Description: Starts progress, with a parameter being the user of this entity.

Function:    CLogicProgress::StopProgress
Signature:   void CLogicProgress::StopProgress()
Description: Stops progress for all users.

Function:    CLogicProgress::ToggleProgress
Signature:   void CLogicProgress::ToggleProgress()
Description: Toggles progress on/off.

Function:    CLogicScriptProxy::RunFunction
Signature:   void CLogicScriptProxy::RunFunction(string)
Description: Runs an entity script function using a proxy.

Function:    CLogicScriptProxy::RunFunctionBool
Signature:   void CLogicScriptProxy::RunFunctionBool(string)
Description: Runs an entity script function using a proxy, and saves returned value into entprop buffer as boolean (0/1).

Function:    CLogicScriptProxy::RunFunctionEHandle
Signature:   void CLogicScriptProxy::RunFunctionEHandle(string)
Description: Runs an entity script function using a proxy, and saves returned entity handle into entprop.

Function:    CLogicScriptProxy::RunFunctionFloat
Signature:   void CLogicScriptProxy::RunFunctionFloat(string)
Description: Runs an entity script function using a proxy, and saves returned float into entprop buffer.

Function:    CLogicScriptProxy::RunFunctionInt
Signature:   void CLogicScriptProxy::RunFunctionInt(string)
Description: Runs an entity script function using a proxy, and saves returned int into entprop buffer.

Function:    CLogicScriptProxy::RunFunctionString
Signature:   void CLogicScriptProxy::RunFunctionString(string)
Description: Runs an entity script function using a proxy, and saves returned string into entprop buffer.

Function:    CLogicScriptProxy::RunFunctionVector
Signature:   void CLogicScriptProxy::RunFunctionVector(string)
Description: Runs an entity script function using a proxy, and saves returned vector into entprop buffer.

Function:    CLogicScriptProxy::SetTargetEntity
Signature:   void CLogicScriptProxy::SetTargetEntity(handle)
Description: Target chosen entity.

Function:    CNMRiH_BarricadePoint::DoBarricade
Signature:   void CNMRiH_BarricadePoint::DoBarricade()
Description: Barricades this point, does nothing if it's already used.

Function:    CNMRiH_BarricadePoint::GetBarricadeProp
Signature:   handle CNMRiH_BarricadePoint::GetBarricadeProp()
Description: Returns entity handle to barricade prop, if one is available.

Function:    CNMRiH_BarricadePoint::IsBlocked
Signature:   bool CNMRiH_BarricadePoint::IsBlocked()
Description: Returns true if this point is blocked by a player, NPC, or anything else.

Function:    CNMRiH_BarricadePoint::IsInUse
Signature:   bool CNMRiH_BarricadePoint::IsInUse()
Description: Returns true if this barricade point has been used, i.e. has a prop.

Function:    CNMRiH_BaseZombie::BecomeCrawler
Signature:   void CNMRiH_BaseZombie::BecomeCrawler()
Description: Turns this zombie into a crawler.

Function:    CNMRiH_BaseZombie::BecomeRunner
Signature:   void CNMRiH_BaseZombie::BecomeRunner()
Description: Turns this zombie into a runner.

Function:    CNMRiH_BaseZombie::BecomeShambler
Signature:   void CNMRiH_BaseZombie::BecomeShambler()
Description: Turns this zombie into a shambler.

Function:    CNMRiH_BaseZombie::GetShoved
Signature:   void CNMRiH_BaseZombie::GetShoved(handle)
Description: Zombie gets shoved back, with entity handle parameter of shove source.

Function:    CNMRiH_BaseZombie::HasArmor
Signature:   bool CNMRiH_BaseZombie::HasArmor()
Description: Returns true if this zombie has armor (i.e. national guard).

Function:    CNMRiH_BaseZombie::IsCrawler
Signature:   bool CNMRiH_BaseZombie::IsCrawler()
Description: Returns true if this zombie is a crawler.

Function:    CNMRiH_BaseZombie::IsKid
Signature:   bool CNMRiH_BaseZombie::IsKid()
Description: Returns true if this zombie is a kid.

Function:    CNMRiH_BaseZombie::IsRunner
Signature:   bool CNMRiH_BaseZombie::IsRunner()
Description: Returns true if this zombie is a runner.

Function:    CNMRiH_BaseZombie::IsShambler
Signature:   bool CNMRiH_BaseZombie::IsShambler()
Description: Returns true if this zombie is a shambler.

Function:    CNMRiH_BaseZombie::IsTurned
Signature:   bool CNMRiH_BaseZombie::IsTurned()
Description: Returns true if this zombie is a turned player.

Function:    CNMRiH_BaseZombie::SetModelOverride
Signature:   void CNMRiH_BaseZombie::SetModelOverride(string)
Description: Overrides model on this zombie.

Function:    CNMRiH_BaseZombie::SpawnLootAmmo
Signature:   handle CNMRiH_BaseZombie::SpawnLootAmmo(string)
Description: Spawns loot drop by ammo name, returns handle to new entity.

Function:    CNMRiH_BaseZombie::SpawnLootWeapon
Signature:   handle CNMRiH_BaseZombie::SpawnLootWeapon(string)
Description: Spawns loot drop by weapon classname, returns handle to new entity.

Function:    CNMRiH_GameRules::AreTokensGivenFromKills
Signature:   bool CNMRiH_GameRules::AreTokensGivenFromKills()

Function:    CNMRiH_GameRules::GetActivePlayerCount
Signature:   int CNMRiH_GameRules::GetActivePlayerCount()

Function:    CNMRiH_GameRules::GetActivePlayerSpawnCount
Signature:   int CNMRiH_GameRules::GetActivePlayerSpawnCount()

Function:    CNMRiH_GameRules::GetCurrentState
Signature:   int CNMRiH_GameRules::GetCurrentState()

Function:    CNMRiH_GameRules::GetDeadPlayerCount
Signature:   int CNMRiH_GameRules::GetDeadPlayerCount()

Function:    CNMRiH_GameRules::GetExtractedPlayerCount
Signature:   int CNMRiH_GameRules::GetExtractedPlayerCount()

Function:    CNMRiH_GameRules::GetGameOverState
Signature:   int CNMRiH_GameRules::GetGameOverState()

Function:    CNMRiH_GameRules::GetInfectionModifier
Signature:   float CNMRiH_GameRules::GetInfectionModifier()

Function:    CNMRiH_GameRules::GetKillsRequiredPerToken
Signature:   int CNMRiH_GameRules::GetKillsRequiredPerToken()

Function:    CNMRiH_GameRules::GetLossState
Signature:   int CNMRiH_GameRules::GetLossState()

Function:    CNMRiH_GameRules::GetPracticeState
Signature:   int CNMRiH_GameRules::GetPracticeState()

Function:    CNMRiH_GameRules::GetRestartState
Signature:   int CNMRiH_GameRules::GetRestartState()

Function:    CNMRiH_GameRules::GetRunningState
Signature:   int CNMRiH_GameRules::GetRunningState()

Function:    CNMRiH_GameRules::GetStateTransitionTime
Signature:   float CNMRiH_GameRules::GetStateTransitionTime()

Function:    CNMRiH_GameRules::GetSuppliesDroppedCount
Signature:   int CNMRiH_GameRules::GetSuppliesDroppedCount()

Function:    CNMRiH_GameRules::GetWinState
Signature:   int CNMRiH_GameRules::GetWinState()

Function:    CNMRiH_GameRules::HasLevelTransitioned
Signature:   bool CNMRiH_GameRules::HasLevelTransitioned()

Function:    CNMRiH_GameRules::IsIntermission
Signature:   bool CNMRiH_GameRules::IsIntermission()

Function:    CNMRiH_HealthStationLocation::BecomeActive
Signature:   void CNMRiH_HealthStationLocation::BecomeActive()
Description: Activates health station.

Function:    CNMRiH_HealthStationLocation::BecomeDepleted
Signature:   void CNMRiH_HealthStationLocation::BecomeDepleted()
Description: Depletes health station.

Function:    CNMRiH_HealthStationLocation::GetHealthPercentage
Signature:   float CNMRiH_HealthStationLocation::GetHealthPercentage()
Description: Returns percentage of health remaining in the station.

Function:    CNMRiH_HealthStationLocation::GetStationHealth
Signature:   int CNMRiH_HealthStationLocation::GetStationHealth()
Description: Returns amount of health remaining in the station.

Function:    CNMRiH_HealthStationLocation::IsActive
Signature:   bool CNMRiH_HealthStationLocation::IsActive()
Description: Returns true when health station is active.

Function:    CNMRiH_HealthStationLocation::IsFadingOut
Signature:   bool CNMRiH_HealthStationLocation::IsFadingOut()
Description: Returns true when depleted health station is fading out.

Function:    CNMRiH_HealthStationLocation::SetStationHealth
Signature:   void CNMRiH_HealthStationLocation::SetStationHealth(int)
Description: Sets amount of health remaining in the station.

Function:    CNMRiH_ItemCustom::ApplyItem
Signature:   bool CNMRiH_ItemCustom::ApplyItem()
Description: Applies item to its owner, returns success.

Function:    CNMRiH_ItemCustom::CanHoverSelect
Signature:   bool CNMRiH_ItemCustom::CanHoverSelect()
Description: Returns true when the item can be applied by hovering and closing the radial wheel.

Function:    CNMRiH_ItemCustom::DropItem
Signature:   bool CNMRiH_ItemCustom::DropItem()
Description: Drops item from its owner if it's being held, returns success.

Function:    CNMRiH_ItemCustom::GetIcon
Signature:   string CNMRiH_ItemCustom::GetIcon()
Description: Returns material name of the inventory icon.

Function:    CNMRiH_ItemCustom::GetLabel
Signature:   string CNMRiH_ItemCustom::GetLabel()
Description: Returns inventory label.

Function:    CNMRiH_ItemCustom::GetWeight
Signature:   int CNMRiH_ItemCustom::GetWeight()
Description: Returns physical weight.

Function:    CNMRiH_ItemCustom::GiveItem
Signature:   bool CNMRiH_ItemCustom::GiveItem(handle)
Description: Attempts to give item to a target player, returns success.

Function:    CNMRiH_ItemCustom::IsHighlighted
Signature:   bool CNMRiH_ItemCustom::IsHighlighted()
Description: Returns true when the item is displayed as highlighted in the inventory.

Function:    CNMRiH_ItemCustom::SetHighlight
Signature:   void CNMRiH_ItemCustom::SetHighlight(bool)
Description: When true, highlight entry in the inventory.

Function:    CNMRiH_ItemCustom::SetHoverSelect
Signature:   void CNMRiH_ItemCustom::SetHoverSelect(bool)
Description: When true, item can be applied by hovering and closing the radial wheel, when false, user must click to apply.

Function:    CNMRiH_ItemCustom::SetIcon
Signature:   void CNMRiH_ItemCustom::SetIcon(string)
Description: Sets material name for VGUI inventory icon.

Function:    CNMRiH_ItemCustom::SetLabel
Signature:   void CNMRiH_ItemCustom::SetLabel(string)
Description: Sets visible name for inventory wheel, accepts localization strings.

Function:    CNMRiH_ItemCustom::SetWeight
Signature:   void CNMRiH_ItemCustom::SetWeight(int)
Description: Sets physical weight.

Function:    CNMRiH_Music_Manager::EndEvac
Signature:   void CNMRiH_Music_Manager::EndEvac()
Description: Stops playing evac music.

Function:    CNMRiH_Music_Manager::Mute
Signature:   void CNMRiH_Music_Manager::Mute()
Description: Mutes all music.

Function:    CNMRiH_Music_Manager::StartCustomMusicState
Signature:   void CNMRiH_Music_Manager::StartCustomMusicState(int)
Description: Starts playing custom music, with parameter of state number (1-3).

Function:    CNMRiH_Music_Manager::StopCustomMusicState
Signature:   void CNMRiH_Music_Manager::StopCustomMusicState()
Description: Stops playing custom music.

Function:    CNMRiH_Music_Manager::TriggerEvac
Signature:   void CNMRiH_Music_Manager::TriggerEvac()
Description: Starts playing evac music.

Function:    CNMRiH_Music_Manager::Unmute
Signature:   void CNMRiH_Music_Manager::Unmute()
Description: Unmutes all music.

Function:    CNMRiH_Player::AddCarriedWeight
Signature:   void CNMRiH_Player::AddCarriedWeight(int)
Description: Adds carried inventory weight.

Function:    CNMRiH_Player::Ammo_Drop
Signature:   bool CNMRiH_Player::Ammo_Drop(string)
Description: Drops one box of owned ammo, with parameter of ammo name (without ammobox_ prefix, e.g. '12gauge'). Returns success.

Function:    CNMRiH_Player::ApplyBandage
Signature:   void CNMRiH_Player::ApplyBandage()
Description: Applies the effect of using a bandage.

Function:    CNMRiH_Player::ApplyFirstAidKit
Signature:   void CNMRiH_Player::ApplyFirstAidKit()
Description: Applies the effect of using a first aid kit.

Function:    CNMRiH_Player::ApplyVaccine
Signature:   void CNMRiH_Player::ApplyVaccine()
Description: Applies the effect of gene therapy vaccine, cures and immunizes infection.

Function:    CNMRiH_Player::BleedOut
Signature:   void CNMRiH_Player::BleedOut()
Description: Inflicts bleeding.

Function:    CNMRiH_Player::CancelSuicide
Signature:   void CNMRiH_Player::CancelSuicide(bool)
Description: Cancels suicide when contemplating, with boolean parameter for playing cancel animation.

Function:    CNMRiH_Player::CancelThrowDrop
Signature:   void CNMRiH_Player::CancelThrowDrop()
Description: Cancels active weapon throw.

Function:    CNMRiH_Player::ClearHandModelOverride
Signature:   void CNMRiH_Player::ClearHandModelOverride()
Description: Resets viewmodel hands back to default.

Function:    CNMRiH_Player::ContemplateSuicide
Signature:   void CNMRiH_Player::ContemplateSuicide()
Description: Begins contemplating suicide.

Function:    CNMRiH_Player::DeathCount
Signature:   int CNMRiH_Player::DeathCount()
Description: Returns the amount of times player has died.

Function:    CNMRiH_Player::DecrementRespawnTokens
Signature:   void CNMRiH_Player::DecrementRespawnTokens()
Description: Decrements active respawn tokens.

Function:    CNMRiH_Player::DestroyAllAmmo
Signature:   void CNMRiH_Player::DestroyAllAmmo()
Description: Destroys all ammo that player owns.

Function:    CNMRiH_Player::DestroyAllWeapons
Signature:   void CNMRiH_Player::DestroyAllWeapons()
Description: Destroys all weapons that player owns.

Function:    CNMRiH_Player::DestroyEverything
Signature:   void CNMRiH_Player::DestroyEverything()
Description: Destroys all items that player owns.

Function:    CNMRiH_Player::DoCommitSuicide
Signature:   void CNMRiH_Player::DoCommitSuicide()
Description: Does commit suicide.

Function:    CNMRiH_Player::DropEverything
Signature:   void CNMRiH_Player::DropEverything()
Description: Drops all items that player owns.

Function:    CNMRiH_Player::EnableSprint
Signature:   void CNMRiH_Player::EnableSprint(bool)
Description: Enables / disables sprinting ability.

Function:    CNMRiH_Player::GetAmmoCarryWeight
Signature:   int CNMRiH_Player::GetAmmoCarryWeight()
Description: Returns ammo inventory weight.

Function:    CNMRiH_Player::GetCarriedItems
Signature:   void CNMRiH_Player::GetCarriedItems(handle)
Description: Fills table with carried inventory items, including weapons and custom items (excl. passive items such as fists, zippo, and ammo).

Function:    CNMRiH_Player::GetCarriedWeight
Signature:   int CNMRiH_Player::GetCarriedWeight()
Description: Returns total carried inventory weight.

Function:    CNMRiH_Player::GetHeldEntity
Signature:   handle CNMRiH_Player::GetHeldEntity()
Description: Returns a prop player is holding.

Function:    CNMRiH_Player::GetJumpStaminaCost
Signature:   float CNMRiH_Player::GetJumpStaminaCost()
Description: Returns the amount of stamina jumping costs.

Function:    CNMRiH_Player::GetLastObserverMode
Signature:   int CNMRiH_Player::GetLastObserverMode()
Description: Returns previous observer mode.

Function:    CNMRiH_Player::GetMaxCarriedWeight
Signature:   float CNMRiH_Player::GetMaxCarriedWeight()
Description: Returns max carried inventory weight.

Function:    CNMRiH_Player::GetNextRespawnTime
Signature:   float CNMRiH_Player::GetNextRespawnTime()
Description: Returns next respawn time for this player.

Function:    CNMRiH_Player::GetNextSpawnTryTime
Signature:   float CNMRiH_Player::GetNextSpawnTryTime()
Description: Returns next spawn attempt time for this player.

Function:    CNMRiH_Player::GetSpeedModifier
Signature:   float CNMRiH_Player::GetSpeedModifier()
Description: Returns active speed modifier.

Function:    CNMRiH_Player::GetSpeedOverride
Signature:   float CNMRiH_Player::GetSpeedOverride()
Description: Returns active speed override, -1.0 if none is applied.

Function:    CNMRiH_Player::GetStamina
Signature:   float CNMRiH_Player::GetStamina()
Description: Returns player stamina.

Function:    CNMRiH_Player::GetThrowScale
Signature:   float CNMRiH_Player::GetThrowScale()
Description: Returns current weapon throw scale.

Function:    CNMRiH_Player::GetThrowVector
Signature:   Vector CNMRiH_Player::GetThrowVector(float)
Description: Returns weapon throw vector, with parameter of throw force.

Function:    CNMRiH_Player::HasFlashlight
Signature:   bool CNMRiH_Player::HasFlashlight()
Description: Returns true if player owns flashlight.

Function:    CNMRiH_Player::HasLeftoverWeight
Signature:   bool CNMRiH_Player::HasLeftoverWeight(int)
Description: Returns true if player has given weight available.

Function:    CNMRiH_Player::HasWalkieTalkie
Signature:   bool CNMRiH_Player::HasWalkieTalkie()
Description: Returns true if player owns walkie talkie.

Function:    CNMRiH_Player::IncreaseBloodiness
Signature:   void CNMRiH_Player::IncreaseBloodiness()
Description: Increases visual bloodiness.

Function:    CNMRiH_Player::IncrementRespawnTokens
Signature:   void CNMRiH_Player::IncrementRespawnTokens()
Description: Increments active respawn tokens.

Function:    CNMRiH_Player::IsBleedingOut
Signature:   bool CNMRiH_Player::IsBleedingOut()
Description: Returns true is player is bleeding.

Function:    CNMRiH_Player::IsContemplatingSuicide
Signature:   bool CNMRiH_Player::IsContemplatingSuicide()
Description: Returns true when player is contemplating suicide.

Function:    CNMRiH_Player::IsDucking
Signature:   bool CNMRiH_Player::IsDucking()
Description: Returns true if player is ducking.

Function:    CNMRiH_Player::IsExtracted
Signature:   bool CNMRiH_Player::IsExtracted()
Description: Returns true if player is extracted.

Function:    CNMRiH_Player::IsGrabbed
Signature:   bool CNMRiH_Player::IsGrabbed()
Description: Returns true if player is being grabbed by a zombie.

Function:    CNMRiH_Player::IsHoldingEntity
Signature:   bool CNMRiH_Player::IsHoldingEntity()
Description: Returns true if player is holding a prop.

Function:    CNMRiH_Player::IsHost
Signature:   bool CNMRiH_Player::IsHost()
Description: Returns true if this player is a listen server host.

Function:    CNMRiH_Player::IsInBarricadingMode
Signature:   bool CNMRiH_Player::IsInBarricadingMode()
Description: Returns true when player is in barricade build mode (i.e. has a board out and sees points).

Function:    CNMRiH_Player::IsInLevelTransition
Signature:   bool CNMRiH_Player::IsInLevelTransition()
Description: Returns true if player is in level transition.

Function:    CNMRiH_Player::IsJumping
Signature:   bool CNMRiH_Player::IsJumping()
Description: Returns true if player is jumping.

Function:    CNMRiH_Player::IsPartialBlindnessActive
Signature:   bool CNMRiH_Player::IsPartialBlindnessActive()
Description: Returns true if player is experiencing blindness from vaccine side effects.

Function:    CNMRiH_Player::IsPlacingBoard
Signature:   bool CNMRiH_Player::IsPlacingBoard()
Description: Returns true when player is nailing a board while barricading.

Function:    CNMRiH_Player::IsSprinting
Signature:   bool CNMRiH_Player::IsSprinting()
Description: Returns true if player is sprinting.

Function:    CNMRiH_Player::IsTalkingLocal
Signature:   bool CNMRiH_Player::IsTalkingLocal()
Description: Returns true if player is talking without a walkie talkie.

Function:    CNMRiH_Player::IsTalkingWalkie
Signature:   bool CNMRiH_Player::IsTalkingWalkie()
Description: Returns true if player is talking with a walkie talkie.

Function:    CNMRiH_Player::IsUsingProgressTrigger
Signature:   bool CNMRiH_Player::IsUsingProgressTrigger()
Description: Returns true if player is using a tool.

Function:    CNMRiH_Player::IsVaccinated
Signature:   bool CNMRiH_Player::IsVaccinated()
Description: Returns true if player is vaccinated.

Function:    CNMRiH_Player::IsVoiceCommandTimerExpired
Signature:   bool CNMRiH_Player::IsVoiceCommandTimerExpired()
Description: Returns true when voice command timer has expired.

Function:    CNMRiH_Player::ReadyToRespawn
Signature:   bool CNMRiH_Player::ReadyToRespawn()
Description: Returns true if player is ready to respawn.

Function:    CNMRiH_Player::RemoveCarriedWeight
Signature:   void CNMRiH_Player::RemoveCarriedWeight(int)
Description: Removes carried inventory weight.

Function:    CNMRiH_Player::RemoveInflictions
Signature:   void CNMRiH_Player::RemoveInflictions()
Description: Removes infection and bleeding.

Function:    CNMRiH_Player::ResetRespawnTokens
Signature:   void CNMRiH_Player::ResetRespawnTokens()
Description: Resets active respawn tokens.

Function:    CNMRiH_Player::ResetVoiceCommandTimer
Signature:   void CNMRiH_Player::ResetVoiceCommandTimer()
Description: Resets voice command cooldown timer.

Function:    CNMRiH_Player::RespawnTokenCount
Signature:   int CNMRiH_Player::RespawnTokenCount()
Description: Returns active respawn token count.

Function:    CNMRiH_Player::SetExtracted
Signature:   void CNMRiH_Player::SetExtracted(bool)
Description: Sets this player as extracted.

Function:    CNMRiH_Player::SetHandModelOverride
Signature:   void CNMRiH_Player::SetHandModelOverride(string)
Description: Overrides viewmodel hands, with string parameter for model name.

Function:    CNMRiH_Player::SetIdleTimeout
Signature:   void CNMRiH_Player::SetIdleTimeout(float)
Description: Sets timeout for idle auto-kick.

Function:    CNMRiH_Player::SetIgnoreFallDamage
Signature:   void CNMRiH_Player::SetIgnoreFallDamage(bool)
Description: Makes the player ignore all fall damage.

Function:    CNMRiH_Player::SetNextRespawnTime
Signature:   void CNMRiH_Player::SetNextRespawnTime(float)
Description: Sets next respawn time for this player.

Function:    CNMRiH_Player::SetNextSpawnTryTime
Signature:   void CNMRiH_Player::SetNextSpawnTryTime(float)
Description: Sets next spawn attempt time for this player.

Function:    CNMRiH_Player::SetRespawnTokens
Signature:   void CNMRiH_Player::SetRespawnTokens(int, bool)
Description: Sets active respawn tokens, with boolean parameter if player should be notified.

Function:    CNMRiH_Player::SetSpawnWeapon
Signature:   void CNMRiH_Player::SetSpawnWeapon(string, int)
Description: Sets starting weapon when player spawns, with weapon classname, and ammo percent as integer.

Function:    CNMRiH_Player::SetSpeedModifier
Signature:   void CNMRiH_Player::SetSpeedModifier(float)
Description: Sets overall player speed modifier, applied last.

Function:    CNMRiH_Player::SetSpeedOverride
Signature:   void CNMRiH_Player::SetSpeedOverride(float)
Description: Overrides player speed to an absolute value, ignoring all modifiers.

Function:    CNMRiH_Player::SetStamina
Signature:   void CNMRiH_Player::SetStamina(float)
Description: Sets player stamina.

Function:    CNMRiH_Player::SetUsingProgressTrigger
Signature:   void CNMRiH_Player::SetUsingProgressTrigger(bool)
Description: Sets the state of player using a tool.

Function:    CNMRiH_Player::ShouldIgnoreFallDamage
Signature:   bool CNMRiH_Player::ShouldIgnoreFallDamage()
Description: Returns true if player should ignore fall damage.

Function:    CNMRiH_Player::StopBleedingOut
Signature:   void CNMRiH_Player::StopBleedingOut()
Description: Stops bleeding.

Function:    CNMRiH_Player::ThrowAllAmmo
Signature:   void CNMRiH_Player::ThrowAllAmmo()
Description: Throws all ammo that player owns.

Function:    CNMRiH_Player::ThrowAllCustomItems
Signature:   void CNMRiH_Player::ThrowAllCustomItems()
Description: Throws all custom items that player owns.

Function:    CNMRiH_Player::ThrowAllWeapons
Signature:   void CNMRiH_Player::ThrowAllWeapons()
Description: Throws all weapons that player owns.

Function:    CNMRiH_Player::VoiceCommand
Signature:   void CNMRiH_Player::VoiceCommand(int, bool)
Description: Tries a voice command, with boolean parameter for playing it regardless of cooldown.

Function:    CNMRiH_WeaponBase::AllowsSelectiveFire
Signature:   bool CNMRiH_WeaponBase::AllowsSelectiveFire()
Description: Returns true if the weapon allows different fire modes.

Function:    CNMRiH_WeaponBase::AllowsSuicide
Signature:   bool CNMRiH_WeaponBase::AllowsSuicide()

Function:    CNMRiH_WeaponBase::CanIronsight
Signature:   bool CNMRiH_WeaponBase::CanIronsight()

Function:    CNMRiH_WeaponBase::ClearIconOverride
Signature:   void CNMRiH_WeaponBase::ClearIconOverride()
Description: Resets icon back to default.

Function:    CNMRiH_WeaponBase::ClearLabelOverride
Signature:   void CNMRiH_WeaponBase::ClearLabelOverride()
Description: Resets label back to default.

Function:    CNMRiH_WeaponBase::ClearShootSoundOverride
Signature:   void CNMRiH_WeaponBase::ClearShootSoundOverride(string)
Description: Clears shoot sound override by key name.

Function:    CNMRiH_WeaponBase::ClearViewModelOverride
Signature:   void CNMRiH_WeaponBase::ClearViewModelOverride()
Description: Resets viewmodel back to default.

Function:    CNMRiH_WeaponBase::ClearWeightOverride
Signature:   void CNMRiH_WeaponBase::ClearWeightOverride()
Description: Resets physical weight back to default.

Function:    CNMRiH_WeaponBase::ClearWorldModelOverride
Signature:   void CNMRiH_WeaponBase::ClearWorldModelOverride()
Description: Resets world model back to default.

Function:    CNMRiH_WeaponBase::GetBloodCount
Signature:   int CNMRiH_WeaponBase::GetBloodCount()
Description: Returns visual bloodiness level.

Function:    CNMRiH_WeaponBase::GetIronsightPlayerSpeed
Signature:   float CNMRiH_WeaponBase::GetIronsightPlayerSpeed()
Description: Returns player movement speed while in ironsights.

Function:    CNMRiH_WeaponBase::GetMaxThrowDistance
Signature:   int CNMRiH_WeaponBase::GetMaxThrowDistance()
Description: Returns calculated distance for the weapon throw.

Function:    CNMRiH_WeaponBase::GetThrower
Signature:   handle CNMRiH_WeaponBase::GetThrower()
Description: Returns handle to weapon thrower.

Function:    CNMRiH_WeaponBase::GetViewModelOverride
Signature:   string CNMRiH_WeaponBase::GetViewModelOverride()
Description: Returns viewmodel override if it's set, empty string otherwise.

Function:    CNMRiH_WeaponBase::GetWeaponID
Signature:   int CNMRiH_WeaponBase::GetWeaponID()
Description: Returns weapon ID.

Function:    CNMRiH_WeaponBase::GetWorldModelOverride
Signature:   string CNMRiH_WeaponBase::GetWorldModelOverride()
Description: Returns world model override if it's set, empty string otherwise.

Function:    CNMRiH_WeaponBase::HasFirstDrawActivity
Signature:   bool CNMRiH_WeaponBase::HasFirstDrawActivity()
Description: Returns true if this weapon has an initial draw animation, e.g. pulling back the hammer on pistols.

Function:    CNMRiH_WeaponBase::IsAttacking
Signature:   bool CNMRiH_WeaponBase::IsAttacking()

Function:    CNMRiH_WeaponBase::IsBashActiveTimeExpired
Signature:   bool CNMRiH_WeaponBase::IsBashActiveTimeExpired()
Description: Returns true if the shove cooldown has expired.

Function:    CNMRiH_WeaponBase::IsDry
Signature:   bool CNMRiH_WeaponBase::IsDry()
Description: Returns true if the current magazine is empty.

Function:    CNMRiH_WeaponBase::IsFlashlightAllowed
Signature:   bool CNMRiH_WeaponBase::IsFlashlightAllowed()

Function:    CNMRiH_WeaponBase::IsFlashlightOn
Signature:   bool CNMRiH_WeaponBase::IsFlashlightOn()

Function:    CNMRiH_WeaponBase::IsIdle
Signature:   bool CNMRiH_WeaponBase::IsIdle()

Function:    CNMRiH_WeaponBase::IsIronsighted
Signature:   bool CNMRiH_WeaponBase::IsIronsighted()

Function:    CNMRiH_WeaponBase::IsShoveStab
Signature:   bool CNMRiH_WeaponBase::IsShoveStab()
Description: Returns true if the shove does stab, i.e. bayonet.

Function:    CNMRiH_WeaponBase::SetIconOverride
Signature:   void CNMRiH_WeaponBase::SetIconOverride(string)
Description: Overrides icon in the inventory wheel.

Function:    CNMRiH_WeaponBase::SetLabelOverride
Signature:   void CNMRiH_WeaponBase::SetLabelOverride(string)
Description: Overrides label in the inventory wheel.

Function:    CNMRiH_WeaponBase::SetShootSoundOverride
Signature:   void CNMRiH_WeaponBase::SetShootSoundOverride(string, string)
Description: Overrides shoot sound, with parameters of key name and sound name. For example: SetShootSoundOverride("single_shot", "Weapon_1911.Single"). Available keys: empty, single_shot, single_shot_npc, double_shot, double_shot_npc, burst, reload, reload_npc, melee_miss, melee_hit, melee_hit_world, special1, special2, special3, taunt, deploy

Function:    CNMRiH_WeaponBase::SetViewModelOverride
Signature:   void CNMRiH_WeaponBase::SetViewModelOverride(string)
Description: Overrides viewmodel, with string parameter for model name. Use with caution, sequences on the new model should match the existing weapon viewmodel!

Function:    CNMRiH_WeaponBase::SetWeightOverride
Signature:   void CNMRiH_WeaponBase::SetWeightOverride(int)
Description: Overrides physical weight.

Function:    CNMRiH_WeaponBase::SetWorldModelOverride
Signature:   void CNMRiH_WeaponBase::SetWorldModelOverride(string)
Description: Overrides world model, with string parameter for model name.

Function:    CNMRiH_WeaponBase::UsesTacticalReload
Signature:   bool CNMRiH_WeaponBase::UsesTacticalReload()
Description: Returns true if this weapon can be reloaded while having a full magazine.

Function:    CNavMesh::FindNavAreaAlongRay
Signature:   handle CNavMesh::FindNavAreaAlongRay(Vector, Vector, handle)
Description: Returns nav area from ray.

Function:    CNavMesh::GetAllAreas
Signature:   void CNavMesh::GetAllAreas(handle)
Description: Fills table with all areas in the nav mesh.

Function:    CNavMesh::GetAreasWithAttributes
Signature:   void CNavMesh::GetAreasWithAttributes(int, handle)
Description: Fills table with all areas that have specified NAV_MESH_* attributes.

Function:    CNavMesh::GetNavArea
Signature:   handle CNavMesh::GetNavArea(Vector, float)
Description: Given a position, return the nav area that IsOverlapping and is *immediately* beneath it.

Function:    CNavMesh::GetNavAreaByID
Signature:   handle CNavMesh::GetNavAreaByID(int)
Description: Given an ID, return the associated area.

Function:    CNavMesh::GetNavAreaCount
Signature:   int CNavMesh::GetNavAreaCount()
Description: Returns total number of nav areas.

Function:    CNavMesh::GetNavAreasFromBuildPath
Signature:   bool CNavMesh::GetNavAreasFromBuildPath(handle, handle, Vector, float, int, bool, handle)
Description: Fills table with areas from a path. Returns whether a path was found. If 'goalArea' is null, will compute a path as close as possible to 'goalPos'.

Function:    CNavMesh::GetNavAreasInRadius
Signature:   void CNavMesh::GetNavAreasInRadius(Vector, float, handle)
Description: Fills table with areas within radius of given position.

Function:    CNavMesh::GetNavAreasOverlappingEntityExtent
Signature:   void CNavMesh::GetNavAreasOverlappingEntityExtent(handle, handle)
Description: Fills table with areas overlapping entity's extent.

Function:    CNavMesh::GetNearestNavArea
Signature:   handle CNavMesh::GetNearestNavArea(Vector, float, bool, bool)
Description: Given a position in the world, return the nav area that is closest, and at the same height, or beneath it. Used to find initial area if we start off of the mesh.

Function:    CNavMesh::GetObstructingEntities
Signature:   void CNavMesh::GetObstructingEntities(handle)
Description: Fills table with all obstructing entities.

Function:    CNavMesh::NavAreaBuildPath
Signature:   bool CNavMesh::NavAreaBuildPath(handle, handle, Vector, float, int, bool)
Description: Returns true if a path exists. If 'goalArea' is null, will compute a path as close as possible to 'goalPos'.

Function:    CNavMesh::NavAreaTravelDistance
Signature:   float CNavMesh::NavAreaTravelDistance(handle, handle, float)
Description: Computes distance between two areas. Returns -1 if can't reach 'goalArea' from 'startArea'.

Function:    CNavMesh::RegisterAvoidanceObstacle
Signature:   void CNavMesh::RegisterAvoidanceObstacle(handle)

Function:    CNavMesh::UnregisterAvoidanceObstacle
Signature:   void CNavMesh::UnregisterAvoidanceObstacle(handle)

Function:    CNetPropManager::GetPropArraySize
Signature:   int CNetPropManager::GetPropArraySize(handle, string)
Description: Returns the size of an array.

Function:    CNetPropManager::GetPropEntity
Signature:   handle CNetPropManager::GetPropEntity(handle, string)
Description: Reads an entity.

Function:    CNetPropManager::GetPropEntityArray
Signature:   handle CNetPropManager::GetPropEntityArray(handle, string, int)
Description: Reads an entity from an array.

Function:    CNetPropManager::GetPropFloat
Signature:   float CNetPropManager::GetPropFloat(handle, string)
Description: Reads a float.

Function:    CNetPropManager::GetPropFloatArray
Signature:   float CNetPropManager::GetPropFloatArray(handle, string, int)
Description: Reads a float from an array.

Function:    CNetPropManager::GetPropInt
Signature:   int CNetPropManager::GetPropInt(handle, string)
Description: Reads an integer.

Function:    CNetPropManager::GetPropIntArray
Signature:   int CNetPropManager::GetPropIntArray(handle, string, int)
Description: Reads an integer from an array.

Function:    CNetPropManager::GetPropString
Signature:   string CNetPropManager::GetPropString(handle, string)
Description: Reads a string.

Function:    CNetPropManager::GetPropStringArray
Signature:   string CNetPropManager::GetPropStringArray(handle, string, int)
Description: Reads a string from an array.

Function:    CNetPropManager::GetPropType
Signature:   string CNetPropManager::GetPropType(handle, string)
Description: Returns the netprop type as a string.

Function:    CNetPropManager::GetPropVector
Signature:   Vector CNetPropManager::GetPropVector(handle, string)
Description: Reads a 3D vector.

Function:    CNetPropManager::GetPropVectorArray
Signature:   Vector CNetPropManager::GetPropVectorArray(handle, string, int)
Description: Reads a 3D vector from an array.

Function:    CNetPropManager::HasProp
Signature:   bool CNetPropManager::HasProp(handle, string)
Description: Checks if netprop/datafield exists.

Function:    CNetPropManager::SetPropEntity
Signature:   void CNetPropManager::SetPropEntity(handle, string, handle)
Description: Sets an entity.

Function:    CNetPropManager::SetPropEntityArray
Signature:   void CNetPropManager::SetPropEntityArray(handle, string, handle, int)
Description: Sets an entity in an array.

Function:    CNetPropManager::SetPropFloat
Signature:   void CNetPropManager::SetPropFloat(handle, string, float)
Description: Sets to the specified float.

Function:    CNetPropManager::SetPropFloatArray
Signature:   void CNetPropManager::SetPropFloatArray(handle, string, float, int)
Description: Sets a float in an array.

Function:    CNetPropManager::SetPropInt
Signature:   void CNetPropManager::SetPropInt(handle, string, int)
Description: Sets to the specified integer.

Function:    CNetPropManager::SetPropIntArray
Signature:   void CNetPropManager::SetPropIntArray(handle, string, int, int)
Description: Sets an integer in an array.

Function:    CNetPropManager::SetPropString
Signature:   void CNetPropManager::SetPropString(handle, string, string)
Description: Sets to the specified string.

Function:    CNetPropManager::SetPropStringArray
Signature:   void CNetPropManager::SetPropStringArray(handle, string, string, int)
Description: Sets a string in an array.

Function:    CNetPropManager::SetPropVector
Signature:   void CNetPropManager::SetPropVector(handle, string, Vector)
Description: Sets to the specified vector.

Function:    CNetPropManager::SetPropVectorArray
Signature:   void CNetPropManager::SetPropVectorArray(handle, string, Vector, int)
Description: Sets a 3D vector in an array.

Function:    CObjective::GetDescription
Signature:   string CObjective::GetDescription()

Function:    CObjective::GetId
Signature:   int CObjective::GetId()

Function:    CObjective::GetName
Signature:   string CObjective::GetName()

Function:    CObjective::GetObjectiveBoundary
Signature:   handle CObjective::GetObjectiveBoundary()
Description: Returns entity handle to current objective boundary.

Function:    CObjective::GetObjectiveBoundaryName
Signature:   string CObjective::GetObjectiveBoundaryName()
Description: Returns name of the current objective boundary.

Function:    CObjective::IsAntiObjective
Signature:   bool CObjective::IsAntiObjective()

Function:    CObjective::SetDescription
Signature:   void CObjective::SetDescription(string)

Function:    CObjectiveManager::CompleteCurrentObjective
Signature:   void CObjectiveManager::CompleteCurrentObjective(string)
Description: Completes current objective, with targetname parameter of forced extraction zone.

Function:    CObjectiveManager::GetCurrentObjective
Signature:   handle CObjectiveManager::GetCurrentObjective()
Description: Returns current objective instance.

Function:    CObjectiveManager::GetCurrentObjectiveIndex
Signature:   int CObjectiveManager::GetCurrentObjectiveIndex()
Description: Returns current objective index.

Function:    CObjectiveManager::GetObjectiveById
Signature:   handle CObjectiveManager::GetObjectiveById(int)
Description: Returns objective instance by ID.

Function:    CObjectiveManager::GetObjectiveByIndex
Signature:   handle CObjectiveManager::GetObjectiveByIndex(int)
Description: Returns objective instance by index.

Function:    CObjectiveManager::GetObjectiveByName
Signature:   handle CObjectiveManager::GetObjectiveByName(string)
Description: Returns objective instance by name.

Function:    CObjectiveManager::GetObjectiveChain
Signature:   void CObjectiveManager::GetObjectiveChain(handle)
Description: Fills array with current objective chain.

Function:    CObjectiveManager::GetObjectiveCount
Signature:   int CObjectiveManager::GetObjectiveCount()
Description: Returns total objective count.

Function:    CObjectiveManager::IsCompleted
Signature:   bool CObjectiveManager::IsCompleted()
Description: Returns true if objectives are complete.

Function:    CObjectiveManager::IsFailed
Signature:   bool CObjectiveManager::IsFailed()
Description: Returns true if objectives failed.

Function:    CObjectiveManager::SendObjectiveNotify
Signature:   void CObjectiveManager::SendObjectiveNotify(string)
Description: Broadcasts objective notification to all clients, with string parameter of description.

Function:    CObjectiveManager::SendObjectiveNotifyToPlayer
Signature:   void CObjectiveManager::SendObjectiveNotifyToPlayer(handle, string)
Description: Sends individual objective notification to a given player, with string parameter of description.

Function:    CObjectiveManager::SendObjectiveUpdate
Signature:   void CObjectiveManager::SendObjectiveUpdate(string)
Description: Silently updates objective HUD for all clients, with string parameter of description.

Function:    CObjectiveManager::SendObjectiveUpdateToPlayer
Signature:   void CObjectiveManager::SendObjectiveUpdateToPlayer(handle, string)
Description: Silently updates individual objective HUD for a given player, with string parameter of description.

Function:    CObjectiveManager::StartNextObjective
Signature:   void CObjectiveManager::StartNextObjective()
Description: Starts next objective on the chain.

Function:    COverlord_Wave_Controller::CouldJoinServerAndSpawn
Signature:   bool COverlord_Wave_Controller::CouldJoinServerAndSpawn()
Description: Returns true if players are able to spawn after joining the server.

Function:    COverlord_Wave_Controller::DidComplete
Signature:   bool COverlord_Wave_Controller::DidComplete()
Description: Returns true if completed.

Function:    COverlord_Wave_Controller::DidFail
Signature:   bool COverlord_Wave_Controller::DidFail()
Description: Returns true if failed.

Function:    COverlord_Wave_Controller::GetNPCsKilled
Signature:   int COverlord_Wave_Controller::GetNPCsKilled()
Description: Returns count of NPCs killed.

Function:    COverlord_Wave_Controller::GetNPCsSpawned
Signature:   int COverlord_Wave_Controller::GetNPCsSpawned()
Description: Returns count of NPCs spawned.

Function:    COverlord_Wave_Controller::GetStopWaveNumber
Signature:   int COverlord_Wave_Controller::GetStopWaveNumber()
Description: Get stop wave number.

Function:    COverlord_Wave_Controller::GetWaveNumber
Signature:   int COverlord_Wave_Controller::GetWaveNumber()
Description: Get current wave number.

Function:    COverlord_Wave_Controller::GetWaveProgressPercent
Signature:   float COverlord_Wave_Controller::GetWaveProgressPercent()
Description: Returns percentage of current wave progress.

Function:    COverlord_Wave_Controller::IsCurrentWaveResupply
Signature:   bool COverlord_Wave_Controller::IsCurrentWaveResupply()
Description: Returns true if current wave is resupply wave.

Function:    COverlord_Wave_Controller::IsWaveResupply
Signature:   bool COverlord_Wave_Controller::IsWaveResupply(int)
Description: Returns true if waveNum is resupply wave.

Function:    COverlord_Wave_Controller::ResetPlayerTokens
Signature:   void COverlord_Wave_Controller::ResetPlayerTokens()
Description: Resets respawn tokens on all players.

Function:    COverlord_Zombie_Helper::DisableSpawning
Signature:   void COverlord_Zombie_Helper::DisableSpawning()

Function:    COverlord_Zombie_Helper::EnableSpawning
Signature:   void COverlord_Zombie_Helper::EnableSpawning()

Function:    COverlord_Zombie_Helper::Spawn
Signature:   void COverlord_Zombie_Helper::Spawn(int, string)
Description: Instantly spawns zombies across all active spawn brushes. Optionally specify a spawn target name.

Function:    COverlord_Zombie_Helper::SpawnIgnoreVisibility
Signature:   void COverlord_Zombie_Helper::SpawnIgnoreVisibility(int, string)
Description: Same as Spawn, but ignores visiblity checks.

Function:    CPointMessageMultiplayer::Disable
Signature:   void CPointMessageMultiplayer::Disable()
Description: Stops displaying the text.

Function:    CPointMessageMultiplayer::Enable
Signature:   void CPointMessageMultiplayer::Enable()
Description: Starts displaying the text for players within the radius.

Function:    CPointMessageMultiplayer::SetFont
Signature:   void CPointMessageMultiplayer::SetFont(string)
Description: Sets font (from ClientScheme.res).

Function:    CPointMessageMultiplayer::SetFontDropShadow
Signature:   void CPointMessageMultiplayer::SetFontDropShadow(bool)
Description: When true, font will have a drop shadow.

Function:    CPointMessageMultiplayer::SetFontProportional
Signature:   void CPointMessageMultiplayer::SetFontProportional(bool)
Description: When true, text will scale to user resolution.

Function:    CPointMessageMultiplayer::SetHeightOffset
Signature:   void CPointMessageMultiplayer::SetHeightOffset(float)
Description: When SetShouldOffsetPosition is set to true, this allows you to set message offset relative to entity bounds. For example, 0.5 would print at the center of the hull, while 1.25 prints slightly over the top.

Function:    CPointMessageMultiplayer::SetMessage
Signature:   void CPointMessageMultiplayer::SetMessage(string)
Description: Sets message text, supports localization strings.

Function:    CPointMessageMultiplayer::SetRadius
Signature:   void CPointMessageMultiplayer::SetRadius(float)
Description: Sets distance a player must be within to see this message. -1 to show everywhere.

Function:    CPointMessageMultiplayer::SetShouldOffsetPosition
Signature:   void CPointMessageMultiplayer::SetShouldOffsetPosition(bool)
Description: When true, text position will be offset relative to entity bounds. Works best when following parented entities. When false, use entity origin.

Function:    CPointMessageMultiplayer::SetTextColor
Signature:   void CPointMessageMultiplayer::SetTextColor(int, int, int)
Description: Sets text color, with RGB parameters.

Function:    CPointViewControlMultiplayer::AddPlayer
Signature:   void CPointViewControlMultiplayer::AddPlayer(handle)
Description: Adds the given player as a viewer for this entity. Starts the camera if it's off.

Function:    CPointViewControlMultiplayer::Disable
Signature:   void CPointViewControlMultiplayer::Disable()
Description: Disables the entity, and stops controlling the view for all players. The viewer list will be emptied.

Function:    CPointViewControlMultiplayer::Enable
Signature:   void CPointViewControlMultiplayer::Enable()
Description: Enables the entity, and starts controlling the player's view. If the list of viewers is empty, all players will be added.

Function:    CPointViewControlMultiplayer::RemovePlayer
Signature:   void CPointViewControlMultiplayer::RemovePlayer(handle)
Description: Removes the given player as a viewer for this entity.

Function:    CPointWorldText::SetColor
Signature:   void CPointWorldText::SetColor(int, int, int, int)
Description: Sets the message color, with RGBA parameters.

Function:    CPointWorldText::SetFont
Signature:   void CPointWorldText::SetFont(int)
Description: Sets the font, with index parameter.

Function:    CPointWorldText::SetOrientation
Signature:   void CPointWorldText::SetOrientation(int)
Description: Sets the orientation. 0: Stationary, 1: Face player, 2: Ignore pitch

Function:    CPointWorldText::SetRainbow
Signature:   void CPointWorldText::SetRainbow(bool)
Description: Enables rainbow text effect.

Function:    CPointWorldText::SetText
Signature:   void CPointWorldText::SetText(string)
Description: Sets the message text.

Function:    CPointWorldText::SetTextSize
Signature:   void CPointWorldText::SetTextSize(float)
Description: Sets the message text size.

Function:    CPointWorldText::SetTextSpacingX
Signature:   void CPointWorldText::SetTextSpacingX(float)
Description: Sets the spacing between letters along the X axis.

Function:    CPointWorldText::SetTextSpacingY
Signature:   void CPointWorldText::SetTextSpacingY(float)
Description: Sets the spacing between letters along the Y axis.

Function:    CRagdollProp::GetRagdollObject
Signature:   handle CRagdollProp::GetRagdollObject(int)
Description: Gets the ragdoll object of the specified index.

Function:    CRagdollProp::GetRagdollObjectCount
Signature:   int CRagdollProp::GetRagdollObjectCount()
Description: Gets the number of ragdoll objects on this ragdoll.

Function:    CRagdollProp::SetSourceClassName
Signature:   void CRagdollProp::SetSourceClassName(string)
Description: Sets the ragdoll's source classname.

Function:    CRandomSpawnController::GetSpawnLimits
Signature:   void CRandomSpawnController::GetSpawnLimits(handle)
Description: Fills table with spawn limits.

Function:    CRandomSpawnController::IsSpawnOfTypeAllowed
Signature:   bool CRandomSpawnController::IsSpawnOfTypeAllowed(string)
Description: Returns true if this classname can be spawned.

Function:    CRandom_Spawner::GetSpawnedItem
Signature:   handle CRandom_Spawner::GetSpawnedItem()
Description: Returns a handle to most recent spawned item that was created by this spawner.

Function:    CRandom_Spawner::SetDisallowInitialSpawn
Signature:   void CRandom_Spawner::SetDisallowInitialSpawn(bool)
Description: When true, don't create an item on spawn. Overrides map spawnflags.

Function:    CRandom_Spawner::SpawnItem
Signature:   handle CRandom_Spawner::SpawnItem(string)
Description: Spawns an item by classname or a keyname, ignores random spawner controller. Returns handle to a spawned item.

Function:    CRandom_Spawner::SpawnRandomItem
Signature:   handle CRandom_Spawner::SpawnRandomItem()
Description: Spawns a random item based on current item weights, respects random spawner controller. Returns handle to a spawned item.

Function:    CRulesetManager::ApplyCvars
Signature:   void CRulesetManager::ApplyCvars(string)
Description: Applies cvars by string in "<cvar> <value>" format, and optionally with ';' delimiter for multiple cvars.

Function:    CRulesetManager::RevertCvar
Signature:   void CRulesetManager::RevertCvar(string)
Description: Reverts cvar by name to ruleset value (when available), or default.

Function:    CSceneEntity::EstimateLength
Signature:   float CSceneEntity::EstimateLength()
Description: Returns length of this scene in seconds.

Function:    CSceneEntity::FindNamedEntity
Signature:   handle CSceneEntity::FindNamedEntity(string)
Description: given an entity reference, such as !target, get actual entity from scene object

Function:    CSceneEntity::IsPaused
Signature:   bool CSceneEntity::IsPaused()
Description: If this scene is currently paused.

Function:    CSceneEntity::IsPlayingBack
Signature:   bool CSceneEntity::IsPlayingBack()
Description: If this scene is currently playing.

Function:    CSceneEntity::LoadSceneFromString
Signature:   bool CSceneEntity::LoadSceneFromString(string, string)
Description: given a dummy scene name and a vcd string, load the scene

Function:    CSceneListManager::GetScene
Signature:   handle CSceneListManager::GetScene(int)
Description: Gets the specified scene index from this manager.

Function:    CScriptKeyValues::FindKey
Signature:   handle CScriptKeyValues::FindKey(string)
Description: Given a KeyValues object and a key name, find a KeyValues object associated with the key name

Function:    CScriptKeyValues::FindOrCreateKey
Signature:   handle CScriptKeyValues::FindOrCreateKey(string)
Description: Given a KeyValues object and a key name, find or create a KeyValues object associated with the key name

Function:    CScriptKeyValues::GetBool
Signature:   bool CScriptKeyValues::GetBool()
Description: Given a KeyValues object, return its own associated bool value

Function:    CScriptKeyValues::GetFirstSubKey
Signature:   handle CScriptKeyValues::GetFirstSubKey()
Description: Given a KeyValues object, return the first sub key object

Function:    CScriptKeyValues::GetFloat
Signature:   float CScriptKeyValues::GetFloat()
Description: Given a KeyValues object, return its own associated float value

Function:    CScriptKeyValues::GetInt
Signature:   int CScriptKeyValues::GetInt()
Description: Given a KeyValues object, return its own associated integer value

Function:    CScriptKeyValues::GetKeyBool
Signature:   bool CScriptKeyValues::GetKeyBool(string)
Description: Given a KeyValues object and a key name, return associated bool value

Function:    CScriptKeyValues::GetKeyFloat
Signature:   float CScriptKeyValues::GetKeyFloat(string)
Description: Given a KeyValues object and a key name, return associated float value

Function:    CScriptKeyValues::GetKeyInt
Signature:   int CScriptKeyValues::GetKeyInt(string)
Description: Given a KeyValues object and a key name, return associated integer value

Function:    CScriptKeyValues::GetKeyString
Signature:   string CScriptKeyValues::GetKeyString(string)
Description: Given a KeyValues object and a key name, return associated string value

Function:    CScriptKeyValues::GetName
Signature:   string CScriptKeyValues::GetName()
Description: Given a KeyValues object, return its name

Function:    CScriptKeyValues::GetNextKey
Signature:   handle CScriptKeyValues::GetNextKey()
Description: Given a KeyValues object, return the next key object in a sub key group

Function:    CScriptKeyValues::GetString
Signature:   string CScriptKeyValues::GetString()
Description: Given a KeyValues object, return its own associated string value

Function:    CScriptKeyValues::IsKeyEmpty
Signature:   bool CScriptKeyValues::IsKeyEmpty(string)
Description: Given a KeyValues object and a key name, return true if key name has no value

Function:    CScriptKeyValues::ReleaseKeyValues
Signature:   void CScriptKeyValues::ReleaseKeyValues()
Description: Given a root KeyValues object, release its contents

Function:    CScriptKeyValues::SetBool
Signature:   void CScriptKeyValues::SetBool(bool)
Description: Given a KeyValues object, set its own associated bool value

Function:    CScriptKeyValues::SetFloat
Signature:   void CScriptKeyValues::SetFloat(float)
Description: Given a KeyValues object, set its own associated float value

Function:    CScriptKeyValues::SetInt
Signature:   void CScriptKeyValues::SetInt(int)
Description: Given a KeyValues object, set its own associated integer value

Function:    CScriptKeyValues::SetKeyBool
Signature:   void CScriptKeyValues::SetKeyBool(string, bool)
Description: Given a KeyValues object and a key name, set associated bool value

Function:    CScriptKeyValues::SetKeyFloat
Signature:   void CScriptKeyValues::SetKeyFloat(string, float)
Description: Given a KeyValues object and a key name, set associated float value

Function:    CScriptKeyValues::SetKeyInt
Signature:   void CScriptKeyValues::SetKeyInt(string, int)
Description: Given a KeyValues object and a key name, set associated integer value

Function:    CScriptKeyValues::SetKeyString
Signature:   void CScriptKeyValues::SetKeyString(string, string)
Description: Given a KeyValues object and a key name, set associated string value

Function:    CScriptKeyValues::SetName
Signature:   void CScriptKeyValues::SetName(string)
Description: Given a KeyValues object, set its name

Function:    CScriptKeyValues::SetString
Signature:   void CScriptKeyValues::SetString(string)
Description: Given a KeyValues object, set its own associated string value

Function:    CScriptKeyValues::SubKeysToTable
Signature:   void CScriptKeyValues::SubKeysToTable(handle)
Description: Converts to script table.

Function:    CScriptKeyValues::TableToSubKeys
Signature:   void CScriptKeyValues::TableToSubKeys(handle)
Description: Converts a script table to KeyValues.

Function:    CScriptNavArea::AddIncomingConnection
Signature:   void CScriptNavArea::AddIncomingConnection(handle, int)
Description: The area 'source' is connected to us along our 'incomingEdgeDir' edge.

Function:    CScriptNavArea::ComputeClosestPointInPortal
Signature:   Vector CScriptNavArea::ComputeClosestPointInPortal(handle, int, Vector)
Description: Compute closest point within the 'portal' between to adjacent areas.

Function:    CScriptNavArea::ComputeDirection
Signature:   int CScriptNavArea::ComputeDirection(Vector)
Description: Returns direction from this area to the given point.

Function:    CScriptNavArea::ConnectTo
Signature:   void CScriptNavArea::ConnectTo(handle, int)
Description: Connect this area to given area in given direction.

Function:    CScriptNavArea::Contains
Signature:   bool CScriptNavArea::Contains(handle)
Description: Returns true if area completely contains other area.

Function:    CScriptNavArea::ContainsOrigin
Signature:   bool CScriptNavArea::ContainsOrigin(Vector)
Description: Returns true if given point is on or above this area, but no others

Function:    CScriptNavArea::Disconnect
Signature:   void CScriptNavArea::Disconnect(handle)
Description: Disconnect this area from given area.

Function:    CScriptNavArea::FindRandomSpot
Signature:   Vector CScriptNavArea::FindRandomSpot()

Function:    CScriptNavArea::GetAdjacentArea
Signature:   handle CScriptNavArea::GetAdjacentArea(int, int)
Description: Returns number of connected areas in given direction.

Function:    CScriptNavArea::GetAttributes
Signature:   int CScriptNavArea::GetAttributes()

Function:    CScriptNavArea::GetAvoidanceObstacleHeight
Signature:   float CScriptNavArea::GetAvoidanceObstacleHeight()
Description: Returns the maximum height of the obstruction above the ground.

Function:    CScriptNavArea::GetCenter
Signature:   Vector CScriptNavArea::GetCenter()

Function:    CScriptNavArea::GetCorner
Signature:   Vector CScriptNavArea::GetCorner(int)
Description: Returns the coordinates of the area's corner.

Function:    CScriptNavArea::GetDistanceSquaredToPoint
Signature:   float CScriptNavArea::GetDistanceSquaredToPoint(Vector)
Description: Returns shortest distance squared between point and this area.

Function:    CScriptNavArea::GetHidingSpots
Signature:   void CScriptNavArea::GetHidingSpots(handle)
Description: Fills table with nested tables containing properties from available hiding spots.

Function:    CScriptNavArea::GetID
Signature:   int CScriptNavArea::GetID()
Description: Returns this area's unique ID.

Function:    CScriptNavArea::GetIncomingConnections
Signature:   void CScriptNavArea::GetIncomingConnections(int, handle)
Description: Get areas connected TO this area by a ONE-WAY link (i.e. we have no connection back to them).

Function:    CScriptNavArea::GetParent
Signature:   handle CScriptNavArea::GetParent()
Description: Returns the area just prior to this on the search path.

Function:    CScriptNavArea::GetParentHow
Signature:   int CScriptNavArea::GetParentHow()
Description: Returns nav traverse type on how we get from parent to us.

Function:    CScriptNavArea::GetPlayerCount
Signature:   int CScriptNavArea::GetPlayerCount(int)
Description: Returns number of players of given team currently within this area (team of zero means any/all).

Function:    CScriptNavArea::GetRandomAdjacentArea
Signature:   handle CScriptNavArea::GetRandomAdjacentArea(int)

Function:    CScriptNavArea::GetSizeX
Signature:   float CScriptNavArea::GetSizeX()

Function:    CScriptNavArea::GetSizeY
Signature:   float CScriptNavArea::GetSizeY()

Function:    CScriptNavArea::GetZ
Signature:   float CScriptNavArea::GetZ(Vector)
Description: Returns Z of area at (x,y) of 'pos', trilinear interpolation of Z values at quad edges, note that pos.z is not used.

Function:    CScriptNavArea::HasAttributes
Signature:   bool CScriptNavArea::HasAttributes(int)

Function:    CScriptNavArea::HasAvoidanceObstacle
Signature:   bool CScriptNavArea::HasAvoidanceObstacle(float)
Description: Returns true if there is a large, immobile object obstructing this area.

Function:    CScriptNavArea::IsBlocked
Signature:   bool CScriptNavArea::IsBlocked(int, bool)
Description: Returns true if area is blocked, with parameters of team ID and boolean for ignoring nav blockers.

Function:    CScriptNavArea::IsCompletelyVisible
Signature:   bool CScriptNavArea::IsCompletelyVisible(handle)
Description: Returns true if given area is completely visible from somewhere in this area.

Function:    CScriptNavArea::IsCompletelyVisibleToTeam
Signature:   bool CScriptNavArea::IsCompletelyVisibleToTeam(int)
Description: Returns true if given area is completely visible from somewhere in this area by someone on the team.

Function:    CScriptNavArea::IsConnected
Signature:   bool CScriptNavArea::IsConnected(handle, int)
Description: Returns true if given area is connected in given direction, if dir == NUM_DIRECTIONS, check all directions (direction is unknown).

Function:    CScriptNavArea::IsCoplanar
Signature:   bool CScriptNavArea::IsCoplanar(handle)
Description: Returns true if this area and given area are approximately co-planar.

Function:    CScriptNavArea::IsDamaging
Signature:   bool CScriptNavArea::IsDamaging()
Description: Returns true if continuous damage (i.e. fire) is in this area.

Function:    CScriptNavArea::IsDegenerate
Signature:   bool CScriptNavArea::IsDegenerate()
Description: Returns true if this area is badly formed.

Function:    CScriptNavArea::IsEdge
Signature:   bool CScriptNavArea::IsEdge(int)
Description: Returns true if there are no bi-directional links on the given side.

Function:    CScriptNavArea::IsFlat
Signature:   bool CScriptNavArea::IsFlat()
Description: Returns true if this area is approximately flat.

Function:    CScriptNavArea::IsOverlapping
Signature:   bool CScriptNavArea::IsOverlapping(handle)
Description: Returns true if 'area' overlaps our 2D extents.

Function:    CScriptNavArea::IsPotentiallyVisible
Signature:   bool CScriptNavArea::IsPotentiallyVisible(handle)
Description: Returns true if given area is potentially visible from somewhere in this area.

Function:    CScriptNavArea::IsPotentiallyVisibleToTeam
Signature:   bool CScriptNavArea::IsPotentiallyVisibleToTeam(int)
Description: Returns true if any portion of this area is visible to anyone on the given team.

Function:    CScriptNavArea::IsRoughlySquare
Signature:   bool CScriptNavArea::IsRoughlySquare()
Description: Returns true if this area is approximately square.

Function:    CScriptNavArea::IsUnderwater
Signature:   bool CScriptNavArea::IsUnderwater()

Function:    CScriptNavArea::IsVisible
Signature:   bool CScriptNavArea::IsVisible(Vector)
Description: Returns true if area is visible from the given eyepoint.

Function:    CScriptNavArea::MarkAsBlocked
Signature:   void CScriptNavArea::MarkAsBlocked(int)
Description: An entity can force a nav area to be blocked.

Function:    CScriptNavArea::MarkAsDamaging
Signature:   void CScriptNavArea::MarkAsDamaging(float)
Description: Mark this area is damaging for the next 'duration' seconds.

Function:    CScriptNavArea::MarkObstacleToAvoid
Signature:   void CScriptNavArea::MarkObstacleToAvoid(float)

Function:    CScriptNavArea::RemoveAttributes
Signature:   void CScriptNavArea::RemoveAttributes(int)

Function:    CScriptNavArea::RemoveOrthogonalConnections
Signature:   void CScriptNavArea::RemoveOrthogonalConnections(int)
Description: Removes all connections in directions to left and right of specified direction.

Function:    CScriptNavArea::SetAttributes
Signature:   void CScriptNavArea::SetAttributes(int)

Function:    CScriptNavArea::UnblockArea
Signature:   void CScriptNavArea::UnblockArea()
Description: Clear blocked status for the given team(s).

Function:    CSound::DoesSoundExpire
Signature:   bool CSound::DoesSoundExpire()
Description: Returns true if the sound expires.

Function:    CSound::GetOwner
Signature:   handle CSound::GetOwner()
Description: Gets the sound's owner.

Function:    CSound::GetSoundOrigin
Signature:   Vector CSound::GetSoundOrigin()
Description: Gets the sound's origin.

Function:    CSound::GetSoundReactOrigin
Signature:   Vector CSound::GetSoundReactOrigin()
Description: Gets the sound's react origin.

Function:    CSound::GetTarget
Signature:   handle CSound::GetTarget()
Description: Gets the sound's target.

Function:    CSound::IsScent
Signature:   bool CSound::IsScent()
Description: Returns true if this is a type of scent (as opposed to a sound).

Function:    CSound::IsSound
Signature:   bool CSound::IsSound()
Description: Returns true if this is a type of sound (as opposed to a scent).

Function:    CSound::IsSoundType
Signature:   bool CSound::IsSoundType(int)
Description: Returns true if the sound type is the specified type.

Function:    CSound::OccludedVolume
Signature:   float CSound::OccludedVolume()
Description: Gets the sound's occluded volume.

Function:    CSound::Reset
Signature:   void CSound::Reset()
Description: Clears the volume, type, and origin for the sound without actually removing it.

Function:    CSound::SetSoundOrigin
Signature:   void CSound::SetSoundOrigin(Vector)
Description: Sets the sound's origin.

Function:    CSound::SoundChannel
Signature:   int CSound::SoundChannel()
Description: Gets the sound's channel.

Function:    CSound::SoundContext
Signature:   int CSound::SoundContext()
Description: Gets the sound type with contexts only.

Function:    CSound::SoundExpirationTime
Signature:   float CSound::SoundExpirationTime()
Description: Gets the sound's expiration time.

Function:    CSound::SoundType
Signature:   int CSound::SoundType()
Description: Gets the raw sound type.

Function:    CSound::SoundTypeNoContext
Signature:   int CSound::SoundTypeNoContext()
Description: Gets the sound type with contexts excluded.

Function:    CSound::ValidateOwner
Signature:   bool CSound::ValidateOwner()
Description: Returns true if the sound's owner is still valid or if the sound never had an owner in the first place.

Function:    CSound::Volume
Signature:   int CSound::Volume()
Description: Gets the sound's volume.

Function:    CTakeDamageInfo::AddDamage
Signature:   void CTakeDamageInfo::AddDamage(float)
Description: Adds to the damage.

Function:    CTakeDamageInfo::AddDamageType
Signature:   void CTakeDamageInfo::AddDamageType(int)
Description: Adds to the damage type.

Function:    CTakeDamageInfo::BaseDamageIsValid
Signature:   bool CTakeDamageInfo::BaseDamageIsValid()
Description: Checks if the base damage is valid.

Function:    CTakeDamageInfo::GetAmmoName
Signature:   string CTakeDamageInfo::GetAmmoName()
Description: Gets the ammo type name.

Function:    CTakeDamageInfo::GetAmmoType
Signature:   int CTakeDamageInfo::GetAmmoType()
Description: Gets the ammo type.

Function:    CTakeDamageInfo::GetAttacker
Signature:   handle CTakeDamageInfo::GetAttacker()
Description: Gets the attacker.

Function:    CTakeDamageInfo::GetBaseDamage
Signature:   float CTakeDamageInfo::GetBaseDamage()
Description: Gets the base damage.

Function:    CTakeDamageInfo::GetDamage
Signature:   float CTakeDamageInfo::GetDamage()
Description: Gets the damage.

Function:    CTakeDamageInfo::GetDamageBonus
Signature:   float CTakeDamageInfo::GetDamageBonus()
Description: Gets the damage bonus.

Function:    CTakeDamageInfo::GetDamageCustom
Signature:   int CTakeDamageInfo::GetDamageCustom()
Description: Gets the damage custom.

Function:    CTakeDamageInfo::GetDamageForce
Signature:   Vector CTakeDamageInfo::GetDamageForce()
Description: Gets the damage force.

Function:    CTakeDamageInfo::GetDamagePosition
Signature:   Vector CTakeDamageInfo::GetDamagePosition()
Description: Gets the damage position.

Function:    CTakeDamageInfo::GetDamageStats
Signature:   int CTakeDamageInfo::GetDamageStats()
Description: Gets the damage stats.

Function:    CTakeDamageInfo::GetDamageType
Signature:   int CTakeDamageInfo::GetDamageType()
Description: Gets the damage type.

Function:    CTakeDamageInfo::GetDamagedOtherPlayers
Signature:   int CTakeDamageInfo::GetDamagedOtherPlayers()
Description: Gets whether other players have been damaged.

Function:    CTakeDamageInfo::GetInflictor
Signature:   handle CTakeDamageInfo::GetInflictor()
Description: Gets the inflictor.

Function:    CTakeDamageInfo::GetMaxDamage
Signature:   float CTakeDamageInfo::GetMaxDamage()
Description: Gets the max damage.

Function:    CTakeDamageInfo::GetPlayerPenetrationCount
Signature:   int CTakeDamageInfo::GetPlayerPenetrationCount()
Description: Gets the player penetration count.

Function:    CTakeDamageInfo::GetReportedPosition
Signature:   Vector CTakeDamageInfo::GetReportedPosition()
Description: Gets the reported damage position.

Function:    CTakeDamageInfo::GetWeapon
Signature:   handle CTakeDamageInfo::GetWeapon()
Description: Gets the weapon.

Function:    CTakeDamageInfo::IsForceFriendlyFire
Signature:   bool CTakeDamageInfo::IsForceFriendlyFire()
Description: Gets force friendly fire.

Function:    CTakeDamageInfo::ScaleDamage
Signature:   void CTakeDamageInfo::ScaleDamage(float)
Description: Scales the damage.

Function:    CTakeDamageInfo::ScaleDamageForce
Signature:   void CTakeDamageInfo::ScaleDamageForce(float)
Description: Scales the damage force.

Function:    CTakeDamageInfo::SetAmmoType
Signature:   void CTakeDamageInfo::SetAmmoType(int)
Description: Sets the ammo type.

Function:    CTakeDamageInfo::SetAttacker
Signature:   void CTakeDamageInfo::SetAttacker(handle)
Description: Sets the attacker.

Function:    CTakeDamageInfo::SetDamage
Signature:   void CTakeDamageInfo::SetDamage(float)
Description: Sets the damage.

Function:    CTakeDamageInfo::SetDamageBonus
Signature:   void CTakeDamageInfo::SetDamageBonus(float)
Description: Sets the damage bonus.

Function:    CTakeDamageInfo::SetDamageBonusWithProvider
Signature:   void CTakeDamageInfo::SetDamageBonusWithProvider(float, handle)
Description: Sets the damage bonus.

Function:    CTakeDamageInfo::SetDamageCustom
Signature:   void CTakeDamageInfo::SetDamageCustom(int)
Description: Sets the damage custom.

Function:    CTakeDamageInfo::SetDamageForce
Signature:   void CTakeDamageInfo::SetDamageForce(Vector)
Description: Sets the damage force.

Function:    CTakeDamageInfo::SetDamagePosition
Signature:   void CTakeDamageInfo::SetDamagePosition(Vector)
Description: Sets the damage position.

Function:    CTakeDamageInfo::SetDamageStats
Signature:   void CTakeDamageInfo::SetDamageStats(int)
Description: Sets the damage stats.

Function:    CTakeDamageInfo::SetDamageType
Signature:   void CTakeDamageInfo::SetDamageType(int)
Description: Sets the damage type.

Function:    CTakeDamageInfo::SetDamagedOtherPlayers
Signature:   void CTakeDamageInfo::SetDamagedOtherPlayers(int)
Description: Sets whether other players have been damaged.

Function:    CTakeDamageInfo::SetForceFriendlyFire
Signature:   void CTakeDamageInfo::SetForceFriendlyFire(bool)
Description: Sets force friendly fire.

Function:    CTakeDamageInfo::SetInflictor
Signature:   void CTakeDamageInfo::SetInflictor(handle)
Description: Sets the inflictor.

Function:    CTakeDamageInfo::SetMaxDamage
Signature:   void CTakeDamageInfo::SetMaxDamage(float)
Description: Sets the max damage.

Function:    CTakeDamageInfo::SetPlayerPenetrationCount
Signature:   void CTakeDamageInfo::SetPlayerPenetrationCount(int)
Description: Sets the player penetration count.

Function:    CTakeDamageInfo::SetReportedPosition
Signature:   void CTakeDamageInfo::SetReportedPosition(Vector)
Description: Sets the reported damage position.

Function:    CTakeDamageInfo::SetWeapon
Signature:   void CTakeDamageInfo::SetWeapon(handle)
Description: Sets the weapon.

Function:    CTakeDamageInfo::SubtractDamage
Signature:   void CTakeDamageInfo::SubtractDamage(float)
Description: Removes from the damage.

Function:    CUserCmd::GetButtons
Signature:   int CUserCmd::GetButtons()
Description: Input button state.

Function:    CUserCmd::GetCommandNumber
Signature:   int CUserCmd::GetCommandNumber()
Description: For matching server and client commands for debugging.

Function:    CUserCmd::GetForwardMove
Signature:   float CUserCmd::GetForwardMove()

Function:    CUserCmd::GetImpulse
Signature:   int CUserCmd::GetImpulse()
Description: Impulse command issued.

Function:    CUserCmd::GetMouseX
Signature:   int CUserCmd::GetMouseX()
Description: Mouse accum in x from create move.

Function:    CUserCmd::GetMouseY
Signature:   int CUserCmd::GetMouseY()
Description: Mouse accum in y from create move.

Function:    CUserCmd::GetRandomSeed
Signature:   int CUserCmd::GetRandomSeed()
Description: For shared random functions.

Function:    CUserCmd::GetSideMove
Signature:   float CUserCmd::GetSideMove()

Function:    CUserCmd::GetTickCount
Signature:   int CUserCmd::GetTickCount()
Description: The tick the client created this command.

Function:    CUserCmd::GetUpMove
Signature:   float CUserCmd::GetUpMove()

Function:    CUserCmd::GetViewAngles
Signature:   Vector CUserCmd::GetViewAngles()
Description: Player instantaneous view angles.

Function:    CUserCmd::GetWeaponSelect
Signature:   int CUserCmd::GetWeaponSelect()
Description: Current weapon id.

Function:    CUserCmd::GetWeaponSubtype
Signature:   int CUserCmd::GetWeaponSubtype()
Description: Current weapon subtype id.

Function:    CUserCmd::SetButtons
Signature:   void CUserCmd::SetButtons(int)
Description: Sets input button state.

Function:    CUserCmd::SetForwardMove
Signature:   void CUserCmd::SetForwardMove(float)

Function:    CUserCmd::SetImpulse
Signature:   void CUserCmd::SetImpulse(int)
Description: Sets impulse command issued.

Function:    CUserCmd::SetMouseX
Signature:   void CUserCmd::SetMouseX(int)
Description: Sets mouse accum in x from create move.

Function:    CUserCmd::SetMouseY
Signature:   void CUserCmd::SetMouseY(int)
Description: Sets mouse accum in y from create move.

Function:    CUserCmd::SetSideMove
Signature:   void CUserCmd::SetSideMove(float)

Function:    CUserCmd::SetUpMove
Signature:   void CUserCmd::SetUpMove(float)

Function:    CUserCmd::SetViewAngles
Signature:   void CUserCmd::SetViewAngles(Vector)
Description: Sets player instantaneous view angles.

Function:    CUserCmd::SetWeaponSelect
Signature:   void CUserCmd::SetWeaponSelect(int)
Description: Sets current weapon id.

Function:    CUserCmd::SetWeaponSubtype
Signature:   void CUserCmd::SetWeaponSubtype(int)
Description: Sets current weapon subtype id.

Function:    CVersion::GetBuildDate
Signature:   string CVersion::GetBuildDate()
Description: Returns build date.

Function:    CVersion::GetBuildNumber
Signature:   int CVersion::GetBuildNumber()
Description: Returns build number.

Function:    CVersion::GetGameTitle
Signature:   string CVersion::GetGameTitle()
Description: Returns game title.

Function:    CVersion::GetVersionLabel
Signature:   string CVersion::GetVersionLabel()
Description: Returns version label.

Function:    CalcClosestPointOnAABB
Signature:   Vector CalcClosestPointOnAABB(Vector, Vector, Vector)
Description: Returns the closest point on a bounding box.

Function:    CalcClosestPointOnLine
Signature:   Vector CalcClosestPointOnLine(Vector, Vector, Vector)
Description: Returns the closest point on a line.

Function:    CalcClosestPointOnLineSegment
Signature:   Vector CalcClosestPointOnLineSegment(Vector, Vector, Vector)
Description: Returns the closest point on a line segment.

Function:    CalcDistanceToLine
Signature:   float CalcDistanceToLine(Vector, Vector, Vector)
Description: Returns the distance to a line.

Function:    CalcDistanceToLineSegment
Signature:   float CalcDistanceToLineSegment(Vector, Vector, Vector)
Description: Returns the distance to a line segment.

Function:    CalcSqrDistanceToAABB
Signature:   float CalcSqrDistanceToAABB(Vector, Vector, Vector)
Description: Returns the squared distance to a bounding box.

Function:    CalculateBulletDamageForce
Signature:   void CalculateBulletDamageForce(handle, int, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a bullet impact.

Function:    CalculateExplosiveDamageForce
Signature:   void CalculateExplosiveDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for an explosive.

Function:    CalculateMeleeDamageForce
Signature:   void CalculateMeleeDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a melee impact.

Function:    CenterPrint
Signature:   void CenterPrint(handle, string)
Description: Sends HUD text message to the client. Usage: CenterPrint(<player ent handle>, <string>)

Function:    CenterPrintAll
Signature:   void CenterPrintAll(string)
Description: Sends HUD text message to all clients. Usage: CenterPrintAll(<string>)

Function:    CenterPrintAllWithParams
Signature:   void CenterPrintAllWithParams(string, string, string, string, string)
Description: Sends HUD text message to all clients, with optional string params. Format is limited to strings and is mapped to param order, i.e. %s1, %s2, %s3, %s4. You can pass an empty string as a param to skip. Usage: CenterPrintAllWithParams(<string>, <p1>, <p2>, <p3>, <p4>)

Function:    CenterPrintWithParams
Signature:   void CenterPrintWithParams(handle, string, string, string, string, string)
Description: Sends HUD text message to the client, with optional string params. Format is limited to strings and is mapped to param order, i.e. %s1, %s2, %s3, %s4. You can pass an empty string as a param to skip. Usage: CenterPrintWithParams(<player ent handle>, <string>, <p1>, <p2>, <p3>, <p4>)

Function:    Color::GetRawColor
Signature:   int Color::GetRawColor()
Description: Gets the raw color integer.

Function:    Color::SetColor
Signature:   void Color::SetColor(int, int, int, int)
Description: Sets the color.

Function:    Color::SetRawColor
Signature:   void Color::SetRawColor(int)
Description: Sets the raw color integer.

Function:    ConcatTransforms
Signature:   void ConcatTransforms(handle, handle, handle)
Description: Concatenates two transformation matrices into another matrix.

Function:    CreateDamageInfo
Signature:   handle CreateDamageInfo(handle, handle, Vector, Vector, float, int)

Function:    CreateFireBulletsInfo
Signature:   handle CreateFireBulletsInfo(int, Vector, Vector, Vector, float, handle)

Function:    CreateProp
Signature:   handle CreateProp(string, Vector, string, int)
Description: Create a physics prop

Function:    CreateRope
Signature:   handle CreateRope(handle, handle, int, int, float, string, int, int)
Description: Creates a single rope between two entities. Can optionally follow specific attachments.

Function:    DebugDrawBox
Signature:   void DebugDrawBox(Vector, Vector, Vector, int, int, int, int, float)
Description: Draw a debug overlay box

Function:    DebugDrawLine
Signature:   void DebugDrawLine(Vector, Vector, int, int, int, bool, float)
Description: Draw a debug overlay box

Function:    DecalTrace
Signature:   void DecalTrace(handle, string)
Description: Creates a dynamic decal based on the given trace info. The trace information can be generated by TraceLineComplex() and the decal name must be from decals_subrect.txt.

Function:    DestroyDamageInfo
Signature:   void DestroyDamageInfo(handle)

Function:    DestroyFireBulletsInfo
Signature:   void DestroyFireBulletsInfo(handle)

Function:    DispatchParticleEffect
Signature:   function DispatchParticleEffect(particleName, origin, angles, entity)
Description: Dispatches a one-off particle system

Function:    DispatchParticleEffectByAttachment
Signature:   void DispatchParticleEffectByAttachment(string, int, handle, string, bool)
Description: Dispatches one-off particle system by attaching to an entity. Params: <particle name>, <attach type>, <target entity>, <attachment name>, <reset all particles on entity?>

Function:    DispatchSpawn
Signature:   void DispatchSpawn(handle)
Description: Spawns an unspawned entity.

Function:    DoIncludeScript
Signature:   bool DoIncludeScript(string, handle)
Description: Execute a script (internal)

Function:    EmitSoundOn
Signature:   void EmitSoundOn(string, handle)
Description: Play named sound on an entity.

Function:    EmitSoundOnClient
Signature:   void EmitSoundOnClient(string, handle, handle)
Description: Play named sound only on the client for the specified player.

Function:    EmitSoundParamsOn
Signature:   void EmitSoundParamsOn(handle, handle)
Description: Play EmitSound_t params on an entity.

Function:    EmitSound_t::ClearOrigin
Signature:   void EmitSound_t::ClearOrigin()
Description: Clears the sound's origin override if it has one.

Function:    EmitSound_t::GetChannel
Signature:   int EmitSound_t::GetChannel()

Function:    EmitSound_t::GetEmitCloseCaption
Signature:   bool EmitSound_t::GetEmitCloseCaption()
Description: Gets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::GetFlags
Signature:   int EmitSound_t::GetFlags()
Description: Gets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::GetOrigin
Signature:   Vector EmitSound_t::GetOrigin()
Description: Gets the sound's origin override.

Function:    EmitSound_t::GetSoundLevel
Signature:   int EmitSound_t::GetSoundLevel()
Description: Gets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetSoundName
Signature:   string EmitSound_t::GetSoundName()
Description: Gets the sound's file path or soundscript name.

Function:    EmitSound_t::GetSoundScriptHandle
Signature:   int EmitSound_t::GetSoundScriptHandle()

Function:    EmitSound_t::GetSoundTime
Signature:   float EmitSound_t::GetSoundTime()
Description: Gets the time the sound will begin, relative to Time().

Function:    EmitSound_t::GetSpeakerEntity
Signature:   int EmitSound_t::GetSpeakerEntity()
Description: Gets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::GetSpecialDSP
Signature:   int EmitSound_t::GetSpecialDSP()

Function:    EmitSound_t::GetVolume
Signature:   float EmitSound_t::GetVolume()
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetWarnOnDirectWaveReference
Signature:   bool EmitSound_t::GetWarnOnDirectWaveReference()
Description: Gets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::GetWarnOnMissingCloseCaption
Signature:   bool EmitSound_t::GetWarnOnMissingCloseCaption()
Description: Gets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EmitSound_t::HasOrigin
Signature:   bool EmitSound_t::HasOrigin()
Description: Returns true if the sound has an origin override.

Function:    EmitSound_t::SetChannel
Signature:   void EmitSound_t::SetChannel(int)

Function:    EmitSound_t::SetEmitCloseCaption
Signature:   void EmitSound_t::SetEmitCloseCaption(bool)
Description: Sets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::SetFlags
Signature:   void EmitSound_t::SetFlags(int)
Description: Sets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::SetOrigin
Signature:   void EmitSound_t::SetOrigin(Vector)
Description: Sets the sound's origin override.

Function:    EmitSound_t::SetSoundLevel
Signature:   void EmitSound_t::SetSoundLevel(int)
Description: Sets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetSoundName
Signature:   void EmitSound_t::SetSoundName(string)
Description: Sets the sound's file path or soundscript name.

Function:    EmitSound_t::SetSoundScriptHandle
Signature:   void EmitSound_t::SetSoundScriptHandle(int)

Function:    EmitSound_t::SetSoundTime
Signature:   void EmitSound_t::SetSoundTime(float)
Description: Sets the time the sound will begin, relative to Time().

Function:    EmitSound_t::SetSpeakerEntity
Signature:   void EmitSound_t::SetSpeakerEntity(int)
Description: Sets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::SetSpecialDSP
Signature:   void EmitSound_t::SetSpecialDSP(int)

Function:    EmitSound_t::SetVolume
Signature:   void EmitSound_t::SetVolume(float)
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetWarnOnDirectWaveReference
Signature:   void EmitSound_t::SetWarnOnDirectWaveReference(bool)
Description: Sets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::SetWarnOnMissingCloseCaption
Signature:   void EmitSound_t::SetWarnOnMissingCloseCaption(bool)
Description: Sets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EntFire
Signature:   function EntFire(target, action, value, delay, activator, caller)
Description: Generate an entity i/o event

Function:    EntFireByHandle
Signature:   function EntFireByHandle(target, action, value, delay, activator, caller)
Description: Generate an entity i/o event. First parameter is an entity instance.

Function:    EntIndexToHScript
Signature:   handle EntIndexToHScript(int)
Description: Returns the script handle for the given entity index.

Function:    EntitiesAtPoint
Signature:   void EntitiesAtPoint(handle, int, Vector, int)
Description: Gets all entities which are intersecting a point in space. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInBox
Signature:   void EntitiesInBox(handle, int, Vector, Vector, int)
Description: Gets all entities which are within a worldspace box. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInSphere
Signature:   void EntitiesInSphere(handle, int, Vector, float, int)
Description: Gets all entities which are within a sphere. This function copies them to an array with a maximum number of elements.

Function:    ExponentialDecay
Signature:   float ExponentialDecay(float, float, float)
Description: decayTo is factor the value should decay to in decayTime

Function:    FLerp
Signature:   float FLerp(float, float, float, float, float)

Function:    FMOD_PrecacheSound
Signature:   bool FMOD_PrecacheSound(string)
Description: Precaches a sound file or soundscript entry to FMOD sound system.

Function:    FileToKeyValues
Signature:   handle FileToKeyValues(string)
Description: Returns the CScriptKeyValues from the file, null if no file or file is too big.

Function:    FireBulletsInfo_t::GetAdditionalIgnoreEnt
Signature:   handle FireBulletsInfo_t::GetAdditionalIgnoreEnt()

Function:    FireBulletsInfo_t::GetAmmoType
Signature:   int FireBulletsInfo_t::GetAmmoType()

Function:    FireBulletsInfo_t::GetAttacker
Signature:   handle FireBulletsInfo_t::GetAttacker()

Function:    FireBulletsInfo_t::GetDamage
Signature:   float FireBulletsInfo_t::GetDamage()
Description: Gets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::GetDamageForceScale
Signature:   float FireBulletsInfo_t::GetDamageForceScale()

Function:    FireBulletsInfo_t::GetDirShooting
Signature:   Vector FireBulletsInfo_t::GetDirShooting()

Function:    FireBulletsInfo_t::GetDistance
Signature:   float FireBulletsInfo_t::GetDistance()
Description: Gets the distance the bullets should travel.

Function:    FireBulletsInfo_t::GetFlags
Signature:   int FireBulletsInfo_t::GetFlags()
Description: Gets the flags the bullets should use.

Function:    FireBulletsInfo_t::GetPlayerDamage
Signature:   int FireBulletsInfo_t::GetPlayerDamage()
Description: Gets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::GetPrimaryAttack
Signature:   bool FireBulletsInfo_t::GetPrimaryAttack()
Description: Gets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::GetShots
Signature:   int FireBulletsInfo_t::GetShots()
Description: Gets the number of shots which should be fired.

Function:    FireBulletsInfo_t::GetSource
Signature:   Vector FireBulletsInfo_t::GetSource()

Function:    FireBulletsInfo_t::GetSpread
Signature:   Vector FireBulletsInfo_t::GetSpread()

Function:    FireBulletsInfo_t::GetTracerFreq
Signature:   int FireBulletsInfo_t::GetTracerFreq()

Function:    FireBulletsInfo_t::SetAdditionalIgnoreEnt
Signature:   void FireBulletsInfo_t::SetAdditionalIgnoreEnt(handle)

Function:    FireBulletsInfo_t::SetAmmoType
Signature:   void FireBulletsInfo_t::SetAmmoType(int)

Function:    FireBulletsInfo_t::SetAttacker
Signature:   void FireBulletsInfo_t::SetAttacker(handle)

Function:    FireBulletsInfo_t::SetDamage
Signature:   void FireBulletsInfo_t::SetDamage(float)
Description: Sets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::SetDamageForceScale
Signature:   void FireBulletsInfo_t::SetDamageForceScale(float)

Function:    FireBulletsInfo_t::SetDirShooting
Signature:   void FireBulletsInfo_t::SetDirShooting(Vector)

Function:    FireBulletsInfo_t::SetDistance
Signature:   void FireBulletsInfo_t::SetDistance(float)
Description: Sets the distance the bullets should travel.

Function:    FireBulletsInfo_t::SetFlags
Signature:   void FireBulletsInfo_t::SetFlags(float)
Description: Sets the flags the bullets should use.

Function:    FireBulletsInfo_t::SetPlayerDamage
Signature:   void FireBulletsInfo_t::SetPlayerDamage(float)
Description: Sets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::SetPrimaryAttack
Signature:   void FireBulletsInfo_t::SetPrimaryAttack(bool)
Description: Sets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::SetShots
Signature:   void FireBulletsInfo_t::SetShots(int)
Description: Sets the number of shots which should be fired.

Function:    FireBulletsInfo_t::SetSource
Signature:   void FireBulletsInfo_t::SetSource(Vector)

Function:    FireBulletsInfo_t::SetSpread
Signature:   void FireBulletsInfo_t::SetSpread(Vector)

Function:    FireBulletsInfo_t::SetTracerFreq
Signature:   void FireBulletsInfo_t::SetTracerFreq(int)

Function:    FireGameEvent
Signature:   void FireGameEvent(string, handle)
Description: Fire a game event.

Function:    FireGameEventLocal
Signature:   void FireGameEventLocal(string, handle)
Description: Fire a game event without broadcasting to the client.

Function:    FrameTime
Signature:   float FrameTime()
Description: Get the time spent on the server in the last frame

Function:    FreeMatrixInstance
Signature:   void FreeMatrixInstance(handle)
Description: Frees an allocated matrix instance.

Function:    FreeQuaternionInstance
Signature:   void FreeQuaternionInstance(handle)
Description: Frees an allocated quaternion instance.

Function:    Gain
Signature:   float Gain(float, float)
Description: Gain is similar to Bias, but biasAmt biases towards or away from 0.5.

Function:    GetActivityName
Signature:   string GetActivityName(int)
Description: Gets the name of the specified activity index.

Function:    GetFrameCount
Signature:   int GetFrameCount()
Description: Absolute frame counter

Function:    GetLoadType
Signature:   int GetLoadType()
Description: Get the way the current game was loaded (corresponds to the MapLoad enum)

Function:    GetMapName
Signature:   string GetMapName()
Description: Get the name of the map.

Function:    GetPhysAngVelocity
Signature:   Vector GetPhysAngVelocity(handle)
Description: Gets physics angular velocity for the given VPhysics object

Function:    GetPhysVelocity
Signature:   Vector GetPhysVelocity(handle)
Description: Gets physics velocity for the given VPhysics object

Function:    GetPlayerByIndex
Signature:   handle GetPlayerByIndex(int)
Description: Returns a handle to a player by index. Only returns if the player is spawned and connected, otherwise returns null.

Function:    GetPlayerByName
Signature:   handle GetPlayerByName(string)
Description: Returns a handle to a player by name.

Function:    GetPlayerByUserId
Signature:   handle GetPlayerByUserId(int)
Description: Returns a handle to a player by user id.

Function:    GuessDamageForce
Signature:   void GuessDamageForce(handle, Vector, Vector, float)
Description: Try and guess the physics force to use.

Function:    IPhysicsObject::ApplyForceCenter
Signature:   void IPhysicsObject::ApplyForceCenter(Vector)

Function:    IPhysicsObject::ApplyForceOffset
Signature:   void IPhysicsObject::ApplyForceOffset(Vector, Vector)

Function:    IPhysicsObject::ApplyTorqueCenter
Signature:   void IPhysicsObject::ApplyTorqueCenter(Vector)

Function:    IPhysicsObject::EnableCollisions
Signature:   void IPhysicsObject::EnableCollisions(bool)

Function:    IPhysicsObject::EnableDrag
Signature:   void IPhysicsObject::EnableDrag(bool)

Function:    IPhysicsObject::EnableGravity
Signature:   void IPhysicsObject::EnableGravity(bool)

Function:    IPhysicsObject::EnableMotion
Signature:   void IPhysicsObject::EnableMotion(bool)

Function:    IPhysicsObject::GetInertia
Signature:   Vector IPhysicsObject::GetInertia()

Function:    IPhysicsObject::GetInvInertia
Signature:   Vector IPhysicsObject::GetInvInertia()

Function:    IPhysicsObject::GetInvMass
Signature:   float IPhysicsObject::GetInvMass()

Function:    IPhysicsObject::GetMass
Signature:   float IPhysicsObject::GetMass()

Function:    IPhysicsObject::GetName
Signature:   string IPhysicsObject::GetName()

Function:    IPhysicsObject::IsAsleep
Signature:   bool IPhysicsObject::IsAsleep()

Function:    IPhysicsObject::IsAttachedToConstraint
Signature:   bool IPhysicsObject::IsAttachedToConstraint(bool)

Function:    IPhysicsObject::IsCollisionEnabled
Signature:   bool IPhysicsObject::IsCollisionEnabled()

Function:    IPhysicsObject::IsDragEnabled
Signature:   bool IPhysicsObject::IsDragEnabled()

Function:    IPhysicsObject::IsFluid
Signature:   bool IPhysicsObject::IsFluid()

Function:    IPhysicsObject::IsGravityEnabled
Signature:   bool IPhysicsObject::IsGravityEnabled()

Function:    IPhysicsObject::IsHinged
Signature:   bool IPhysicsObject::IsHinged()

Function:    IPhysicsObject::IsMotionEnabled
Signature:   bool IPhysicsObject::IsMotionEnabled()

Function:    IPhysicsObject::IsMoveable
Signature:   bool IPhysicsObject::IsMoveable()

Function:    IPhysicsObject::IsStatic
Signature:   bool IPhysicsObject::IsStatic()

Function:    IPhysicsObject::IsTrigger
Signature:   bool IPhysicsObject::IsTrigger()

Function:    IPhysicsObject::SetInertia
Signature:   void IPhysicsObject::SetInertia(Vector)

Function:    IPhysicsObject::SetMass
Signature:   void IPhysicsObject::SetMass(float)

Function:    IPhysicsObject::Sleep
Signature:   void IPhysicsObject::Sleep()

Function:    IPhysicsObject::Wake
Signature:   void IPhysicsObject::Wake()

Function:    InsertAISound
Signature:   void InsertAISound(int, Vector, int, float, handle, int, handle)
Description: Inserts an AI sound.

Function:    IntervalPerTick
Signature:   float IntervalPerTick()
Description: Simulation tick interval

Function:    IsClient
Signature:   bool IsClient()
Description: Returns true if the script is being run on the client.

Function:    IsDedicatedServer
Signature:   bool IsDedicatedServer()
Description: Is this a dedicated server?

Function:    IsLinux
Signature:   bool IsLinux()
Description: Returns true if the game is being run on a Linux machine.

Function:    IsServer
Signature:   bool IsServer()
Description: Returns true if the script is being run on the server.

Function:    IsWindows
Signature:   bool IsWindows()
Description: Returns true if the game is being run on a Windows machine.

Function:    Lerp
Signature:   float Lerp(float, float, float)

Function:    ListenToGameEvent
Signature:   int ListenToGameEvent(string, handle, string)
Description: Register as a listener for a game event from script.

Function:    MatricesAreEqual
Signature:   void MatricesAreEqual(handle, handle)
Description: Checks if two matrices are equal.

Function:    MatrixAngles
Signature:   void MatrixAngles(handle, Vector, Vector)
Description: Gets the angles and position of a matrix.

Function:    MatrixCopy
Signature:   void MatrixCopy(handle, handle)
Description: Copies a matrix to another matrix.

Function:    MatrixGetColumn
Signature:   Vector MatrixGetColumn(handle, int)
Description: Gets the column of a matrix.

Function:    MatrixGetTranslation
Signature:   Vector MatrixGetTranslation(handle)
Description: Gets a matrix's translation.

Function:    MatrixInvert
Signature:   void MatrixInvert(handle, handle)
Description: Inverts a matrix and copies the result to another matrix.

Function:    MatrixQuaternion
Signature:   void MatrixQuaternion(handle, handle)
Description: Converts a matrix to a quaternion.

Function:    MatrixScaleBy
Signature:   void MatrixScaleBy(float, handle)
Description: Scales a matrix.

Function:    MatrixScaleByZero
Signature:   void MatrixScaleByZero(handle)
Description: Scales a matrix by zero.

Function:    MatrixSetColumn
Signature:   void MatrixSetColumn(Vector, int, handle)
Description: Sets the column of a matrix.

Function:    MatrixSetTranslation
Signature:   void MatrixSetTranslation(Vector, handle)
Description: Sets a matrix's translation.

Function:    MaxPlayers
Signature:   int MaxPlayers()
Description: Get the maximum number of players allowed on this server

Function:    Msg
Signature:   void Msg(string)

Function:    NPrint
Signature:   void NPrint(int, string)
Description: Notification print

Function:    NXPrint
Signature:   void NXPrint(int, int, int, int, bool, float, string)
Description: Notification print, customised

Function:    ParticleTracerEffect
Signature:   void ParticleTracerEffect(string, Vector, Vector, int, int, bool)
Description: Makes a tracer effect by using a particle. Params: <particle name>, <startpos>, <endpos>, <entindex>, <attachment idx>, <should whiz?>

Function:    PrecacheEntityFromTable
Signature:   void PrecacheEntityFromTable(string, handle)
Description: Precache an entity from KeyValues in a table.

Function:    PrecacheMaterial
Signature:   void PrecacheMaterial(string)
Description: Precaches a material for later usage.

Function:    PrecacheModel
Signature:   int PrecacheModel(string, bool)
Description: Precaches a model for later usage.

Function:    PrecacheOther
Signature:   void PrecacheOther(string, string)
Description: Precaches an entity class for later usage.

Function:    PrecacheParticleSystem
Signature:   void PrecacheParticleSystem(string)
Description: Precaches a particle system for later usage.

Function:    PredictedPosition
Signature:   Vector PredictedPosition(handle, float)
Description: Predicts what an entity's position will be in a given amount of time.

Function:    Quaternion::Init
Signature:   void Quaternion::Init(float, float, float, float)
Description: Creates a quaternion with the given values.

Function:    QuaternionAdd
Signature:   void QuaternionAdd(handle, handle, handle)
Description: Adds two quaternions together into another quaternion.

Function:    QuaternionAngles
Signature:   Vector QuaternionAngles(handle)
Description: Converts a quaternion to angles.

Function:    QuaternionMatrix
Signature:   void QuaternionMatrix(handle, handle)
Description: Converts a quaternion to a matrix.

Function:    RandomFloat
Signature:   float RandomFloat(float, float)
Description: Generate a random floating point number within a range, inclusive.

Function:    RandomInt
Signature:   int RandomInt(int, int)
Description: Generate a random integer within a range, inclusive.

Function:    ReadMapKeyValues
Signature:   handle ReadMapKeyValues()
Description: Read the KeyValues from <mapname>_kv.txt file.

Function:    RegisterActivityConstants
Signature:   void RegisterActivityConstants()
Description: Registers all activity IDs as usable constants.

Function:    RemapVal
Signature:   float RemapVal(float, float, float, float, float)

Function:    RemapValClamped
Signature:   float RemapValClamped(float, float, float, float, float)

Function:    SaveEntityKVToTable
Signature:   void SaveEntityKVToTable(handle, handle)
Description: Saves an entity's keyvalues to a table.

Function:    SetIdentityMatrix
Signature:   void SetIdentityMatrix(handle)
Description: Turns a matrix into an identity matrix.

Function:    SetPhysVelocity
Signature:   void SetPhysVelocity(handle, Vector, Vector)
Description: Sets physics velocity for the given VPhysics object

Function:    SetScaleMatrix
Signature:   void SetScaleMatrix(float, float, float, handle)
Description: Builds a scale matrix.

Function:    ShowMessage
Signature:   void ShowMessage(string)
Description: Print a hud message on all clients

Function:    SimpleSpline
Signature:   float SimpleSpline(float)

Function:    SimpleSplineRemapVal
Signature:   float SimpleSplineRemapVal(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SimpleSplineRemapValClamped
Signature:   float SimpleSplineRemapValClamped(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SmoothCurve
Signature:   float SmoothCurve(float)
Description: SmoothCurve maps a 0-1 value into another 0-1 value based on a cosine wave

Function:    SmoothCurve_Tweak
Signature:   float SmoothCurve_Tweak(float, float, float)
Description: SmoothCurve peaks at flPeakPos, flPeakSharpness controls the sharpness of the peak

Function:    SpawnEntityFromKeyValues
Signature:   handle SpawnEntityFromKeyValues(string, handle)
Description: Spawns an entity with the keyvalues in a CScriptKeyValues handle.

Function:    SpawnEntityFromTable
Signature:   handle SpawnEntityFromTable(string, handle)
Description: Native function for entity spawning.

Function:    StopListeningToAllGameEvents
Signature:   void StopListeningToAllGameEvents(string)
Description: Stop listening to all game events within a specific context.

Function:    StopListeningToGameEvent
Signature:   bool StopListeningToGameEvent(int)
Description: Stop the specified event listener.

Function:    Time
Signature:   float Time()
Description: Get the current server time

Function:    TraceHullComplex
Signature:   handle TraceHullComplex(Vector, Vector, Vector, Vector, handle, int, int)
Description: Takes 2 points, min/max hull bounds, an ent to ignore, a trace mask, and a collision group to trace to a point using a hull. Returns a handle which can access all trace info.

Function:    TraceLine
Signature:   float TraceLine(Vector, Vector, handle)
Description: given 2 points & ent to ignore, return fraction along line that hits world or models

Function:    TraceLineComplex
Signature:   handle TraceLineComplex(Vector, Vector, handle, int, int)
Description: Complex version of TraceLine which takes 2 points, an ent to ignore, a trace mask, and a collision group. Returns a handle which can access all trace info.

Function:    TraceLineEx
Signature:   bool TraceLineEx(handle)
Description: Does a raycast along a line specified by two vectors, returning the first entity or geometry hit along the way. Results are written to the passed-in table. The input variables are kept in the table after the trace.

Function:    TracerEffect
Signature:   void TracerEffect(Vector, Vector, int, int, float, bool, string)
Description: Makes a tracer effect using the old non-particle system effects. Params: <startpos>, <endpos>, <target entity>, <entindex>, <attachment idx>, <velocity>, <should whiz?>, <custom tracer name>

Function:    UniqueString
Signature:   function UniqueString(string)
Description: Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.

Function:    Vector::Cross
Signature:   float Vector::Cross(vector)
Description: Return the vector product of two vectors.

Function:    Vector::Dot
Signature:   float Vector::Dot(vector)
Description: Return the dot/scalar product of two vectors.

Function:    Vector::Length
Signature:   float Vector::Length()
Description: Return the vector's length.

Function:    Vector::Length2D
Signature:   float Vector::Length2D()
Description: Return the vector's 2D length.

Function:    Vector::Length2DSqr
Signature:   float Vector::Length2DSqr()
Description: Return the vector's squared 2D length.

Function:    Vector::LengthSqr
Signature:   float Vector::LengthSqr()
Description: Return the vector's squared length.

Function:    Vector::Norm
Signature:   void Vector::Norm()
Description: Normalize the vector in place.

Function:    Vector::Normalized
Signature:   float Vector::Normalized()
Description: Return a normalized version of the vector.

Function:    Vector::Scale
Signature:   vector Vector::Scale(float)
Description: Scale the vector's magnitude and return the result.

Function:    Vector::ToKVString
Signature:   string Vector::ToKVString()
Description: Return a vector as a string in KeyValue form, without separation commas.

Function:    VectorAngles
Signature:   Vector VectorAngles(Vector)
Description: Turns a direction vector into an angle.

Function:    VectorIRotate
Signature:   Vector VectorIRotate(Vector, handle)
Description: Rotates a vector with the inverse of a matrix.

Function:    VectorITransform
Signature:   Vector VectorITransform(Vector, handle)
Description: Transforms a vector with the inverse of a matrix.

Function:    VectorRotate
Signature:   Vector VectorRotate(Vector, handle)
Description: Rotates a vector with a matrix.

Function:    VectorTransform
Signature:   Vector VectorTransform(Vector, handle)
Description: Transforms a vector with a matrix.

Function:    WriteMapKeyValues
Signature:   bool WriteMapKeyValues(handle)
Description: Stores the CScriptKeyValues into <mapname>_kv.txt file.

Function:    clamp
Signature:   float clamp(float, float, float)

Function:    csurface_t::Name
Signature:   string csurface_t::Name()

Function:    csurface_t::SurfaceProps
Signature:   handle csurface_t::SurfaceProps()
Description: The surface's properties.

Function:    matrix3x4_t::Init
Signature:   void matrix3x4_t::Init(Vector, Vector, Vector, Vector)
Description: Creates a matrix where the X axis = forward, the Y axis = left, and the Z axis = up.

Function:    max
Signature:   float max(float, float)

Function:    min
Signature:   float min(float, float)

Function:    printc
Signature:   void printc(int, int, int, string)
Description: Version of print() which takes a color before the message.

Function:    printcl
Signature:   void printcl(int, int, int, string)
Description: Version of printl() which takes a color before the message.

Function:    scriptanimevent_t::GetCycle
Signature:   float scriptanimevent_t::GetCycle()

Function:    scriptanimevent_t::GetEvent
Signature:   int scriptanimevent_t::GetEvent()

Function:    scriptanimevent_t::GetEventTime
Signature:   float scriptanimevent_t::GetEventTime()

Function:    scriptanimevent_t::GetOptions
Signature:   string scriptanimevent_t::GetOptions()

Function:    scriptanimevent_t::GetSource
Signature:   handle scriptanimevent_t::GetSource()
Description: Gets the event's source entity.

Function:    scriptanimevent_t::GetType
Signature:   int scriptanimevent_t::GetType()
Description: Gets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    scriptanimevent_t::SetCycle
Signature:   void scriptanimevent_t::SetCycle(float)

Function:    scriptanimevent_t::SetEvent
Signature:   void scriptanimevent_t::SetEvent(int)

Function:    scriptanimevent_t::SetEventTime
Signature:   void scriptanimevent_t::SetEventTime(float)

Function:    scriptanimevent_t::SetOptions
Signature:   void scriptanimevent_t::SetOptions(string)

Function:    scriptanimevent_t::SetSource
Signature:   void scriptanimevent_t::SetSource(handle)
Description: Sets the event's source entity.

Function:    scriptanimevent_t::SetType
Signature:   void scriptanimevent_t::SetType(int)
Description: Sets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    surfacedata_t::GetFriction
Signature:   float surfacedata_t::GetFriction()

Function:    surfacedata_t::GetJumpFactor
Signature:   float surfacedata_t::GetJumpFactor()

Function:    surfacedata_t::GetMaterialChar
Signature:   char surfacedata_t::GetMaterialChar()

Function:    surfacedata_t::GetSoundBreak
Signature:   string surfacedata_t::GetSoundBreak()

Function:    surfacedata_t::GetSoundBulletImpact
Signature:   string surfacedata_t::GetSoundBulletImpact()

Function:    surfacedata_t::GetSoundImpactHard
Signature:   string surfacedata_t::GetSoundImpactHard()

Function:    surfacedata_t::GetSoundImpactSoft
Signature:   string surfacedata_t::GetSoundImpactSoft()

Function:    surfacedata_t::GetSoundRolling
Signature:   string surfacedata_t::GetSoundRolling()

Function:    surfacedata_t::GetSoundScrapeRough
Signature:   string surfacedata_t::GetSoundScrapeRough()

Function:    surfacedata_t::GetSoundScrapeSmooth
Signature:   string surfacedata_t::GetSoundScrapeSmooth()

Function:    surfacedata_t::GetSoundStepLeft
Signature:   string surfacedata_t::GetSoundStepLeft()

Function:    surfacedata_t::GetSoundStepRight
Signature:   string surfacedata_t::GetSoundStepRight()

Function:    surfacedata_t::GetSoundStrain
Signature:   string surfacedata_t::GetSoundStrain()

Function:    surfacedata_t::GetThickness
Signature:   float surfacedata_t::GetThickness()

Member:      Color.a
Signature:   char Color.a
Description: Member variable for alpha. (transparency)

Member:      Color.b
Signature:   char Color.b
Description: Member variable for blue.

Member:      Color.g
Signature:   char Color.g
Description: Member variable for green.

Member:      Color.r
Signature:   char Color.r
Description: Member variable for red.

Member:      Quaternion.w
Signature:   float Quaternion.w
Description: The quaternion's scalar component.

Member:      Quaternion.x
Signature:   float Quaternion.x
Description: The quaternion's i axis component.

Member:      Quaternion.y
Signature:   float Quaternion.y
Description: The quaternion's j axis component.

Member:      Quaternion.z
Signature:   float Quaternion.z
Description: The quaternion's k axis component.

Member:      Vector.x
Signature:   float Vector.x
Description: The vector's X coordinate on the cartesian X axis.

Member:      Vector.y
Signature:   float Vector.y
Description: The vector's Y coordinate on the cartesian Y axis.

Member:      Vector.z
Signature:   float Vector.z
Description: The vector's Z coordinate on the cartesian Z axis.

Hook:        CAI_BaseNPC -> GetActualShootPosition
Signature:   void CAI_BaseNPC -> GetActualShootPosition(Vector [shootOrigin], handle [target])
Description: Called when the NPC is getting their actual shoot position, using the default shoot position as the parameter. (NOTE: NPCs which override this themselves might not always use this hook!)

Hook:        CAI_BaseNPC -> NPC_TranslateActivity
Signature:   variant CAI_BaseNPC -> NPC_TranslateActivity(string [activity], int [activity_id])
Description: Called when the NPC is translating their current activity. The activity is provided in both string and ID form. Should return either an activity string or an activity ID. Return -1 to not translate.

Hook:        CAI_BaseNPC -> NPC_TranslateSchedule
Signature:   variant CAI_BaseNPC -> NPC_TranslateSchedule(string [schedule], int [schedule_id])
Description: Called when the NPC is translating their current schedule. The schedule is provided in both string and ID form. Should return either a schedule string or a schedule ID. Return -1 to not translate.

Hook:        CAI_BaseNPC -> QueryHearSound
Signature:   bool CAI_BaseNPC -> QueryHearSound(handle [sound])
Description: Called when the NPC is deciding whether to hear a CSound or not.

Hook:        CAI_BaseNPC -> QuerySeeEntity
Signature:   bool CAI_BaseNPC -> QuerySeeEntity(handle [entity])
Description: Called when the NPC is deciding whether to see an entity or not.

Hook:        CBaseAnimating -> HandleAnimEvent
Signature:   bool CBaseAnimating -> HandleAnimEvent(handle [event])
Description: Called when handling animation events. Return false to cancel base handling.

Hook:        CBaseAnimating -> OnServerRagdoll
Signature:   void CBaseAnimating -> OnServerRagdoll(handle [ragdoll], bool [submodel])
Description: Called when this entity creates/turns into a server-side ragdoll.

Hook:        CBaseCombatCharacter -> RelationshipPriority
Signature:   int CBaseCombatCharacter -> RelationshipPriority(handle [entity], int [def])
Description: Called when a character's relationship priority for another entity is requested. Returning a number will make the game use that priority instead of the default priority. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)

Hook:        CBaseCombatCharacter -> RelationshipType
Signature:   int CBaseCombatCharacter -> RelationshipType(handle [entity], int [def])
Description: Called when a character's relationship to another entity is requested. Returning a disposition will make the game use that disposition instead of the default relationship. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)

Hook:        CBaseEntity -> HandleInteraction
Signature:   bool CBaseEntity -> HandleInteraction(int [interaction], handle [sourceEnt])
Description: Called for internal game interactions. See the g_interaction set of constants for more information. Returning true or false will return that value without falling to any internal handling. Returning nothing will allow the interaction to fall to any internal handling.

Hook:        CBaseEntity -> ModifyEmitSoundParams
Signature:   void CBaseEntity -> ModifyEmitSoundParams(handle [params])
Description: Called every time a sound is emitted on this entity, allowing for its parameters to be modified.

Hook:        CBaseEntity -> ModifySentenceParams
Signature:   void CBaseEntity -> ModifySentenceParams(handle [params])
Description: Called every time a sentence is emitted on this entity, allowing for its parameters to be modified.

Hook:        CBaseEntity -> OnDeath
Signature:   bool CBaseEntity -> OnDeath(handle [info])
Description: Called when the entity dies (Event_Killed). Returning false makes the entity cancel death, although this could have unforeseen consequences. For hooking any damage instead of just death, see filter_script and PassesFinalDamageFilter.

Hook:        CBaseEntity -> OnEntText
Signature:   string CBaseEntity -> OnEntText()
Description: Called every frame when ent_text is enabled on the entity. Return a string to be added to the ent_text printout.

Hook:        CBaseEntity -> OnKilledOther
Signature:   void CBaseEntity -> OnKilledOther(handle [victim], handle [info])
Description: Called when the entity kills another entity.

Hook:        CBaseEntity -> UpdateOnRemove
Signature:   void CBaseEntity -> UpdateOnRemove()
Description: Called when the entity is being removed.

Hook:        CBaseEntity -> VPhysicsCollision
Signature:   void CBaseEntity -> VPhysicsCollision(handle [entity], float [speed], Vector [point], Vector [normal])
Description: Called for every single VPhysics-related collision experienced by this entity.

Hook:        CBasePlayer -> PlayerRunCommand
Signature:   void CBasePlayer -> PlayerRunCommand(handle [command])
Description: Called when running a player command on the server.

Hook:        CEntities -> OnEntityCreated
Signature:   void CEntities -> OnEntityCreated(handle [entity])
Description: Called when an entity is created. Requires EnableEntityListening() to be fired beforehand.

Hook:        CEntities -> OnEntityDeleted
Signature:   void CEntities -> OnEntityDeleted(handle [entity])
Description: Called when an entity is deleted. Requires EnableEntityListening() to be fired beforehand.

Hook:        CEntities -> OnEntitySpawned
Signature:   void CEntities -> OnEntitySpawned(handle [entity])
Description: Called when an entity spawns. Requires EnableEntityListening() to be fired beforehand.

Hook:        CFilterScript -> PassesDamageFilter
Signature:   bool CFilterScript -> PassesDamageFilter(handle [caller], handle [info])
Description: A hook used by filter_script to determine what damage should pass it when it's being used as a damage filter. Return true if the info should pass or false if it should not. If this hook is not defined in a filter_script, damage filter requests will instead check PassesFilter with the attacker as the activator.

Hook:        CFilterScript -> PassesFilter
Signature:   bool CFilterScript -> PassesFilter(handle [caller], handle [activator])
Description: A hook used by filter_script to determine what entities should pass it. Return true if the entity should pass or false if it should not. This hook is required for regular filtering.

Hook:        CNMRiH_ItemCustom -> OnItemApply
Signature:   void CNMRiH_ItemCustom -> OnItemApply()
Description: Called when this item is applied by a player (i.e. clicked in the inventory wheel).

Hook:        CNMRiH_ItemCustom -> OnItemDrop
Signature:   void CNMRiH_ItemCustom -> OnItemDrop()
Description: Called when this item is dropped by a player.

Hook:        CNMRiH_ItemCustom -> OnItemPickup
Signature:   void CNMRiH_ItemCustom -> OnItemPickup()
Description: Called when a player picks up this item (with +USE).

Hook:        CNMRiH_ItemCustom -> PostItemPickupThink
Signature:   void CNMRiH_ItemCustom -> PostItemPickupThink()
Description: Called as a think function when the item is carried.

Hook:        CNMRiH_ItemCustom -> PreItemPickupThink
Signature:   void CNMRiH_ItemCustom -> PreItemPickupThink()
Description: Called as a think function when the item isn't carried.
